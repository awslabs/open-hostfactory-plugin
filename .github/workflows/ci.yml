name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: testing
  AWS_SECRET_ACCESS_KEY: testing
  ENVIRONMENT: testing
  TESTING: true

jobs:
  lint-and-security:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
    
    - name: Install dependencies with uv (faster)
      run: |
        # Use uv for faster dependency installation in CI
        uv pip install --system -e ".[dev]"
    
    - name: Run code quality checks
      run: |
        make ci-quality
      # TODO: Remove continue-on-error once code quality issues are fixed
      continue-on-error: true

  architecture-compliance:
    name: Architecture Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"
    
    - name: Install dependencies with uv
      run: |
        uv pip install --system -r requirements.txt -r requirements-dev.txt
    
    - name: Run Architecture Quality Checks
      run: |
        make ci-architecture
      continue-on-error: true

  unit-tests:
    name: Unit Tests (Fast)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"
    
    - name: Install dependencies with uv
      run: |
        uv pip install --system -r requirements.txt -r requirements-dev.txt
    
    - name: Run unit tests
      run: |
        make ci-tests-unit
      # TODO: Remove continue-on-error once unit tests are fixed and stable
      continue-on-error: true
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          junit-unit.xml
          coverage-unit.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage-unit.xml
        flags: unit
        name: unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"
    
    - name: Install dependencies with uv
      run: |
        uv pip install --system -r requirements.txt -r requirements-dev.txt

    - name: Run integration tests
      run: |
        make ci-tests-integration
      # TODO: Remove continue-on-error once integration tests are fixed and stable
      continue-on-error: true
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          junit-integration.xml
          coverage-integration.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage-integration.xml
        flags: integration
        name: integration-tests

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"
    
    - name: Install dependencies with uv
      run: |
        uv pip install --system -r requirements.txt -r requirements-dev.txt

    - name: Run end-to-end tests
      run: |
        make ci-tests-e2e
      # TODO: Remove continue-on-error once e2e tests are fixed and stable
      continue-on-error: true
    
    - name: Upload e2e test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: junit-e2e.xml

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"
    
    - name: Install dependencies with uv
      run: |
        uv pip install --system -r requirements.txt -r requirements-dev.txt

    - name: Run performance tests
      run: |
        make ci-tests-performance
      # TODO: Remove continue-on-error once performance tests are fixed and stable
      continue-on-error: true
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: junit-performance.xml

  build-and-package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint-and-security, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"
    
    - name: Install build dependencies with uv
      run: |
        uv pip install --system build wheel setuptools
        uv pip install --system -r requirements.txt

    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          build/

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"
    
    - name: Install dependencies with uv
      run: |
        uv pip install --system -r requirements.txt -r requirements-dev.txt
    
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results/
    
    - name: Generate complete test report
      run: |
        python -m pytest tests/ \
          --junitxml=test-results-combined.xml \
          --cov=src \
          --cov-report=xml:coverage-combined.xml \
          --cov-report=html:htmlcov \
          --tb=short \
          -q \
          --maxfail=1 \
          --timeout=60 \
          -m "not slow"
      continue-on-error: true
    
    - name: Upload complete test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-test-report
        path: |
          test-results-combined.xml
          coverage-combined.xml
          htmlcov/
    
    - name: Upload final coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: coverage-combined.xml
        flags: complete
        name: complete-tests

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-security, unit-tests, integration-tests, e2e-tests, build-and-package]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.lint-and-security.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "All CI checks completed successfully"
    
    - name: Notify failure
      if: ${{ needs.lint-and-security.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "Some CI checks failed"
        exit 1
