"""Storage-related command handlers for the interface layer."""
from __future__ import annotations
from typing import Dict, Any, List
import time

from src.application.base.command_handler import CLICommandHandler
from src.domain.base.exceptions import DomainException


class ListStorageStrategiesCLIHandler(CLICommandHandler):
    """Handler for storage list command."""
    
    async async def handle(self, args) -> Dict[str, Any]:
        """
        Handle storage list operations.
        
        Args:
            args: Modern argument namespace with resource/action structure
            
        Returns:
            List of available storage strategies
        """
        try:
            # Use application layer instead of direct infrastructure access
            from src.application.queries.storage import ListStorageStrategiesQuery
            
            query = ListStorageStrategiesQuery(
                include_current=True,
                include_details=getattr(args, 'long', False)
            )
            
            # Execute via CQRS QueryBus
            response = await self.query_bus.execute(query)
            
            # Convert DTO to dict for CLI output
            return {
                "strategies": [strategy.model_dump() for strategy in response.strategies],
                "current_strategy": response.current_strategy,
                "total_count": response.total_count
            }
            
        except Exception as e:
            self.logger.error(f"Failed to list storage strategies: {str(e)}")
            raise DomainException(f"Storage list operation failed: {str(e)}")


class ShowStorageConfigurationCLIHandler(CLICommandHandler):
    """Handler for storage show command."""
    
    async async def handle(self, args) -> Dict[str, Any]:
        """
        Handle storage show operations.
        
        Args:
            args: Modern argument namespace with resource/action structure
            
        Returns:
            Storage configuration details
        """
        try:
            # Use application layer for configuration access
            from src.application.queries.system import GetConfigurationSectionQuery, GetConfigurationQuery
            
            if hasattr(args, 'strategy') and args.strategy:
                # Get specific strategy configuration
                strategy_key = f"storage.{args.strategy}_strategy"
                query = GetConfigurationQuery(key=strategy_key, default={})
                response = await self.query_bus.execute(query)
                
                # Also get current strategy to check if it's active
                current_query = GetConfigurationQuery(key="storage.strategy", default="unknown")
                current_response = await self.query_bus.execute(current_query)
                
                return {
                    "strategy": args.strategy,
                    "configuration": response.value,
                    "found": response.found,
                    "active": current_response.value == args.strategy
                }
            else:
                # Get entire storage configuration section
                query = GetConfigurationSectionQuery(section="storage")
                response = await self.query_bus.execute(query)
                
                return {
                    "current_strategy": response.config.get("strategy", "unknown"),
                    "configuration": response.config,
                    "section_found": response.found
                }
                
        except DomainException as e:
            return {
                "error": f"Storage configuration error: {str(e)}",
                "success": False
            }
        except Exception as e:
            return {
                "error": f"Unexpected error: {str(e)}",
                "success": False
            }
            
        except Exception as e:
            self.logger.error(f"Failed to show storage configuration: {str(e)}")
            raise DomainException(f"Storage show operation failed: {str(e)}")
    
    def _get_available_strategies(self) -> List[str]:
        """Get list of available storage strategies."""
        try:
            from src.infrastructure.registry.storage_registry import get_storage_registry
            registry = get_storage_registry()
            return registry.get_registered_types()
        except Exception:
            return []


class ValidateStorageConfigurationCLIHandler(CLICommandHandler):
    """Handler for storage validate command."""
    
    async def handle(self, args) -> Dict[str, Any]:
        """
        Handle storage validate operations.
        
        Args:
            args: Modern argument namespace with resource/action structure
            
        Returns:
            Validation results
        """
        try:
            # Get storage configuration
            from src.config.manager import get_config_manager
            config_manager = get_config_manager()
            
            validation_results = []
            
            # If specific strategy requested, validate only that
            if hasattr(args, 'strategy') and args.strategy:
                result = self._validate_strategy(args.strategy, config_manager)
                validation_results.append(result)
            else:
                # Validate current strategy
                current_strategy = config_manager.get("storage.strategy", "json")
                result = self._validate_strategy(current_strategy, config_manager)
                validation_results.append(result)
            
            # Overall validation status
            all_valid = all(result["valid"] for result in validation_results)
            
            return {
                "overall_valid": all_valid,
                "validations": validation_results,
                "timestamp": time.time()
            }
            
        except Exception as e:
            self.logger.error(f"Failed to validate storage configuration: {str(e)}")
            raise DomainException(f"Storage validation failed: {str(e)}")
    
    def _validate_strategy(self, strategy: str, config_manager) -> Dict[str, Any]:
        """Validate a specific storage strategy."""
        try:
            # Check if strategy is registered
            from src.infrastructure.registry.storage_registry import get_storage_registry
            registry = get_storage_registry()
            
            if not registry.is_storage_registered(strategy):
                return {
                    "strategy": strategy,
                    "valid": False,
                    "error": f"Strategy '{strategy}' is not registered",
                    "available_strategies": registry.get_registered_types()
                }
            
            # Get strategy configuration
            strategy_config_key = f"storage.{strategy}_strategy"
            strategy_config = config_manager.get(strategy_config_key, {})
            
            # Try to create configuration object
            config_obj = registry.create_config(strategy, strategy_config)
            
            return {
                "strategy": strategy,
                "valid": True,
                "configuration": strategy_config,
                "config_object_created": True
            }
            
        except Exception as e:
            return {
                "strategy": strategy,
                "valid": False,
                "error": str(e)
            }


class StorageConnectivityTestCLIHandler(CLICommandHandler):
    """Handler for storage test command."""
    
    async def handle(self, args) -> Dict[str, Any]:
        """
        Handle storage test operations.
        
        Args:
            args: Modern argument namespace with resource/action structure
            
        Returns:
            Connectivity test results
        """
        try:
            # Get storage configuration
            from src.config.manager import get_config_manager
            config_manager = get_config_manager()
            
            test_results = []
            
            # If specific strategy requested, test only that
            if hasattr(args, 'strategy') and args.strategy:
                result = self._test_strategy(args.strategy, config_manager, args)
                test_results.append(result)
            else:
                # Test current strategy
                current_strategy = config_manager.get("storage.strategy", "json")
                result = self._test_strategy(current_strategy, config_manager, args)
                test_results.append(result)
            
            # Overall test status
            all_passed = all(result["passed"] for result in test_results)
            
            return {
                "overall_passed": all_passed,
                "tests": test_results,
                "timestamp": time.time()
            }
            
        except Exception as e:
            self.logger.error(f"Failed to test storage connectivity: {str(e)}")
            raise DomainException(f"Storage test failed: {str(e)}")
    
    def _test_strategy(self, strategy: str, config_manager, args) -> Dict[str, Any]:
        """Test connectivity for a specific storage strategy."""
        start_time = time.time()
        timeout = getattr(args, 'timeout', 30)
        
        try:
            # Get storage registry
            from src.infrastructure.registry.storage_registry import get_storage_registry
            registry = get_storage_registry()
            
            if not registry.is_storage_registered(strategy):
                return {
                    "strategy": strategy,
                    "passed": False,
                    "error": f"Strategy '{strategy}' is not registered",
                    "duration": time.time() - start_time
                }
            
            # Get strategy configuration
            strategy_config_key = f"storage.{strategy}_strategy"
            strategy_config = config_manager.get(strategy_config_key, {})
            
            # Create strategy instance
            strategy_instance = registry.create_strategy(strategy, strategy_config)
            
            # Basic connectivity test - try to use the strategy
            test_passed = True
            error_message = None
            
            try:
                # For JSON strategy, check if path is accessible
                if strategy == "json":
                    import os
                    base_path = strategy_config.get("base_path", "data")
                    if not os.path.exists(base_path):
                        os.makedirs(base_path, exist_ok=True)
                    test_passed = os.access(base_path, os.R_OK | os.W_OK)
                    if not test_passed:
                        error_message = f"Cannot read/write to path: {base_path}"
                
                # For SQL strategy, try to connect
                elif strategy == "sql":
                    # This would require implementing a connection test
                    # For now, just check if we can create the strategy
                    pass
                
                # For DynamoDB strategy, try to connect
                elif strategy == "dynamodb":
                    # This would require implementing a connection test
                    # For now, just check if we can create the strategy
                    pass
                
            except Exception as e:
                test_passed = False
                error_message = str(e)
            
            duration = time.time() - start_time
            
            result = {
                "strategy": strategy,
                "passed": test_passed,
                "duration": duration,
                "timeout": timeout
            }
            
            if error_message:
                result["error"] = error_message
            
            return result
            
        except Exception as e:
            return {
                "strategy": strategy,
                "passed": False,
                "error": str(e),
                "duration": time.time() - start_time
            }


class StorageHealthCLIHandler(CLICommandHandler):
    """Handler for storage health command."""
    
    async def handle(self, args) -> Dict[str, Any]:
        """
        Handle storage health operations.
        
        Args:
            args: Modern argument namespace with resource/action structure
            
        Returns:
            Storage health information
        """
        try:
            # Use application layer for configuration access
            from src.application.queries.system import GetConfigurationQuery
            from src.application.queries.storage import GetStorageHealthQuery
            
            # Get current storage strategy
            strategy_query = GetConfigurationQuery(key="storage.strategy", default="json")
            strategy_response = await self.query_bus.execute(strategy_query)
            current_strategy = strategy_response.value
            
            # Get storage health via application layer
            health_query = GetStorageHealthQuery(
                strategy_name=current_strategy,
                detailed=getattr(args, 'detailed', False)
            )
            health_response = await self.query_bus.execute(health_query)
            
            return {
                "strategy": health_response.strategy_name,
                "healthy": health_response.healthy,
                "status": health_response.status,
                "details": health_response.details
            }
            
            # Basic health checks
            health_checks = []
            
            # Check if current strategy is registered
            strategy_registered = registry.is_storage_registered(current_strategy)
            health_checks.append({
                "check": "strategy_registered",
                "status": "healthy" if strategy_registered else "unhealthy",
                "message": f"Current strategy '{current_strategy}' is {'registered' if strategy_registered else 'not registered'}"
            })
            
            # Check configuration validity
            try:
                strategy_config_key = f"storage.{current_strategy}_strategy"
                strategy_config = config_manager.get(strategy_config_key, {})
                config_obj = registry.create_config(current_strategy, strategy_config)
                health_checks.append({
                    "check": "configuration_valid",
                    "status": "healthy",
                    "message": "Storage configuration is valid"
                })
            except Exception as e:
                health_checks.append({
                    "check": "configuration_valid",
                    "status": "unhealthy",
                    "message": f"Storage configuration is invalid: {str(e)}"
                })
            
            # Check storage accessibility
            try:
                strategy_instance = registry.create_strategy(current_strategy, strategy_config)
                health_checks.append({
                    "check": "storage_accessible",
                    "status": "healthy",
                    "message": "Storage strategy can be instantiated"
                })
            except Exception as e:
                health_checks.append({
                    "check": "storage_accessible",
                    "status": "unhealthy",
                    "message": f"Cannot create storage strategy: {str(e)}"
                })
            
            # Overall health status
            overall_healthy = all(check["status"] == "healthy" for check in health_checks)
            
            result = {
                "overall_status": "healthy" if overall_healthy else "unhealthy",
                "current_strategy": current_strategy,
                "health_checks": health_checks,
                "timestamp": time.time()
            }
            
            # Add detailed information if requested
            if hasattr(args, 'detailed') and args.detailed:
                result["available_strategies"] = registry.get_registered_types()
                result["storage_configuration"] = config_manager.get("storage", {})
            
            return result
            
        except Exception as e:
            self.logger.error(f"Failed to check storage health: {str(e)}")
            raise DomainException(f"Storage health check failed: {str(e)}")


class StorageMetricsCLIHandler(CLICommandHandler):
    """Handler for storage metrics command."""
    
    async def handle(self, args) -> Dict[str, Any]:
        """
        Handle storage metrics operations.
        
        Args:
            args: Modern argument namespace with resource/action structure
            
        Returns:
            Storage performance metrics
        """
        try:
            # Use application layer for configuration and metrics access
            from src.application.queries.system import GetConfigurationQuery
            from src.application.queries.storage import GetStorageMetricsQuery
            
            if hasattr(args, 'strategy') and args.strategy:
                # Get metrics for specific strategy
                metrics_query = GetStorageMetricsQuery(
                    strategy_name=args.strategy,
                    time_range=getattr(args, 'time_range', '1h'),
                    include_operations=getattr(args, 'detailed', True)
                )
                metrics_response = await self.query_bus.execute(metrics_query)
                
                return {
                    "strategy": metrics_response.strategy_name,
                    "time_range": metrics_response.time_range,
                    "operations_count": metrics_response.operations_count,
                    "average_latency": metrics_response.average_latency,
                    "error_rate": metrics_response.error_rate,
                    "details": metrics_response.details
                }
            else:
                # Get current strategy and its metrics
                strategy_query = GetConfigurationQuery(key="storage.strategy", default="json")
                strategy_response = await self.query_bus.execute(strategy_query)
                current_strategy = strategy_response.value
                
                metrics_query = GetStorageMetricsQuery(
                    strategy_name=current_strategy,
                    time_range=getattr(args, 'time_range', '1h'),
                    include_operations=getattr(args, 'detailed', True)
                )
                metrics_response = await self.query_bus.execute(metrics_query)
                
                return {
                    "current_strategy": current_strategy,
                    "metrics": {
                        "operations_count": metrics_response.operations_count,
                        "average_latency": metrics_response.average_latency,
                        "error_rate": metrics_response.error_rate,
                        "time_range": metrics_response.time_range,
                        "details": metrics_response.details
                    }
                }
                
        except DomainException as e:
            return {
                "error": f"Storage metrics error: {str(e)}",
                "success": False
            }
        except Exception as e:
            return {
                "error": f"Unexpected error: {str(e)}",
                "success": False
            }
    
    def _get_strategy_metrics(self, strategy: str, config_manager) -> Dict[str, Any]:
        """Get metrics for a specific storage strategy."""
        try:
            # Basic metrics that we can gather
            metrics = {
                "strategy": strategy,
                "status": "unknown"
            }
            
            # Get storage registry
            from src.infrastructure.registry.storage_registry import get_storage_registry
            registry = get_storage_registry()
            
            if not registry.is_storage_registered(strategy):
                metrics["status"] = "not_registered"
                return metrics
            
            # Strategy-specific metrics
            if strategy == "json":
                metrics.update(self._get_json_metrics(config_manager))
            elif strategy == "sql":
                metrics.update(self._get_sql_metrics(config_manager))
            elif strategy == "dynamodb":
                metrics.update(self._get_dynamodb_metrics(config_manager))
            
            metrics["status"] = "available"
            return metrics
            
        except Exception as e:
            return {
                "strategy": strategy,
                "status": "error",
                "error": str(e)
            }
    
    def _get_json_metrics(self, config_manager) -> Dict[str, Any]:
        """Get JSON storage specific metrics."""
        import os
        
        strategy_config = config_manager.get("storage.json_strategy", {})
        base_path = strategy_config.get("base_path", "data")
        
        metrics = {
            "type": "json",
            "base_path": base_path
        }
        
        try:
            if os.path.exists(base_path):
                # Get directory size and file count
                total_size = 0
                file_count = 0
                for root, dirs, files in os.walk(base_path):
                    for file in files:
                        if file.endswith('.json'):
                            file_path = os.path.join(root, file)
                            total_size += os.path.getsize(file_path)
                            file_count += 1
                
                metrics.update({
                    "total_size_bytes": total_size,
                    "file_count": file_count,
                    "path_accessible": True
                })
            else:
                metrics["path_accessible"] = False
                
        except Exception as e:
            metrics["error"] = str(e)
        
        return metrics
    
    def _get_sql_metrics(self, config_manager) -> Dict[str, Any]:
        """Get SQL storage specific metrics."""
        strategy_config = config_manager.get("storage.sql_strategy", {})
        
        return {
            "type": "sql",
            "database_type": strategy_config.get("type", "unknown"),
            "host": strategy_config.get("host", "localhost"),
            "database": strategy_config.get("name", "unknown")
        }
    
    def _get_dynamodb_metrics(self, config_manager) -> Dict[str, Any]:
        """Get DynamoDB storage specific metrics."""
        strategy_config = config_manager.get("storage.dynamodb_strategy", {})
        
        return {
            "type": "dynamodb",
            "region": strategy_config.get("region", "unknown"),
            "table_prefix": strategy_config.get("table_prefix", "unknown")
        }
