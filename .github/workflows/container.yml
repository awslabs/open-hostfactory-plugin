name: Container Build and Publish

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'deployment/docker/**'
      - 'dev-tools/scripts/container_build.sh'
      - '.github/workflows/container.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'deployment/docker/**'
      - 'dev-tools/scripts/container_build.sh'
      - '.github/workflows/container.yml'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

jobs:
  get-config:
    name: Get Configuration from Makefile
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.config.outputs.python-versions }}
      default-python-version: ${{ steps.config.outputs.default-python-version }}
      container-registry: ${{ steps.config.outputs.container-registry }}
      container-image: ${{ steps.config.outputs.container-image }}
      version: ${{ steps.config.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Get default Python version from project config
      id: default-python-version
      run: |
        # Use project config directly with yq
        DEFAULT_PYTHON_VERSION=$(yq '.python.default_version' .project.yml)
        echo "default-python-version=$DEFAULT_PYTHON_VERSION" >> $GITHUB_OUTPUT
        echo "Using Python version: $DEFAULT_PYTHON_VERSION"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.default-python-version.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject

    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Extract all configuration from Makefile
      id: config
      run: |
        PYTHON_VERSIONS_JSON=$(make print-json-PYTHON_VERSIONS)
        DEFAULT_PYTHON_VERSION=$(yq '.python.default_version' .project.yml)
        CONTAINER_REGISTRY=$(make print-CONTAINER_REGISTRY)
        CONTAINER_IMAGE=$(make print-CONTAINER_IMAGE)
        VERSION=$(make print-VERSION)

        echo "python-versions=$PYTHON_VERSIONS_JSON" >> $GITHUB_OUTPUT
        echo "default-python-version=$DEFAULT_PYTHON_VERSION" >> $GITHUB_OUTPUT
        echo "container-registry=$CONTAINER_REGISTRY" >> $GITHUB_OUTPUT
        echo "container-image=$CONTAINER_IMAGE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        echo "Found Python versions: $(make print-PYTHON_VERSIONS)"
        echo "Default Python version: $DEFAULT_PYTHON_VERSION"
        echo "Container registry: $CONTAINER_REGISTRY"
        echo "Container image: $CONTAINER_IMAGE"
        echo "Version: $VERSION"

  container-build:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: get-config

    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.get-config.outputs.python-versions) }}

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject

    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.get-config.outputs.container-registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build container using dev-tools script
      env:
        REGISTRY: ${{ needs.get-config.outputs.container-registry }}
        IMAGE_NAME: ${{ needs.get-config.outputs.container-image }}
        VERSION: ${{ needs.get-config.outputs.version }}
        PYTHON_VERSION: ${{ matrix.python-version }}
        PLATFORMS: linux/amd64,linux/arm64
        PUSH: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event_name == 'release' || github.event.inputs.push_images == 'true') }}
        CACHE: true
      run: |
        make container-build
      continue-on-error: true

    - name: Test container image
      if: matrix.python-version == needs.get-config.outputs.default-python-version
      run: |
        # Test that the container starts and responds to health check
        IMAGE_TAG="${{ needs.get-config.outputs.container-registry }}/${{ needs.get-config.outputs.container-image }}:${{ needs.get-config.outputs.version }}-python${{ matrix.python-version }}"

        echo "Testing container image: $IMAGE_TAG"

        # Run container in background
        docker run --rm -d --name test-container \
          -p 8000:8000 \
          "$IMAGE_TAG"

        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 15

        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health || exit 1

        echo "Container test passed!"

        # Stop test container
        docker stop test-container
      continue-on-error: true

  container-manifest:
    name: Create Multi-Architecture Manifests
    runs-on: ubuntu-latest
    needs: [get-config, container-build]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event_name == 'release')

    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.get-config.outputs.container-registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push manifests
      env:
        PYTHON_VERSIONS: ${{ join(fromJSON(needs.get-config.outputs.python-versions), ' ') }}
        DEFAULT_PYTHON_VERSION: ${{ needs.get-config.outputs.default-python-version }}
        REGISTRY: ${{ needs.get-config.outputs.container-registry }}
        IMAGE: ${{ needs.get-config.outputs.container-image }}
        VERSION: ${{ needs.get-config.outputs.version }}
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # Create manifest for latest
          MANIFEST_IMAGES=""
          for py_ver in $PYTHON_VERSIONS; do
            MANIFEST_IMAGES="$MANIFEST_IMAGES $REGISTRY/$IMAGE:$VERSION-python$py_ver"
          done

          echo "Creating manifest for latest with images: $MANIFEST_IMAGES"
          docker manifest create $REGISTRY/$IMAGE:latest $MANIFEST_IMAGES
          docker manifest push $REGISTRY/$IMAGE:latest
        fi

        if [ "${{ github.event_name }}" = "release" ]; then
          # Create manifest for release version
          RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          MANIFEST_IMAGES=""
          for py_ver in $PYTHON_VERSIONS; do
            MANIFEST_IMAGES="$MANIFEST_IMAGES $REGISTRY/$IMAGE:$RELEASE_VERSION-python$py_ver"
          done

          echo "Creating manifest for $RELEASE_VERSION with images: $MANIFEST_IMAGES"
          docker manifest create $REGISTRY/$IMAGE:$RELEASE_VERSION $MANIFEST_IMAGES
          docker manifest push $REGISTRY/$IMAGE:$RELEASE_VERSION
        fi
