name: Container Build and Publish

env:
  # Comment trigger words for container builds
  CONTAINER_TRIGGERS: "/container"

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'deployment/docker/**'
      - 'dev-tools/scripts/container_build.sh'
      - '.github/workflows/container.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'deployment/docker/**'
      - 'dev-tools/scripts/container_build.sh'
      - '.github/workflows/container.yml'
  issue_comment:
    types: [created]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

jobs:
  check-container-comment:
    name: Check Container Triggers
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check container comment
        id: check
        uses: ./.github/actions/check-comment-trigger
        with:
          triggers: ${{ env.CONTAINER_TRIGGERS }}

  get-config:
    name: Get Configuration
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-container-comment.outputs.triggered == 'true'
    needs: [check-container-comment]
    outputs:
      python-versions: ${{ steps.config.outputs.python-versions }}
      default-python-version: ${{ steps.config.outputs.default-python-version }}
      container-registry: ${{ steps.config.outputs.container-registry }}
      container-image: ${{ steps.config.outputs.container-image }}
      version: ${{ steps.config.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.check-container-comment.outputs.pr_ref || github.sha }}

    - name: Get project configuration
      id: config
      uses: ./.github/actions/get-config

  container-build:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [get-config, check-container-comment]
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-container-comment.outputs.triggered == 'true'

    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.get-config.outputs.python-versions) }}

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.check-container-comment.outputs.pr_ref || github.sha }}

    - name: Determine container version and push policy
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          # Release: use release version and push to registry
          CONTAINER_VERSION="${{ github.ref_name }}"
          PUSH_IMAGES="true"
          CONTAINER_TAGS="latest,${{ github.ref_name }}"
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch: use dev version and push
          VERSION="0.1.0.dev$(date +%Y%m%d%H%M%S)+$(git rev-parse --short HEAD)"
          CONTAINER_VERSION="$VERSION"
          PUSH_IMAGES="true"
          CONTAINER_TAGS="dev,$VERSION"
        else
          # PR/comment triggers: use dev version but don't push (security)
          VERSION="0.1.0.dev$(date +%Y%m%d%H%M%S)+$(git rev-parse --short HEAD)"
          CONTAINER_VERSION="$VERSION"
          PUSH_IMAGES="false"
          CONTAINER_TAGS="$VERSION"
        fi
        
        # Export to environment for subsequent steps
        {
          echo "CONTAINER_VERSION=$CONTAINER_VERSION"
          echo "PUSH_IMAGES=$PUSH_IMAGES"
          echo "CONTAINER_TAGS=$CONTAINER_TAGS"
        } >> "$GITHUB_ENV"
        
        # Display values for debugging
        echo "Container version: $CONTAINER_VERSION"
        echo "Push images: $PUSH_IMAGES"
        echo "Tags: $CONTAINER_TAGS"

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ matrix.python-version }}
        cache-key-suffix: container-${{ matrix.python-version }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.get-config.outputs.container-registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build package wheel
      run: |
        make build

    - name: Build container using dev-tools script
      env:
        REGISTRY: ${{ needs.get-config.outputs.container-registry }}
        IMAGE_NAME: ${{ needs.get-config.outputs.container-image }}
        VERSION: ${{ env.CONTAINER_VERSION }}
        PYTHON_VERSION: ${{ matrix.python-version }}
        PLATFORMS: linux/amd64,linux/arm64
        PUSH: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event_name == 'release' || github.event.inputs.push_images == 'true') }}
        CACHE: true
        SKIP_BUILD: true
      run: |
        make container-build-single PYTHON_VERSION=${{ matrix.python-version }}

    - name: Test container image
      if: matrix.python-version == needs.get-config.outputs.default-python-version
      run: |
        # Test that the container starts and responds to health check
        IMAGE_TAG="${{ needs.get-config.outputs.container-registry }}/${{ needs.get-config.outputs.container-image }}:${{ env.CONTAINER_VERSION }}-python${{ matrix.python-version }}"

        echo "Testing container image: $IMAGE_TAG"

        # Run container in background
        docker run --rm -d --name test-container \
          -p 8000:8000 \
          "$IMAGE_TAG"

        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 15

        # Test health endpoint using Makefile target
        make container-health-check

        echo "Container test passed!"

        # Stop test container
        docker stop test-container

  container-manifest:
    name: Create Multi-Architecture Manifests
    runs-on: ubuntu-latest
    needs: [get-config, container-build]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event_name == 'release')

    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.get-config.outputs.container-registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push manifests
      env:
        PYTHON_VERSIONS: ${{ join(fromJSON(needs.get-config.outputs.python-versions), ' ') }}
        DEFAULT_PYTHON_VERSION: ${{ needs.get-config.outputs.default-python-version }}
        REGISTRY: ${{ needs.get-config.outputs.container-registry }}
        IMAGE: ${{ needs.get-config.outputs.container-image }}
        VERSION: ${{ needs.get-config.outputs.version }}
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # Create manifest for latest using default Python version
          echo "Creating latest tag from default Python version: $DEFAULT_PYTHON_VERSION"
          docker buildx imagetools create -t "$REGISTRY/$IMAGE:latest" "$REGISTRY/$IMAGE:$VERSION-python$DEFAULT_PYTHON_VERSION"
        fi

        if [ "${{ github.event_name }}" = "release" ]; then
          # Create manifest for release version using default Python version
          RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          echo "Creating release tag $RELEASE_VERSION from default Python version: $DEFAULT_PYTHON_VERSION"
          docker buildx imagetools create -t "$REGISTRY/$IMAGE:$RELEASE_VERSION" "$REGISTRY/$IMAGE:$RELEASE_VERSION-python$DEFAULT_PYTHON_VERSION"
        fi
