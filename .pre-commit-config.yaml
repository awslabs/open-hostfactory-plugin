# Pre-commit hooks configuration
repos:
  - repo: local
    hooks:
      - id: format
        name: Auto-Format Code
        entry: make format
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Auto-format Python code with black and isort"

      - id: black
        name: Black (Code Formatting)
        entry: make ci-quality-black
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check Python code formatting with Black"

      - id: isort
        name: isort (Import Sorting)
        entry: make ci-quality-isort
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check Python import sorting with isort"

      - id: flake8
        name: flake8 (Style Guide)
        entry: make ci-quality-flake8
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check Python style guide compliance with flake8"

      - id: mypy
        name: mypy (Type Checking)
        entry: make ci-quality-mypy
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check Python type annotations with mypy"
        warning_only: true  # Allow this to fail without blocking commit

      - id: pylint
        name: pylint (Code Analysis)
        entry: make ci-quality-pylint
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Run pylint code analysis"
        warning_only: true  # Allow this to fail without blocking commit

      - id: bandit
        name: bandit (Security Analysis)
        entry: make ci-security-bandit
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Run bandit security analysis"

      - id: safety
        name: safety (Dependency Security)
        entry: make ci-security-safety
        language: system
        files: requirements.*\.txt$|pyproject\.toml$
        pass_filenames: false
        description: "Check dependencies for known security vulnerabilities"

      - id: hadolint
        name: hadolint (Dockerfile Linting)
        entry: make hadolint-check
        language: system
        files: Dockerfile.*
        pass_filenames: false
        description: "Lint Dockerfile with hadolint"
        warning_only: true  # Allow this to fail without blocking commit

      - id: quality-check
        name: Quality Check
        entry: make quality-check
        language: system
        files: \.(py|md|rst|txt|yaml|yml|json|toml)$
        pass_filenames: false
        description: "Run comprehensive professional quality checks"

      - id: validate-imports
        name: Validate Python Imports
        entry: make ci-imports
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Validate that all critical imports work correctly"

      - id: validate-cqrs
        name: Validate CQRS Patterns
        entry: make ci-arch-cqrs
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Validate CQRS architecture patterns"
        warning_only: true  # Allow this to fail without blocking commit

      - id: check-architecture
        name: Check Architecture Compliance
        entry: make ci-arch-clean
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check Clean Architecture compliance"
        warning_only: true  # Allow this to fail without blocking commit

      - id: validate-imports-arch
        name: Validate Import Architecture
        entry: make ci-arch-imports
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Validate import architecture compliance"
        warning_only: true  # Allow this to fail without blocking commit

      - id: check-file-sizes-arch
        name: Check File Sizes (Architecture)
        entry: make ci-arch-file-sizes
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check file sizes for architecture compliance"
        warning_only: true  # Allow this to fail without blocking commit

      - id: security-scan
        name: Security Scan
        entry: make security-scan
        language: system
        files: \.(py|txt|yml|yaml|toml|Dockerfile)$
        pass_filenames: false
        description: "Run comprehensive security scan"
        warning_only: true  # Allow this to fail without blocking commit

      - id: semgrep
        name: Semgrep (Static Analysis)
        entry: make ci-security-semgrep
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Run Semgrep static analysis"
        warning_only: true  # Allow this to fail without blocking commit

      - id: trivy-fs
        name: Trivy (Filesystem Scan)
        entry: make ci-security-trivy-fs
        language: system
        files: \.(py|txt|yml|yaml|toml|json)$
        pass_filenames: false
        description: "Run Trivy filesystem vulnerability scanner"
        warning_only: true  # Allow this to fail without blocking commit

      - id: trufflehog
        name: TruffleHog (Secrets Scan)
        entry: make ci-security-trufflehog
        language: system
        files: \.(py|txt|yml|yaml|toml|json|md|sh)$
        pass_filenames: false
        description: "Check for secrets with TruffleHog"
        warning_only: true  # Allow this to fail without blocking commit

      - id: validate-workflows
        name: Validate Workflows
        entry: make validate-workflows
        language: system
        files: \.github/workflows/.*\.(yml|yaml)$
        pass_filenames: false
        description: "Validate GitHub Actions workflow YAML files"

      - id: validate-actionlint
        name: Validate Workflows (actionlint)
        entry: make validate-actionlint
        language: system
        files: \.github/workflows/.*\.(yml|yaml)$
        pass_filenames: false
        description: "Validate GitHub Actions workflows with actionlint"
        warning_only: true  # Allow this to fail without blocking commit

      - id: validate-shell-scripts
        name: Validate Shell Scripts (shellcheck)
        entry: make validate-shell-scripts
        language: system
        files: \.sh$
        pass_filenames: false
        description: "Validate shell scripts with shellcheck"
        warning_only: true  # Allow this to fail without blocking commit

      - id: detect-secrets
        name: Detect Hardcoded Secrets
        entry: make detect-secrets
        language: system
        files: ^src/.*\.py$
        pass_filenames: false
        description: "Detect potential hardcoded secrets in source code"

      - id: check-file-sizes
        name: Check File Sizes
        entry: make file-sizes
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check for files that may violate Single Responsibility Principle"
        warning_only: true  # Allow this to fail without blocking commit
