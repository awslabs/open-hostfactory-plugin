name: Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'requirements*.txt'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.dockerignore'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'requirements*.txt'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.dockerignore'
  schedule:
    # Run weekly security scan on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: awslabs/open-hostfactory-plugin

jobs:
  get-config:
    name: Get Python Version from Makefile
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.config.outputs.python-versions }}
      default-python-version: ${{ steps.config.outputs.default-python-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Get configuration from project config
      id: config
      run: |
        # Use consistent print-* and print-json-* targets
        PYTHON_VERSIONS_JSON=$(make print-json-PYTHON_VERSIONS)
        DEFAULT_PYTHON_VERSION=$(yq '.python.default_version' .project.yml)

        echo "python-versions=$PYTHON_VERSIONS_JSON" >> $GITHUB_OUTPUT
        echo "default-python-version=$DEFAULT_PYTHON_VERSION" >> $GITHUB_OUTPUT

        echo "Found Python versions: $(make print-PYTHON_VERSIONS)"
        echo "Default Python version: $DEFAULT_PYTHON_VERSION"

  # Security Scan Jobs (granular with tool names)
  security-bandit:
    name: Bandit (Security Scan)
    runs-on: ubuntu-latest
    needs: get-config

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run Bandit security scan
      run: make ci-security-bandit
      continue-on-error: true

  security-safety:
    name: Safety (Dependency Scan)
    runs-on: ubuntu-latest
    needs: get-config

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run Safety dependency scan
      run: make ci-security-safety
      continue-on-error: true
  security-hadolint:
    name: Hadolint (Dockerfile Scan)
    runs-on: ubuntu-latest
    needs: get-config

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Run Hadolint Dockerfile scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Upload Hadolint SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  security-semgrep:
    name: Semgrep (Static Analysis)
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Run Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
      continue-on-error: true

    - name: Upload Semgrep SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  security-trivy-fs:
    name: Trivy (Filesystem Scan)
    runs-on: ubuntu-latest
    needs: get-config

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Run Trivy filesystem vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'

  security-trufflehog:
    name: TruffleHog (Secrets Scan)
    runs-on: ubuntu-latest
    # Skip TruffleHog on main branch pushes where base and head are the same
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000')

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master
      with:
        fetch-depth: 0

    - name: Check for secrets with TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
        head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.event.after }}
        extra_args: --debug --only-verified

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: get-config
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security]')

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
      continue-on-error: true
      id: codeql-init-extended

    - name: Initialize CodeQL (fallback)
      if: steps.codeql-init-extended.outcome == 'failure'
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements.txt"

    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.changed_files, 'Dockerfile') || contains(github.event.pull_request.changed_files, 'docker-compose')

    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.get-config.outputs.python-versions) }}

    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-scan-py${{ matrix.python-version }}
        build-args: |
          PYTHON_VERSION=${{ matrix.python-version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-scan-py${{ matrix.python-version }}
        format: 'sarif'
        output: 'trivy-results-py${{ matrix.python-version }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-py${{ matrix.python-version }}.sarif'

    - name: Run Trivy vulnerability scanner (JSON output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-scan-py${{ matrix.python-version }}
        format: 'json'
        output: 'trivy-results-py${{ matrix.python-version }}.json'

    - name: Dockerfile security scan with Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-dockerfile.sarif
        no-fail: true

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-dockerfile.sarif

    - name: Upload container security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-security-reports-py${{ matrix.python-version }}
        path: |
          trivy-results-py${{ matrix.python-version }}.sarif
          trivy-results-py${{ matrix.python-version }}.json
          hadolint-dockerfile.sarif
        retention-days: 30
