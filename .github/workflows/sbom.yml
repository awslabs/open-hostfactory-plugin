name: Software Bill of Materials (SBOM)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    # Generate SBOM weekly on Wednesdays at 6 AM UTC
    - cron: '0 6 * * 3'

env:
  PYTHON_VERSION: '3.11'

jobs:
  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      actions: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Install dependencies with uv
      run: |
        uv pip install --system -r requirements.txt -r requirements-dev.txt

    - name: Generate Python SBOM with pip-audit
      run: |
        uv pip install --system pip-audit
        pip-audit --format=cyclonedx-json --output=python-sbom.json
        pip-audit --format=spdx-json --output=python-sbom-spdx.json
      continue-on-error: true

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        path: ./
        format: spdx-json
        output-file: syft-sbom-spdx.json

    - name: Generate SBOM with Syft (CycloneDX)
      uses: anchore/sbom-action@v0
      with:
        path: ./
        format: cyclonedx-json
        output-file: syft-sbom-cyclonedx.json

    - name: Build Docker image for SBOM
      run: |
        docker build -t sbom-scan:latest .

    - name: Generate Container SBOM with Syft
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          anchore/syft:latest sbom-scan:latest -o spdx-json=container-sbom-spdx.json
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          anchore/syft:latest sbom-scan:latest -o cyclonedx-json=container-sbom-cyclonedx.json

    - name: Validate SBOM files
      run: |
        echo "## SBOM Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for file in *-sbom*.json; do
          if [ -f "$file" ]; then
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
            if [ "$size" -gt 100 ]; then
              echo "VALID $file: (${size} bytes)" >> $GITHUB_STEP_SUMMARY
            else
              echo "INVALID $file: Invalid or empty (${size} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sbom-reports
        path: |
          python-sbom.json
          python-sbom-spdx.json
          syft-sbom-spdx.json
          syft-sbom-cyclonedx.json
          container-sbom-spdx.json
          container-sbom-cyclonedx.json
        retention-days: 90

    - name: Upload SBOM to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          syft-sbom-spdx.json
          syft-sbom-cyclonedx.json
          python-sbom.json

    - name: SBOM generation summary
      if: always()
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### SBOM Formats Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- Python dependencies (CycloneDX & SPDX)" >> $GITHUB_STEP_SUMMARY
        echo "- Container image (CycloneDX & SPDX)" >> $GITHUB_STEP_SUMMARY
        echo "- Full project (CycloneDX & SPDX)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "SBOM files are available in the artifacts section." >> $GITHUB_STEP_SUMMARY
