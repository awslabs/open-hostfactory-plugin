name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  issue_comment:
    types: [created]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: testing
  AWS_SECRET_ACCESS_KEY: testing
  ENVIRONMENT: testing
  TESTING: true
  # Comment trigger words for CI pipeline
  CI_TRIGGERS: "/test,/build,/ci"

jobs:
  check-comment:
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - name: Check comment trigger
        id: check
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            if (!context.issue.pull_request) {
              console.log('Not a PR comment, skipping');
              return;
            }
            
            // Security: Only allow authorized users
            const allowedAssociations = ['MEMBER', 'OWNER', 'COLLABORATOR'];
            const userAssociation = context.payload.comment.author_association;
            
            if (!allowedAssociations.includes(userAssociation)) {
              console.log(`User ${context.payload.comment.user.login} not authorized (${userAssociation})`);
              return;
            }
            
            const comment = context.payload.comment.body.toLowerCase().trim();
            const triggers = process.env.CI_TRIGGERS.split(',').map(t => t.trim());
            const triggered = triggers.some(t => comment === t);
            
            console.log(`Comment: ${context.payload.comment.body}`);
            console.log(`User: ${context.payload.comment.user.login} (${userAssociation})`);
            console.log(`Triggered: ${triggered}`);
            
            if (triggered) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              core.setOutput('triggered', 'true');
              core.setOutput('pr_ref', pr.data.head.sha);
              
              // Add reaction to confirm command received
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              });
            }

  get-config:
    name: Get Python Version from Makefile
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-comment.outputs.triggered == 'true'
    needs: [check-comment]
    outputs:
      default-python-version: ${{ steps.version.outputs.default-python-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.check-comment.outputs.pr_ref || github.sha }}

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Get default Python version from project config
      id: version
      run: |
        DEFAULT_PYTHON_VERSION=$(make print-DEFAULT_PYTHON_VERSION)
        echo "default-python-version=$DEFAULT_PYTHON_VERSION" >> "$GITHUB_OUTPUT"
        echo "Using Python version: $DEFAULT_PYTHON_VERSION"

  # Code Quality Jobs (granular with tool names)
  quality-check:
    name: Professional Quality Standards
    runs-on: ubuntu-latest
    needs: get-config
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch full history for git diff
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
    
    - name: Install UV
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
    
    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    
    - name: Install dependencies
      run: |
        uv sync --group ci --group dev
    
    - name: Run professional quality checks
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "Scheduled run: Running quality checks on all files"
          make quality-check-all
        else
          echo "PR/Push: Running quality checks on modified files only"
          make quality-check
        fi

  lint-black:
    name: Black (Code Formatting)
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run Black formatting check
      run: make ci-quality-black

  lint-isort:
    name: isort (Import Sorting)
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run isort import check
      run: make ci-quality-isort

  lint-flake8:
    name: flake8 (Style Guide)
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run flake8 style check
      run: make ci-quality-flake8

  lint-mypy:
    name: mypy (Type Checking)
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run mypy type check
      run: make ci-quality-mypy
      continue-on-error: true

  lint-pylint:
    name: pylint (Code Analysis)
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run pylint analysis
      run: make ci-quality-pylint
      continue-on-error: true

  # Architecture Quality Jobs (granular with descriptive names)
  arch-cqrs:
    name: CQRS Pattern Validation
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run CQRS pattern validation
      run: make ci-arch-cqrs
      continue-on-error: true

  arch-clean:
    name: Clean Architecture Dependencies
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run Clean Architecture validation
      run: make ci-arch-clean
      continue-on-error: true

  arch-imports:
    name: Import Validation
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run import validation
      run: make ci-arch-imports
      continue-on-error: true

  arch-file-sizes:
    name: File Size Compliance
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run file size checks
      run: make ci-arch-file-sizes
      continue-on-error: true

  unit-tests:
    name: Unit Tests (Fast)
    runs-on: ubuntu-latest
    needs: [get-config, lint-black, lint-isort, lint-flake8]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run unit tests
      run: |
        make ci-tests-unit
      # TODO: Remove continue-on-error once unit tests are fixed and stable
      continue-on-error: true

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          junit-unit.xml
          coverage-unit.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: coverage-unit.xml
        flags: unit
        name: unit-tests

  integration-tests:
    name: Integration Tests (Fast)
    runs-on: ubuntu-latest
    needs: [get-config, unit-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run integration tests
      run: |
        make ci-tests-integration
      # TODO: Remove continue-on-error once integration tests are fixed and stable
      continue-on-error: true

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          junit-integration.xml
          coverage-integration.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: coverage-integration.xml
        flags: integration
        name: integration-tests

  e2e-tests:
    name: End-to-End Tests (Fast)
    runs-on: ubuntu-latest
    needs: [get-config, unit-tests, integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run end-to-end tests
      run: |
        make ci-tests-e2e
      # TODO: Remove continue-on-error once e2e tests are fixed and stable
      continue-on-error: true

    - name: Upload e2e test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: junit-e2e.xml

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: get-config
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Run performance tests
      run: |
        make ci-tests-performance
      # TODO: Remove continue-on-error once performance tests are fixed and stable
      continue-on-error: true

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: junit-performance.xml

  build-and-package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [get-config, lint-black, lint-isort, lint-flake8, unit-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Build package
      run: |
        make build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          build/

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [get-config, unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject
    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Download all test results
      uses: actions/download-artifact@v5
      with:
        path: test-results/

    - name: Generate complete test report
      run: |
        make test-report
      continue-on-error: true

    - name: Upload complete test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-test-report
        path: |
          test-results-combined.xml
          coverage-combined.xml
          htmlcov/

    - name: Upload final coverage to Codecov
      uses: codecov/codecov-action@v5
      if: always()
      with:
        files: coverage-combined.xml
        flags: complete
        name: complete-tests

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-black, lint-isort, lint-flake8, lint-mypy, lint-pylint, arch-cqrs, arch-clean, arch-imports, arch-file-sizes, unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.lint-black.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "All CI checks completed successfully"

    - name: Notify failure
      if: ${{ needs.lint-black.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "Some CI checks failed"
        exit 1
# Test comment
