[flake8]
max-line-length = 120

# Formatting rules ignored due to black compatibility and style preferences
# E203: whitespace before ':' - conflicts with black
# W503/W504: line break before/after binary operator - style preference, black handles
# E131: continuation line unaligned - black handles
# E225/E226: missing whitespace around operators - black handles  
# E303: too many blank lines - black handles

# Documentation rules ignored for practical reasons
# D100: missing module docstring - not critical for all modules
# D104: missing package docstring - __init__.py files don't need docs
# D105: missing magic method docstring - rarely needed
# D107: missing __init__ docstring - simple constructors don't need docs
# D200/D202/D205: docstring formatting - cosmetic issues
# D400/D401/D402: docstring grammar/style - not critical

# Bugbear rules ignored for specific architectural reasons  
# B010: setattr with constants - sometimes needed for dynamic access
# B017: pytest.raises without match - not always necessary

# Comprehension optimizations ignored as minor
# C416/C420: unnecessary comprehensions - minor performance gains

extend-ignore = E203,W503,E501,D100,D104,D105,D107,D200,D202,D205,D400,D401,D402,B010,B017,C416,C420,E131,E225,E226,E303,W504

select = F821,F841,F403,F405,E721,E722,B001,B006,B007,B009,B011,B023,F541,F811,F822,D101,D102,D103,E402,B004,B014,B019,B024,B027
exclude = 
    .git,
    __pycache__,
    .venv,
    test-env,
    build,
    dist,
    *.egg-info,
    .tox,
    .coverage,
    .coverage.*,
    .cache,
    nosetests.xml,
    coverage.xml,
    *.cover,
    *.log,
    .mypy_cache,
    .pytest_cache,
    src/infrastructure/registry/enhanced_provider_registry_example.py,
    src/infrastructure/registry/enhanced_storage_registry_example.py
per-file-ignores =
    # Test files - relaxed documentation and import rules
    tests/*:F821,F841,D101,D102,D103,E402
    
    # Complex integration test with legitimate function-in-loop patterns
    tests/integration/test_advanced_edge_cases.py:B023
    
    # Abstract base classes with abstract methods in subclasses
    src/application/base/handlers.py:B024
    src/infrastructure/registry/base_registry.py:B024
    src/infrastructure/registry/enhanced_base_registry.py:B024
    
    # Performance-critical singleton with intentional lru_cache
    src/infrastructure/error/exception_handler.py:B019
    
    # Intentional specific exception handling for dynamic imports
    src/infrastructure/di/command_handler_services.py:B014
    src/infrastructure/di/provider_services.py:B014
    
    # Entry point with necessary path manipulation before imports
    src/run.py:E402
    
    # Module files with star imports for convenience
    __init__.py:F401,F403,F405,F821
    src/infrastructure/utilities/common/file_utils.py:F403,F405,F821
    src/infrastructure/utilities/common/collections/__init__.py:F403,F405,F821
    src/providers/aws/domain/machine/value_objects.py:F403,F405,F821
    src/providers/aws/domain/request/value_objects.py:F403,F405,F821
    src/providers/aws/exceptions/__init__.py:F403,F405,F821
    src/providers/aws/utilities/ec2/__init__.py:F403,F405,F821
    src/providers/base/strategy/load_balancing_strategy.py:F403,F405,F821
