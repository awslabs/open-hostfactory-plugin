# Docker Compose for Open Host Factory Plugin REST API
# Development and testing configuration

version: '3.8'

services:
  # Main REST API service
  ohfp-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-dev}
        VCS_REF: ${VCS_REF:-}
    image: ohfp-api:${VERSION:-latest}
    container_name: ohfp-api
    restart: unless-stopped

    # Port mapping
    ports:
      - "${HF_SERVER_PORT:-8000}:8000"

    # Environment variables
    environment:
      # Server configuration
      HF_SERVER_ENABLED: ${HF_SERVER_ENABLED:-true}
      HF_SERVER_HOST: ${HF_SERVER_HOST:-0.0.0.0}
      HF_SERVER_PORT: ${HF_SERVER_PORT:-8000}
      HF_SERVER_WORKERS: ${HF_SERVER_WORKERS:-1}
      HF_SERVER_LOG_LEVEL: ${HF_SERVER_LOG_LEVEL:-info}
      HF_SERVER_DOCS_ENABLED: ${HF_SERVER_DOCS_ENABLED:-true}
      HF_SERVER_RELOAD: ${HF_SERVER_RELOAD:-false}

      # Authentication configuration
      HF_AUTH_ENABLED: ${HF_AUTH_ENABLED:-false}
      HF_AUTH_STRATEGY: ${HF_AUTH_STRATEGY:-none}
      HF_AUTH_BEARER_SECRET_KEY: ${HF_AUTH_BEARER_SECRET_KEY:-}

      # AWS configuration
      HF_PROVIDER_TYPE: ${HF_PROVIDER_TYPE:-aws}
      HF_PROVIDER_AWS_REGION: ${HF_PROVIDER_AWS_REGION:-us-east-1}
      HF_PROVIDER_AWS_PROFILE: ${HF_PROVIDER_AWS_PROFILE:-}

      # AWS credentials (if not using IAM roles)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:-}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}

      # Logging configuration
      HF_LOGGING_LEVEL: ${HF_LOGGING_LEVEL:-INFO}
      HF_LOGGING_CONSOLE_ENABLED: ${HF_LOGGING_CONSOLE_ENABLED:-true}

      # Storage configuration
      HF_STORAGE_STRATEGY: ${HF_STORAGE_STRATEGY:-json}
      HF_STORAGE_BASE_PATH: ${HF_STORAGE_BASE_PATH:-/app/data}

      # Debug mode
      HF_DEBUG: ${HF_DEBUG:-false}

    # Volume mounts
    volumes:
      # Configuration files
      - ./config:/app/config:ro
      # Data persistence
      - ohfp-data:/app/data
      # Logs
      - ohfp-logs:/app/logs
      # AWS credentials (optional)
      - ${HOME}/.aws:/home/ohfp/.aws:ro

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Network
    networks:
      - ohfp-network

  # Optional: Redis for caching/session storage
  redis:
    image: redis:7-alpine
    container_name: ohfp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - ohfp-redis-data:/data
    networks:
      - ohfp-network
    profiles:
      - redis
      - full

  # Optional: PostgreSQL for advanced storage
  postgres:
    image: postgres:15-alpine
    container_name: ohfp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ohfp}
      POSTGRES_USER: ${POSTGRES_USER:-ohfp}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ohfp_password}
    volumes:
      - ohfp-postgres-data:/var/lib/postgresql/data
    networks:
      - ohfp-network
    profiles:
      - postgres
      - full

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ohfp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ohfp-api
    networks:
      - ohfp-network
    profiles:
      - nginx
      - full

# Named volumes for data persistence
volumes:
  ohfp-data:
    driver: local
  ohfp-logs:
    driver: local
  ohfp-redis-data:
    driver: local
  ohfp-postgres-data:
    driver: local

# Network configuration
networks:
  ohfp-network:
    driver: bridge
