name: Publish to PyPI

# SECURITY NOTE: This workflow uses PyPI Trusted Publishing (OIDC)
# No API tokens required - authentication is handled automatically via GitHub's OIDC token
# 
# Prerequisites:
# 1. Configure trusted publisher on PyPI: https://pypi.org/manage/account/publishing/
# 2. Configure trusted publisher on TestPyPI: https://test.pypi.org/manage/account/publishing/
# 3. See docs/deployment/pypi-setup.md for detailed setup instructions

env:
  # Comment trigger words for package publishing
  PUBLISH_TRIGGERS: "/package"

on:
  push:
    branches: [main, develop]
  release:
    types: [published]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

jobs:
  check-build-comment:
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - name: Check build comment
        id: check
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            if (!context.issue.pull_request) {
              console.log('Not a PR comment, skipping');
              return;
            }
            
            // Security: Only allow authorized users for publishing
            const allowedAssociations = ['MEMBER', 'OWNER'];
            const userAssociation = context.payload.comment.author_association;
            
            if (!allowedAssociations.includes(userAssociation)) {
              console.log(`User ${context.payload.comment.user.login} not authorized for publishing (${userAssociation})`);
              return;
            }
            
            const comment = context.payload.comment.body.toLowerCase().trim();
            const triggers = process.env.PUBLISH_TRIGGERS.split(',').map(t => t.trim());
            const triggered = triggers.some(t => comment === t);
            
            console.log(`Comment: ${context.payload.comment.body}`);
            console.log(`User: ${context.payload.comment.user.login} (${userAssociation})`);
            console.log(`Build triggered: ${triggered}`);
            
            if (triggered) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              core.setOutput('triggered', 'true');
              core.setOutput('pr_ref', pr.data.head.sha);
              
              // Add reaction to confirm command received
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              });
            }
  get-config:
    name: Get Python Version from Makefile
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-build-comment.outputs.triggered == 'true'
    needs: [check-build-comment]
    outputs:
      default-python-version: ${{ steps.version.outputs.default-python-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Get default Python version from project config
      id: version
      run: |
        DEFAULT_PYTHON_VERSION=$(make print-DEFAULT_PYTHON_VERSION)
        echo "default-python-version=$DEFAULT_PYTHON_VERSION" >> "$GITHUB_OUTPUT"
        echo "Using Python version: $DEFAULT_PYTHON_VERSION"

  publish:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    needs: [get-config, check-build-comment]
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-build-comment.outputs.triggered == 'true'
    environment: 
      name: ${{ github.event_name == 'release' && 'pypi' || github.event.inputs.environment || 'testpypi' }}
      url: ${{ (github.event_name == 'release' || github.event.inputs.environment == 'pypi') && 'https://pypi.org/p/open-hostfactory-plugin' || 'https://test.pypi.org/p/open-hostfactory-plugin' }}
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      contents: read   # needed to checkout code

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.check-build-comment.outputs.pr_ref || github.sha }}

    - name: Determine version and target
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "VERSION=${{ github.ref_name }}" >> "$GITHUB_ENV"
          echo "TARGET=pypi" >> "$GITHUB_ENV"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.environment }}" == "pypi" ]]; then
          echo "VERSION=${{ github.ref_name }}" >> "$GITHUB_ENV"
          echo "TARGET=pypi" >> "$GITHUB_ENV"
        else
          # Dev version for TestPyPI (push to main/develop or comment trigger)
          # Comment triggers can ONLY publish to TestPyPI for security
          VERSION="0.1.0.dev$(date +%Y%m%d%H%M%S)+$(git rev-parse --short HEAD)"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "TARGET=testpypi" >> "$GITHUB_ENV"
        fi
        echo "Publishing to: $TARGET with version: $VERSION"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Build package
      run: |
        make build

    - name: Check package
      run: |
        make test-install

    - name: Publish to Test PyPI
      if: env.TARGET == 'testpypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true

    - name: Publish to PyPI
      if: env.TARGET == 'pypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

    - name: Create deployment summary
      run: |
        {
          echo "## Package Published Successfully"
          echo ""
          if [ "$TARGET" = "pypi" ]; then
            echo "**Environment:** Production PyPI"
            echo "**Installation:** \`pip install open-hostfactory-plugin\`"
          else
            echo "**Environment:** Test PyPI"
            echo "**Installation:** \`pip install --index-url https://test.pypi.org/simple/ open-hostfactory-plugin\`"
          fi
          echo ""
          echo "**Version:** $VERSION"
          echo "**Commands:**"
          echo "- \`ohfp --help\`"
          echo "- \`open-hostfactory-plugin --help\`"
        } >> "$GITHUB_STEP_SUMMARY"

  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [get-config, publish]
    if: github.event_name == 'release' || github.event.inputs.environment == 'pypi'

    permissions:
      contents: read
      actions: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Generate SBOM files
      run: |
        make ci-build-sbom

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          python-sbom-cyclonedx.json
          python-sbom-spdx.json
        retention-days: 90

    - name: Upload SBOM to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: python-sbom-cyclonedx.json
      continue-on-error: true
