name: Container Build and Publish

env:
  # Comment trigger words for container builds
  CONTAINER_TRIGGERS: "/container"

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'deployment/docker/**'
      - 'dev-tools/scripts/container_build.sh'
      - '.github/workflows/container.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'deployment/docker/**'
      - 'dev-tools/scripts/container_build.sh'
      - '.github/workflows/container.yml'
  issue_comment:
    types: [created]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

jobs:
  check-container-comment:
    name: Check Container Triggers
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - name: Check container comment
        id: check
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        env:
          CONTAINER_TRIGGERS: ${{ env.CONTAINER_TRIGGERS }}
        with:
          script: |
            if (!context.issue.pull_request) {
              console.log('Not a PR comment, skipping');
              return;
            }
            
            // Security: Only allow authorized users
            const allowedAssociations = ['MEMBER', 'OWNER', 'COLLABORATOR'];
            const userAssociation = context.payload.comment.author_association;
            
            if (!allowedAssociations.includes(userAssociation)) {
              console.log(`User ${context.payload.comment.user.login} not authorized (${userAssociation})`);
              return;
            }
            
            const comment = context.payload.comment.body.toLowerCase().trim();
            const triggers = process.env.CONTAINER_TRIGGERS.split(',').map(t => t.trim());
            const triggered = triggers.some(t => comment === t);
            
            console.log(`Comment: ${context.payload.comment.body}`);
            console.log(`User: ${context.payload.comment.user.login} (${userAssociation})`);
            console.log(`Container triggered: ${triggered}`);
            
            if (triggered) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              core.setOutput('triggered', 'true');
              core.setOutput('pr_ref', pr.data.head.sha);
              
              // Add reaction to confirm command received
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              });
            }

  get-config:
    name: Get Configuration from Makefile
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-container-comment.outputs.triggered == 'true'
    needs: [check-container-comment]
    outputs:
      python-versions: ${{ steps.config.outputs.python-versions }}
      default-python-version: ${{ steps.config.outputs.default-python-version }}
      container-registry: ${{ steps.config.outputs.container-registry }}
      container-image: ${{ steps.config.outputs.container-image }}
      version: ${{ steps.config.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.check-container-comment.outputs.pr_ref || github.sha }}

    - name: Install yq
      uses: mikefarah/yq@master

    - name: Get configuration from project config
      id: config
      run: |
        DEFAULT_PYTHON_VERSION=$(make print-DEFAULT_PYTHON_VERSION)
        PYTHON_VERSIONS=$(make print-json-PYTHON_VERSIONS)
        CONTAINER_REGISTRY=$(make print-CONTAINER_REGISTRY)
        CONTAINER_IMAGE=$(make print-CONTAINER_IMAGE)
        VERSION=$(make print-VERSION)
        
        {
          echo "default-python-version=$DEFAULT_PYTHON_VERSION"
          echo "python-versions=$PYTHON_VERSIONS"
          echo "container-registry=$CONTAINER_REGISTRY"
          echo "container-image=$CONTAINER_IMAGE"
          echo "version=$VERSION"
        } >> "$GITHUB_OUTPUT"
        
        echo "Found Python versions: $PYTHON_VERSIONS"
        echo "Default Python version: $DEFAULT_PYTHON_VERSION"
        echo "Container registry: $CONTAINER_REGISTRY"
        echo "Container image: $CONTAINER_IMAGE"
        echo "Version: $VERSION"

  container-build:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [get-config, check-container-comment]
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-container-comment.outputs.triggered == 'true'

    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.get-config.outputs.python-versions) }}

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.check-container-comment.outputs.pr_ref || github.sha }}

    - name: Determine container version and push policy
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          # Release: use release version and push to registry
          {
            echo "CONTAINER_VERSION=${{ github.ref_name }}"
            echo "PUSH_IMAGES=true"
            echo "CONTAINER_TAGS=latest,${{ github.ref_name }}"
          } >> "$GITHUB_ENV"
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch: use dev version and push
          VERSION="0.1.0.dev$(date +%Y%m%d%H%M%S)+$(git rev-parse --short HEAD)"
          {
            echo "CONTAINER_VERSION=$VERSION"
            echo "PUSH_IMAGES=true"
            echo "CONTAINER_TAGS=dev,$VERSION"
          } >> "$GITHUB_ENV"
        else
          # PR/comment triggers: use dev version but don't push (security)
          VERSION="0.1.0.dev$(date +%Y%m%d%H%M%S)+$(git rev-parse --short HEAD)"
          {
            echo "CONTAINER_VERSION=$VERSION"
            echo "PUSH_IMAGES=false"
            echo "CONTAINER_TAGS=$VERSION"
          } >> "$GITHUB_ENV"
        fi
        echo "Container version: $CONTAINER_VERSION"
        echo "Push images: $PUSH_IMAGES"
        echo "Tags: $CONTAINER_TAGS"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml.template"

    - name: Generate pyproject.toml
      run: |
        make generate-pyproject

    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.get-config.outputs.container-registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build container using dev-tools script
      env:
        REGISTRY: ${{ needs.get-config.outputs.container-registry }}
        IMAGE_NAME: ${{ needs.get-config.outputs.container-image }}
        VERSION: ${{ needs.get-config.outputs.version }}
        PYTHON_VERSION: ${{ matrix.python-version }}
        PLATFORMS: linux/amd64,linux/arm64
        PUSH: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event_name == 'release' || github.event.inputs.push_images == 'true') }}
        CACHE: true
      run: |
        make container-build-single PYTHON_VERSION=${{ matrix.python-version }}

    - name: Test container image
      if: matrix.python-version == needs.get-config.outputs.default-python-version
      run: |
        # Test that the container starts and responds to health check
        IMAGE_TAG="${{ needs.get-config.outputs.container-registry }}/${{ needs.get-config.outputs.container-image }}:${{ needs.get-config.outputs.version }}-python${{ matrix.python-version }}"

        echo "Testing container image: $IMAGE_TAG"

        # Run container in background
        docker run --rm -d --name test-container \
          -p 8000:8000 \
          "$IMAGE_TAG"

        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 15

        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health || exit 1

        echo "Container test passed!"

        # Stop test container
        docker stop test-container
      continue-on-error: true

  container-manifest:
    name: Create Multi-Architecture Manifests
    runs-on: ubuntu-latest
    needs: [get-config, container-build]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event_name == 'release')

    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.get-config.outputs.container-registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push manifests
      env:
        PYTHON_VERSIONS: ${{ join(fromJSON(needs.get-config.outputs.python-versions), ' ') }}
        DEFAULT_PYTHON_VERSION: ${{ needs.get-config.outputs.default-python-version }}
        REGISTRY: ${{ needs.get-config.outputs.container-registry }}
        IMAGE: ${{ needs.get-config.outputs.container-image }}
        VERSION: ${{ needs.get-config.outputs.version }}
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # Create manifest for latest
          MANIFEST_IMAGES=()
          for py_ver in $PYTHON_VERSIONS; do
            MANIFEST_IMAGES+=("$REGISTRY/$IMAGE:$VERSION-python$py_ver")
          done

          echo "Creating manifest for latest with images: ${MANIFEST_IMAGES[*]}"
          docker manifest create "$REGISTRY/$IMAGE:latest" "${MANIFEST_IMAGES[@]}"
          docker manifest push "$REGISTRY/$IMAGE:latest"
        fi

        if [ "${{ github.event_name }}" = "release" ]; then
          # Create manifest for release version
          RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          MANIFEST_IMAGES=()
          for py_ver in $PYTHON_VERSIONS; do
            MANIFEST_IMAGES+=("$REGISTRY/$IMAGE:$RELEASE_VERSION-python$py_ver")
          done

          echo "Creating manifest for $RELEASE_VERSION with images: ${MANIFEST_IMAGES[*]}"
          docker manifest create "$REGISTRY/$IMAGE:$RELEASE_VERSION" "${MANIFEST_IMAGES[@]}"
          docker manifest push "$REGISTRY/$IMAGE:$RELEASE_VERSION"
        fi
