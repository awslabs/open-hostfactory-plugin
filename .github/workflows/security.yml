name: Security Scan

env:
  # Comment trigger words for security scans
  SECURITY_TRIGGERS: "/security"
  REGISTRY: ghcr.io
  IMAGE_NAME: awslabs/open-hostfactory-plugin

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'requirements*.txt'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.dockerignore'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'requirements*.txt'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.dockerignore'
  issue_comment:
    types: [created]
  schedule:
    # Run weekly security scan on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  check-security-comment:
    name: Check Security Triggers
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check security comment
        id: check
        uses: ./.github/actions/check-comment-trigger
        with:
          triggers: ${{ env.SECURITY_TRIGGERS }}

  get-config:
    name: Get Configuration
    runs-on: ubuntu-latest
    needs: [check-security-comment]
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-security-comment.outputs.triggered == 'true'
    outputs:
      python-versions: ${{ steps.config.outputs.python-versions }}
      default-python-version: ${{ steps.config.outputs.default-python-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.check-security-comment.outputs.pr_ref || github.sha }}

    - name: Get project configuration
      id: config
      uses: ./.github/actions/get-config

  # Security Scan Jobs (using reusable workflow)
  security-bandit:
    name: Bandit (Security Scan)
    needs: get-config
    uses: ./.github/workflows/reusable-security.yml
    with:
      scan-type: bandit
      python-version: ${{ needs.get-config.outputs.default-python-version }}

  security-safety:
    name: Safety (Dependency Scan)
    needs: get-config
    uses: ./.github/workflows/reusable-security.yml
    with:
      scan-type: safety
      python-version: ${{ needs.get-config.outputs.default-python-version }}

  security-hadolint:
    name: Hadolint (Dockerfile Scan)
    needs: get-config
    uses: ./.github/workflows/reusable-security.yml
    with:
      scan-type: hadolint

  security-semgrep:
    name: Semgrep (Static Analysis)
    needs: get-config
    uses: ./.github/workflows/reusable-security.yml
    with:
      scan-type: semgrep

  security-trivy-fs:
    name: Trivy (Filesystem Scan)
    needs: get-config
    uses: ./.github/workflows/reusable-security.yml
    with:
      scan-type: trivy-fs

  security-trufflehog:
    name: TruffleHog (Secrets Scan)
    runs-on: ubuntu-latest
    # Skip TruffleHog on main branch pushes where base and head are the same
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000')

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

      with:
        fetch-depth: 0

    - name: Check for secrets with TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
        head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.event.after }}
        extra_args: --debug --only-verified

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5


    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  codeql-analysis:
    name: CodeQL Analysis
    needs: get-config
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security]')
    uses: ./.github/workflows/reusable-security.yml
    with:
      scan-type: codeql
      python-version: ${{ needs.get-config.outputs.default-python-version }}

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: get-config
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.changed_files, 'Dockerfile') || contains(github.event.pull_request.changed_files, 'docker-compose')

    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.get-config.outputs.python-versions) }}

    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ matrix.python-version }}
        cache-key-suffix: container-security-${{ matrix.python-version }}
        install-deps: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build package
      run: make build

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-scan-py${{ matrix.python-version }}
        build-args: |
          PYTHON_VERSION=${{ matrix.python-version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-scan-py${{ matrix.python-version }}
        format: 'sarif'
        output: 'trivy-results-py${{ matrix.python-version }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-py${{ matrix.python-version }}.sarif'

    - name: Run Trivy vulnerability scanner (JSON output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:security-scan-py${{ matrix.python-version }}
        format: 'json'
        output: 'trivy-results-py${{ matrix.python-version }}.json'

    - name: Dockerfile security scan with Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-dockerfile.sarif
        no-fail: true

    - name: Dev-tools Dockerfile security scan with Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: dev-tools/docker/Dockerfile.dev-tools
        format: sarif
        output-file: hadolint-dev-tools.sarif
        no-fail: true

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-dockerfile.sarif

    - name: Upload Dev-tools Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-dev-tools.sarif

    - name: Upload container security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-security-reports-py${{ matrix.python-version }}
        path: |
          trivy-results-py${{ matrix.python-version }}.sarif
          trivy-results-py${{ matrix.python-version }}.json
          hadolint-dockerfile.sarif
          hadolint-dev-tools.sarif
        retention-days: 30
