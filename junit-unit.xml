<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="38" failures="340" skipped="148" tests="994" time="10.459" timestamp="2025-08-15T01:23:29.605346+02:00" hostname="842f574e849a"><testcase classname="tests.unit.api.handlers.test_api_handler_initialization.TestAPIHandlerInitialization" name="test_get_available_templates_handler_initialization" time="0.005" /><testcase classname="tests.unit.api.handlers.test_api_handler_initialization.TestAPIHandlerInitialization" name="test_request_machines_handler_initialization" time="0.003" /><testcase classname="tests.unit.api.handlers.test_api_handler_initialization.TestAPIHandlerInitialization" name="test_get_request_status_handler_initialization" time="0.004" /><testcase classname="tests.unit.api.handlers.test_api_handler_initialization.TestAPIHandlerInitialization" name="test_get_return_requests_handler_initialization" time="0.003" /><testcase classname="tests.unit.api.handlers.test_api_handler_initialization.TestAPIHandlerInitialization" name="test_request_return_machines_handler_initialization" time="0.003" /><testcase classname="tests.unit.api.handlers.test_api_handler_initialization.TestAPIHandlerRegistration" name="test_register_server_services" time="0.003"><failure message="AssertionError: Expected '_register_api_handlers' to be called once. Called 0 times.">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:990: in assert_called_once_with
    raise AssertionError(msg)
E   AssertionError: Expected '_register_api_handlers' to be called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests/unit/api/handlers/test_api_handler_initialization.py:147: in test_register_server_services
    mock_register_api_handlers.assert_called_once_with(container)
E   AssertionError: Expected '_register_api_handlers' to be called once. Called 0 times.</failure></testcase><testcase classname="tests.unit.api.handlers.test_api_handler_initialization.TestAPIHandlerRegistration" name="test_register_server_services_disabled" time="0.002" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIHandlersComprehensive" name="test_handler_modules_exist" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIHandlersComprehensive" name="test_handler_classes_exist" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIHandlersComprehensive" name="test_handler_initialization" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIHandlersComprehensive" name="test_handler_methods" time="0.003" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIHandlersComprehensive" name="test_handler_dependencies" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIModelsComprehensive" name="test_model_modules_exist" time="0.008" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIModelsComprehensive" name="test_model_classes_exist" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIModelsComprehensive" name="test_model_instantiation" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIModelsComprehensive" name="test_model_serialization" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIRoutersComprehensive" name="test_router_modules_exist" time="0.003"><failure message="AssertionError: At least one router module should exist&#10;assert 0 &gt; 0&#10; +  where 0 = len([])">tests/unit/api/test_api_comprehensive.py:344: in test_router_modules_exist
    assert len(modules) &gt; 0, "At least one router module should exist"
E   AssertionError: At least one router module should exist
E   assert 0 &gt; 0
E    +  where 0 = len([])</failure></testcase><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIRoutersComprehensive" name="test_routers_have_routes" time="0.002" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIRoutersComprehensive" name="test_router_integration" time="0.002" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIValidationComprehensive" name="test_validation_module_exists" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIValidationComprehensive" name="test_validation_functions" time="0.001" /><testcase classname="tests.unit.api.test_api_comprehensive.TestAPIValidationComprehensive" name="test_validation_classes" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_commands.TestProviderStrategyCommands" name="test_select_provider_strategy_command_creation" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_commands.TestProviderStrategyCommands" name="test_execute_provider_operation_command_creation" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_commands.TestProviderStrategyCommands" name="test_register_provider_strategy_command_creation" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_commands.TestProviderStrategyCommands" name="test_update_provider_health_command_creation" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_queries.TestProviderStrategyQueries" name="test_get_provider_health_query_creation" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_queries.TestProviderStrategyQueries" name="test_get_provider_health_query_defaults" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_queries.TestProviderStrategyQueries" name="test_list_available_providers_query_creation" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_queries.TestProviderStrategyQueries" name="test_get_provider_capabilities_query_creation" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_queries.TestProviderStrategyQueries" name="test_get_provider_metrics_query_creation" time="0.001" /><testcase classname="tests.unit.application.provider.test_provider_queries.TestProviderStrategyQueries" name="test_get_provider_strategy_config_query_creation" time="0.001" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestListSchedulerStrategiesHandler" name="test_list_strategies_basic" time="0.002" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestListSchedulerStrategiesHandler" name="test_list_strategies_with_details" time="0.002" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestListSchedulerStrategiesHandler" name="test_list_strategies_config_error" time="0.001" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestGetSchedulerConfigurationHandler" name="test_get_current_configuration" time="0.002" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestGetSchedulerConfigurationHandler" name="test_get_specific_configuration" time="0.002" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestGetSchedulerConfigurationHandler" name="test_get_configuration_not_registered" time="0.002" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestValidateSchedulerConfigurationHandler" name="test_validate_current_scheduler" time="0.002" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestValidateSchedulerConfigurationHandler" name="test_validate_unregistered_scheduler" time="0.002" /><testcase classname="tests.unit.application.queries.test_scheduler_handlers.TestValidateSchedulerConfigurationHandler" name="test_validate_strategy_creation_failure" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_valid_ec2fleet" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_valid_spot" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_unsupported_api" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_spot_on_runinstances" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_high_instance_count" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_fleet_type_support" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_unsupported_fleet_type" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_no_api_specified" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_lenient_mode" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_strict_mode_warnings_as_errors" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_basic_mode" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_validate_template_requirements_exception_handling" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_get_provider_api_capabilities" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_get_provider_api_capabilities_unknown_api" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_list_supported_apis" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_list_supported_apis_unknown_provider" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_check_api_compatibility_multiple_providers" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_get_default_capabilities_aws" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestProviderCapabilityService" name="test_get_default_capabilities_unknown_provider" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestValidationResult" name="test_validation_result_creation" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestValidationResult" name="test_validation_result_defaults" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_capability_service.TestValidationLevel" name="test_validation_level_values" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_explicit_provider_selection_success" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_explicit_provider_not_found" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_explicit_provider_disabled" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_load_balanced_provider_selection" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_load_balanced_no_enabled_instances" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_api_based_provider_selection" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_api_based_no_compatible_providers" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_default_provider_selection" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_default_selection_no_config_defaults" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_default_selection_no_enabled_providers" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_weighted_round_robin_selection" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_get_available_providers" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_validate_provider_selection_valid" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_validate_provider_selection_invalid_instance" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_validate_provider_selection_disabled_instance" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_validate_provider_selection_type_mismatch" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_provider_supports_api_aws" time="0.002" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionService" name="test_provider_supports_api_capability_check" time="0.002"><failure message="AssertionError: assert False&#10; +  where False = _provider_supports_api(ProviderInstanceConfig(name='test-provider', type='aws', enabled=True, priority=1, weight=10, config={}, handlers=None, handler_overrides=None, template_defaults=None, extensions=None, health_check=HealthCheckConfig(enabled=True, interval=300, timeout=30, retry_count=3)), 'CustomAPI')&#10; +    where _provider_supports_api = &lt;src.application.services.provider_selection_service.ProviderSelectionService object at 0x120908b50&gt;._provider_supports_api">tests/unit/application/services/test_provider_selection_service.py:391: in test_provider_supports_api_capability_check
    assert service._provider_supports_api(provider_instance, "CustomAPI")
E   AssertionError: assert False
E    +  where False = _provider_supports_api(ProviderInstanceConfig(name='test-provider', type='aws', enabled=True, priority=1, weight=10, config={}, handlers=None, handler_overrides=None, template_defaults=None, extensions=None, health_check=HealthCheckConfig(enabled=True, interval=300, timeout=30, retry_count=3)), 'CustomAPI')
E    +    where _provider_supports_api = &lt;src.application.services.provider_selection_service.ProviderSelectionService object at 0x120908b50&gt;._provider_supports_api</failure></testcase><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionResult" name="test_provider_selection_result_creation" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestProviderSelectionResult" name="test_provider_selection_result_defaults" time="0.001" /><testcase classname="tests.unit.application.services.test_provider_selection_service.TestSelectionStrategy" name="test_selection_strategy_values" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestCommandHandlersComprehensive" name="test_command_handler_modules_exist" time="0.012" /><testcase classname="tests.unit.application.test_application_comprehensive.TestCommandHandlersComprehensive" name="test_command_handler_classes_exist" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestCommandHandlersComprehensive" name="test_command_handler_initialization" time="0.003" /><testcase classname="tests.unit.application.test_application_comprehensive.TestCommandHandlersComprehensive" name="test_command_handler_methods" time="0.009" /><testcase classname="tests.unit.application.test_application_comprehensive.TestQueryHandlersComprehensive" name="test_query_handler_modules_exist" time="0.005" /><testcase classname="tests.unit.application.test_application_comprehensive.TestQueryHandlersComprehensive" name="test_query_handler_classes_exist" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestQueryHandlersComprehensive" name="test_query_handler_methods" time="0.009" /><testcase classname="tests.unit.application.test_application_comprehensive.TestApplicationDTOsComprehensive" name="test_dto_modules_exist" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestApplicationDTOsComprehensive" name="test_dto_classes_exist" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestApplicationDTOsComprehensive" name="test_dto_instantiation" time="0.002" /><testcase classname="tests.unit.application.test_application_comprehensive.TestApplicationDTOsComprehensive" name="test_dto_serialization" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestCQRSMigrationValidation" name="test_cqrs_buses_exist" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestCQRSMigrationValidation" name="test_command_handlers_exist" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestCQRSMigrationValidation" name="test_query_handlers_exist" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestApplicationEventsComprehensive" name="test_event_modules_exist" time="0.005" /><testcase classname="tests.unit.application.test_application_comprehensive.TestApplicationEventsComprehensive" name="test_event_handler_classes_exist" time="0.001" /><testcase classname="tests.unit.application.test_application_comprehensive.TestApplicationEventsComprehensive" name="test_event_bus_exists" time="0.001" /><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandQuerySeparation" name="test_commands_do_not_return_business_data" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:74: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandQuerySeparation" name="test_queries_do_not_modify_state" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:92: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandQuerySeparation" name="test_command_handlers_modify_state" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:115: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandQuerySeparation" name="test_query_handlers_do_not_modify_state" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:142: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandBusImplementation" name="test_command_bus_routes_to_correct_handler" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:172: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandBusImplementation" name="test_command_bus_handles_unregistered_commands" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:198: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandBusImplementation" name="test_command_bus_supports_middleware" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:210: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandBusImplementation" name="test_command_bus_handles_async_commands" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:239: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestQueryBusImplementation" name="test_query_bus_routes_to_correct_handler" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:263: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestQueryBusImplementation" name="test_query_bus_supports_caching" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:288: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestQueryBusImplementation" name="test_query_bus_handles_query_parameters" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:317: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestQueryBusImplementation" name="test_query_bus_supports_result_transformation" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:334: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandHandlerImplementation" name="test_create_request_handler_validates_input" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:362: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandHandlerImplementation" name="test_command_handlers_are_transactional" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:396: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCommandHandlerImplementation" name="test_command_handlers_publish_events" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:423: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestQueryHandlerImplementation" name="test_query_handlers_optimize_for_reads" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:466: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestQueryHandlerImplementation" name="test_query_handlers_support_pagination" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:483: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestQueryHandlerImplementation" name="test_query_handlers_support_filtering" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:509: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestQueryHandlerImplementation" name="test_query_handlers_support_projections" time="0.001"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:529: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCQRSIntegration" name="test_cqrs_integrates_with_event_sourcing" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:560: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCQRSIntegration" name="test_cqrs_supports_read_models" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:587: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCQRSIntegration" name="test_cqrs_handles_eventual_consistency" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:611: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.application.test_cqrs_patterns.TestCQRSIntegration" name="test_cqrs_supports_saga_patterns" time="0.000"><skipped type="pytest.skip" message="CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/application/test_cqrs_patterns.py:640: CQRS imports not available: cannot import name 'CreateRequestHandler' from 'src.application.commands.request_handlers' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/request_handlers.py)</skipped></testcase><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_dependency_direction_rules" time="0.131" /><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_layer_isolation" time="0.010" /><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_interface_segregation" time="0.001"><failure message="ModuleNotFoundError: No module named 'src.infrastructure.ports'">tests/unit/architecture/test_clean_architecture.py:190: in test_interface_segregation
    from src.infrastructure.ports.auth.auth_port import AuthPort
E   ModuleNotFoundError: No module named 'src.infrastructure.ports'</failure></testcase><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_dependency_inversion" time="0.001"><failure message="AttributeError: module 'src.application' has no attribute 'service'. Did you mean: 'services'?">tests/unit/architecture/test_clean_architecture.py:210: in test_dependency_inversion
    with patch("src.application.service.ApplicationService") as MockAppService:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1481: in __enter__
    self.target = self.getter()
                  ^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pkgutil.py:528: in resolve_name
    result = getattr(result, p)
             ^^^^^^^^^^^^^^^^^^
E   AttributeError: module 'src.application' has no attribute 'service'. Did you mean: 'services'?</failure></testcase><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_ports_and_adapters_pattern" time="0.001"><failure message="ModuleNotFoundError: No module named 'src.infrastructure.ports'">tests/unit/architecture/test_clean_architecture.py:231: in test_ports_and_adapters_pattern
    from src.infrastructure.ports.cloud_resource_manager_port import (
E   ModuleNotFoundError: No module named 'src.infrastructure.ports'</failure></testcase><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_domain_independence" time="0.051" /><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_application_service_layer" time="0.001"><failure message="AttributeError: module 'src.application' has no attribute 'service'. Did you mean: 'services'?">tests/unit/architecture/test_clean_architecture.py:277: in test_application_service_layer
    with patch("src.application.service.ApplicationService") as MockAppService:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1481: in __enter__
    self.target = self.getter()
                  ^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pkgutil.py:528: in resolve_name
    result = getattr(result, p)
             ^^^^^^^^^^^^^^^^^^
E   AttributeError: module 'src.application' has no attribute 'service'. Did you mean: 'services'?</failure></testcase><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_infrastructure_layer_boundaries" time="0.001" /><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_interface_layer_responsibilities" time="0.003"><failure message="ModuleNotFoundError: No module named 'fastapi'">tests/unit/architecture/test_clean_architecture.py:321: in test_interface_layer_responsibilities
    from src.api.server import create_fastapi_app
src/api/server.py:3: in &lt;module&gt;
    from fastapi import FastAPI, Request
E   ModuleNotFoundError: No module named 'fastapi'</failure></testcase><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_cross_cutting_concerns" time="0.001" /><testcase classname="tests.unit.architecture.test_clean_architecture.TestCleanArchitecture" name="test_configuration_isolation" time="0.001" /><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_command_query_separation" time="0.001" /><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_command_handler_interface" time="0.001" /><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_query_handler_interface" time="0.001" /><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_command_immutability" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateRequestCommand&#10;requested_count&#10;  Field required [type=missing, input_value={'template_id': 'test-tem...te', 'machine_count': 2}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/architecture/test_cqrs_compliance.py:82: in test_command_immutability
    command = CreateRequestCommand(template_id="test-template", machine_count=2)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateRequestCommand
E   requested_count
E     Field required [type=missing, input_value={'template_id': 'test-tem...te', 'machine_count': 2}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_query_immutability" time="0.001" /><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_command_validation" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateRequestCommand&#10;requested_count&#10;  Field required [type=missing, input_value={'template_id': 'test-tem...te', 'machine_count': 2}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/architecture/test_cqrs_compliance.py:105: in test_command_validation
    command = CreateRequestCommand(template_id="test-template", machine_count=2)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateRequestCommand
E   requested_count
E     Field required [type=missing, input_value={'template_id': 'test-tem...te', 'machine_count': 2}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_query_validation" time="0.001" /><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_dependency_injection_integration" time="0.001" /><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_command_bus_pattern" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateRequestCommand&#10;requested_count&#10;  Field required [type=missing, input_value={'template_id': 'test-tem...te', 'machine_count': 2}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/architecture/test_cqrs_compliance.py:148: in test_command_bus_pattern
    command = CreateRequestCommand(template_id="test-template", machine_count=2)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateRequestCommand
E   requested_count
E     Field required [type=missing, input_value={'template_id': 'test-tem...te', 'machine_count': 2}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_query_bus_pattern" time="0.001" /><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_read_write_model_separation" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateRequestCommand&#10;requested_count&#10;  Field required [type=missing, input_value={'template_id': 'test-tem...te', 'machine_count': 2}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/architecture/test_cqrs_compliance.py:175: in test_read_write_model_separation
    command = CreateRequestCommand(template_id="test-template", machine_count=2)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateRequestCommand
E   requested_count
E     Field required [type=missing, input_value={'template_id': 'test-tem...te', 'machine_count': 2}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.architecture.test_cqrs_compliance.TestCQRSCompliance" name="test_event_driven_architecture_support" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_aggregate_boundary_enforcement" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_domain_service_isolation" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_value_object_immutability" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_entity_identity_rules" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_domain_event_publishing" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_value_object_equality_and_hashing" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_domain_invariants_enforcement" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">tests/unit/architecture/test_ddd_compliance_fixed.py:148: in test_domain_invariants_enforcement
    with pytest.raises(ValueError, match="image_id is required"):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_value_object_behavior" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_domain_model_validation" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_resource_id_validation" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_domain_exception_hierarchy" time="0.001" /><testcase classname="tests.unit.architecture.test_ddd_compliance_fixed.TestDDDComplianceFixed" name="test_template_business_logic" time="0.001" /><testcase classname="tests.unit.cli.test_cli_migration.TestCLIMigration" name="test_cli_modules_can_be_imported" time="0.002"><failure message="ImportError: cannot import name 'convert_to_legacy_args' from 'src.cli.main' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/cli/main.py)">tests/unit/cli/test_cli_migration.py:25: in test_cli_modules_can_be_imported
    from src.cli.main import (
E   ImportError: cannot import name 'convert_to_legacy_args' from 'src.cli.main' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/cli/main.py)</failure></testcase><testcase classname="tests.unit.cli.test_cli_migration.TestCLIMigration" name="test_shell_completion_generation" time="0.001" /><testcase classname="tests.unit.cli.test_cli_migration.TestCLIMigration" name="test_output_formatting" time="0.001" /><testcase classname="tests.unit.cli.test_cli_migration.TestCLIMigration" name="test_field_mapping_utilities" time="0.001" /><testcase classname="tests.unit.cli.test_cli_migration.TestCLIMigration" name="test_run_py_is_minimal" time="0.001"><failure message="AssertionError: run.py should be minimal, but has 31 lines&#10;assert 31 &lt; 30&#10; +  where 31 = len(['#!/usr/bin/env python3', '&quot;&quot;&quot;CLI entry point with resource-action structure.&quot;&quot;&quot;', 'import asyncio', 'import os', 'import sys', '', ...])">tests/unit/cli/test_cli_migration.py:113: in test_run_py_is_minimal
    assert len(lines) &lt; 30, f"run.py should be minimal, but has {len(lines)} lines"
E   AssertionError: run.py should be minimal, but has 31 lines
E   assert 31 &lt; 30
E    +  where 31 = len(['#!/usr/bin/env python3', '"""CLI entry point with resource-action structure."""', 'import asyncio', 'import os', 'import sys', '', ...])</failure></testcase><testcase classname="tests.unit.cli.test_storage_commands.TestStorageCommandHandlers" name="test_handle_list_storage_strategies" time="0.003"><failure message="src.domain.base.exceptions.ValidationError: Type error: object Mock can't be used in 'await' expression">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/storage_command_handlers.py:23: in handle_list_storage_strategies
    strategies = await query_bus.execute(query)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: object Mock can't be used in 'await' expression

The above exception was the direct cause of the following exception:
tests/unit/cli/test_storage_commands.py:35: in test_handle_list_storage_strategies
    result = await handle_list_storage_strategies(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.ValidationError: Type error: object Mock can't be used in 'await' expression</failure></testcase><testcase classname="tests.unit.cli.test_storage_commands.TestStorageCommandHandlers" name="test_handle_show_storage_config" time="0.001"><failure message="src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'GetStorageConfigQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/storage_command_handlers.py:46: in handle_show_storage_config
    from src.application.queries.system import GetStorageConfigQuery
E   ImportError: cannot import name 'GetStorageConfigQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)

The above exception was the direct cause of the following exception:
tests/unit/cli/test_storage_commands.py:55: in test_handle_show_storage_config
    result = await handle_show_storage_config(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'GetStorageConfigQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)</failure></testcase><testcase classname="tests.unit.cli.test_storage_commands.TestStorageCommandHandlers" name="test_handle_validate_storage_config" time="0.001"><failure message="src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'ValidateStorageConfigQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/storage_command_handlers.py:68: in handle_validate_storage_config
    from src.application.queries.system import ValidateStorageConfigQuery
E   ImportError: cannot import name 'ValidateStorageConfigQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)

The above exception was the direct cause of the following exception:
tests/unit/cli/test_storage_commands.py:74: in test_handle_validate_storage_config
    result = await handle_validate_storage_config(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'ValidateStorageConfigQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)</failure></testcase><testcase classname="tests.unit.cli.test_storage_commands.TestStorageCommandHandlers" name="test_handle_test_storage" time="0.002"><failure message="src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'TestStorageCommand' from 'src.application.commands.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/system.py)">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/storage_command_handlers.py:93: in handle_test_storage
    from src.application.commands.system import TestStorageCommand
E   ImportError: cannot import name 'TestStorageCommand' from 'src.application.commands.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/system.py)

The above exception was the direct cause of the following exception:
tests/unit/cli/test_storage_commands.py:95: in test_handle_test_storage
    result = await handle_test_storage(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'TestStorageCommand' from 'src.application.commands.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/commands/system.py)</failure></testcase><testcase classname="tests.unit.cli.test_storage_commands.TestStorageCommandHandlers" name="test_handle_storage_health" time="0.001"><failure message="src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'GetStorageHealthQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/storage_command_handlers.py:115: in handle_storage_health
    from src.application.queries.system import GetStorageHealthQuery
E   ImportError: cannot import name 'GetStorageHealthQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)

The above exception was the direct cause of the following exception:
tests/unit/cli/test_storage_commands.py:116: in test_handle_storage_health
    result = await handle_storage_health(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'GetStorageHealthQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)</failure></testcase><testcase classname="tests.unit.cli.test_storage_commands.TestStorageCommandHandlers" name="test_handle_storage_metrics" time="0.002"><failure message="src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'GetStorageMetricsQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/storage_command_handlers.py:137: in handle_storage_metrics
    from src.application.queries.system import GetStorageMetricsQuery
E   ImportError: cannot import name 'GetStorageMetricsQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)

The above exception was the direct cause of the following exception:
tests/unit/cli/test_storage_commands.py:137: in test_handle_storage_metrics
    result = await handle_storage_metrics(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'GetStorageMetricsQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)</failure></testcase><testcase classname="tests.unit.cli.test_storage_commands.TestStorageHandlerImports" name="test_import_storage_handlers" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_simple_env_var" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_braced_env_var" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_env_var_with_subpath" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_braced_env_var_with_subpath" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_nonexistent_env_var" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_dict_values" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_nested_dict_values" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_list_values" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_non_string_values" time="0.001" /><testcase classname="tests.unit.config.test_env_expansion.TestEnvironmentVariableExpansion" name="test_expand_config_env_vars" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderInstanceConfig" name="test_valid_provider_instance_config" time="0.001"><failure message="AttributeError: 'ProviderInstanceConfig' object has no attribute 'capabilities'">tests/unit/config/test_provider_config.py:35: in test_valid_provider_instance_config
    assert "instances" in config.capabilities
                          ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/pydantic/main.py:856: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'ProviderInstanceConfig' object has no attribute 'capabilities'</failure></testcase><testcase classname="tests.unit.config.test_provider_config.TestProviderInstanceConfig" name="test_provider_name_validation" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderInstanceConfig" name="test_provider_type_validation" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderInstanceConfig" name="test_weight_validation" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestHealthCheckConfig" name="test_default_health_check_config" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestHealthCheckConfig" name="test_custom_health_check_config" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestHealthCheckConfig" name="test_health_check_validation" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestCircuitBreakerConfig" name="test_default_circuit_breaker_config" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestCircuitBreakerConfig" name="test_custom_circuit_breaker_config" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestCircuitBreakerConfig" name="test_circuit_breaker_validation" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_single_provider_mode_explicit" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_multi_provider_mode" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_single_provider_mode_implicit" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_single_provider_mode" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_selection_policy_validation" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_provider_name_uniqueness" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_active_provider_exists" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_get_provider_by_name" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_health_check_interval_validation" time="0.001" /><testcase classname="tests.unit.config.test_provider_config.TestProviderConfig" name="test_empty_configuration_validation" time="0.001" /><testcase classname="tests.unit.config.test_provider_defaults_inheritance.TestProviderDefaultsInheritance" name="test_basic_inheritance" time="0.001" /><testcase classname="tests.unit.config.test_provider_defaults_inheritance.TestProviderDefaultsInheritance" name="test_handler_override_merging" time="0.001" /><testcase classname="tests.unit.config.test_provider_defaults_inheritance.TestProviderDefaultsInheritance" name="test_handler_removal_via_null_override" time="0.001" /><testcase classname="tests.unit.config.test_provider_defaults_inheritance.TestProviderDefaultsInheritance" name="test_full_handler_override_ignores_defaults" time="0.001" /><testcase classname="tests.unit.config.test_provider_defaults_inheritance.TestProviderDefaultsInheritance" name="test_multi_provider_type_inheritance" time="0.001" /><testcase classname="tests.unit.config.test_provider_defaults_inheritance.TestProviderDefaultsInheritance" name="test_complex_regional_limitations_scenario" time="0.001" /><testcase classname="tests.unit.config.test_provider_defaults_inheritance.TestProviderDefaultsInheritance" name="test_handler_config_merge_functionality" time="0.001" /><testcase classname="tests.unit.config.test_provider_defaults_inheritance.TestProviderDefaultsInheritance" name="test_inheritance_with_missing_defaults" time="0.001" /><testcase classname="tests.unit.config.test_scheduler_config.TestSchedulerConfig" name="test_default_scheduler_config" time="0.001" /><testcase classname="tests.unit.config.test_scheduler_config.TestSchedulerConfig" name="test_custom_scheduler_config" time="0.001" /><testcase classname="tests.unit.config.test_scheduler_config.TestSchedulerConfig" name="test_scheduler_config_with_env_var" time="0.001" /><testcase classname="tests.unit.config.test_scheduler_config.TestAppConfigWithScheduler" name="test_app_config_with_default_scheduler" time="0.001" /><testcase classname="tests.unit.config.test_scheduler_config.TestAppConfigWithScheduler" name="test_app_config_path_generation" time="0.001" /><testcase classname="tests.unit.config.test_scheduler_config.TestAppConfigWithScheduler" name="test_app_config_path_generation_provider1" time="0.001" /><testcase classname="tests.unit.config.test_scheduler_config.TestAppConfigWithScheduler" name="test_app_config_path_generation_with_complex_provider_name" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestBaseEntity" name="test_entity_creation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestBaseEntity" name="test_entity_equality" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestBaseEntity" name="test_entity_equality_different_types" time="0.002" /><testcase classname="tests.unit.domain.test_base_entities.TestBaseEntity" name="test_entity_hash" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestBaseEntity" name="test_entity_validation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestBaseEntity" name="test_entity_with_timestamps" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestBaseEntity" name="test_entity_none_id" time="0.001"><failure message="AssertionError: assert MockEntity(id=None, created_at=None, updated_at=None, name='No ID Entity', value=0) != MockEntity(id=None, created_at=None, updated_at=None, name='Another No ID Entity', value=0)">tests/unit/domain/test_base_entities.py:95: in test_entity_none_id
    assert entity != entity2
E   AssertionError: assert MockEntity(id=None, created_at=None, updated_at=None, name='No ID Entity', value=0) != MockEntity(id=None, created_at=None, updated_at=None, name='Another No ID Entity', value=0)</failure></testcase><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_instance_id_creation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_instance_id_validation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_instance_id_invalid" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_instance_type_creation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_instance_type_validation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_instance_type_invalid" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_resource_id_creation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_resource_id_validation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_resource_id_invalid" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_tags_creation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_tags_operations" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_tags_validation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_ip_address_creation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_ip_address_validation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjects" name="test_ip_address_invalid" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestDomainExceptions" name="test_domain_exception_creation" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestDomainExceptions" name="test_validation_error_creation" time="0.001"><failure message="TypeError: DomainException.__init__() got an unexpected keyword argument 'field'">tests/unit/domain/test_base_entities.py:346: in test_validation_error_creation
    error = ValidationError("Invalid value", field="test_field")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: DomainException.__init__() got an unexpected keyword argument 'field'</failure></testcase><testcase classname="tests.unit.domain.test_base_entities.TestDomainExceptions" name="test_validation_error_without_field" time="0.001"><failure message="AttributeError: 'ValidationError' object has no attribute 'field'">tests/unit/domain/test_base_entities.py:354: in test_validation_error_without_field
    assert error.field is None
           ^^^^^^^^^^^
E   AttributeError: 'ValidationError' object has no attribute 'field'</failure></testcase><testcase classname="tests.unit.domain.test_base_entities.TestDomainExceptions" name="test_exception_inheritance" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjectEquality" name="test_value_object_equality" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjectEquality" name="test_value_object_hash" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjectEquality" name="test_value_object_immutability" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for InstanceId&#10;value&#10;  Instance is frozen [type=frozen_instance, input_value='i-new-value', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/frozen_instance">tests/unit/domain/test_base_entities.py:394: in test_value_object_immutability
    instance_id.value = "i-new-value"
    ^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/pydantic/main.py:875: in __setattr__
    self._check_frozen(name, value)
.venv/lib/python3.13/site-packages/pydantic/main.py:939: in _check_frozen
    raise pydantic_core.ValidationError.from_exception_data(self.__class__.__name__, [error])
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for InstanceId
E   value
E     Instance is frozen [type=frozen_instance, input_value='i-new-value', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/frozen_instance</failure></testcase><testcase classname="tests.unit.domain.test_base_entities.TestValueObjectEquality" name="test_different_value_object_types" time="0.001"><failure message="AssertionError: assert 8707290669421981821 != 8707290669421981821&#10; +  where 8707290669421981821 = hash(InstanceId('i-1234567890abcdef0'))&#10; +  and   8707290669421981821 = hash(ResourceId('i-1234567890abcdef0'))">tests/unit/domain/test_base_entities.py:403: in test_different_value_object_types
    assert hash(instance_id) != hash(resource_id)
E   AssertionError: assert 8707290669421981821 != 8707290669421981821
E    +  where 8707290669421981821 = hash(InstanceId('i-1234567890abcdef0'))
E    +  and   8707290669421981821 = hash(ResourceId('i-1234567890abcdef0'))</failure></testcase><testcase classname="tests.unit.domain.test_base_entities.TestValueObjectStringRepresentation" name="test_instance_id_str" time="0.001" /><testcase classname="tests.unit.domain.test_base_entities.TestValueObjectStringRepresentation" name="test_instance_type_str" time="0.002"><failure message="assert &quot;InstanceType...e='t2.micro')&quot; == &quot;InstanceType('t2.micro')&quot;&#10;  &#10;  #x1B[0m#x1B[91m- InstanceType('t2.micro')#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ InstanceType(value='t2.micro')#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?              ++++++#x1B[90m#x1B[39;49;00m">tests/unit/domain/test_base_entities.py:420: in test_instance_type_str
    assert repr(instance_type) == "InstanceType('t2.micro')"
E   assert "InstanceType...e='t2.micro')" == "InstanceType('t2.micro')"
E     
E     #x1B[0m#x1B[91m- InstanceType('t2.micro')#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ InstanceType(value='t2.micro')#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?              ++++++#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.domain.test_base_entities.TestValueObjectStringRepresentation" name="test_tags_str" time="0.001" /><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_machine_count_must_be_positive" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:38: in test_machine_count_must_be_positive
    Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_machine_count_maximum_limit" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:51: in test_machine_count_maximum_limit
    Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_template_id_cannot_be_empty" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:60: in test_template_id_cannot_be_empty
    Request.create_new_request(template_id="", machine_count=1, requester_id="test-user")
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_requester_id_cannot_be_empty" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:68: in test_requester_id_cannot_be_empty
    Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_priority_must_be_valid_range" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:80: in test_priority_must_be_valid_range
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_timeout_must_be_positive" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:108: in test_timeout_must_be_positive
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_return_request_must_have_machine_ids" time="0.001"><failure message="TypeError: Request.create_return_request() got an unexpected keyword argument 'machine_ids'. Did you mean 'machine_refs'?">tests/unit/domain/test_business_rules.py:128: in test_return_request_must_have_machine_ids
    Request.create_return_request(machine_ids=[], requester_id="test-user")
E   TypeError: Request.create_return_request() got an unexpected keyword argument 'machine_ids'. Did you mean 'machine_refs'?</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_return_request_machine_ids_must_be_valid" time="0.001"><failure message="TypeError: Request.create_return_request() got an unexpected keyword argument 'machine_ids'. Did you mean 'machine_refs'?">tests/unit/domain/test_business_rules.py:136: in test_return_request_machine_ids_must_be_valid
    request = Request.create_return_request(
E   TypeError: Request.create_return_request() got an unexpected keyword argument 'machine_ids'. Did you mean 'machine_refs'?</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_request_status_transitions_are_valid" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:150: in test_request_status_transitions_are_valid
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_request_cannot_be_completed_without_processing" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:169: in test_request_cannot_be_completed_without_processing
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_completed_request_cannot_be_modified" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:179: in test_completed_request_cannot_be_modified
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestRequestBusinessRules" name="test_request_timeout_enforcement" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:192: in test_request_timeout_enforcement
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestTemplateBusinessRules" name="test_template_id_must_be_unique" time="0.001" /><testcase classname="tests.unit.domain.test_business_rules.TestTemplateBusinessRules" name="test_provider_api_must_be_valid" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;">tests/unit/domain/test_business_rules.py:244: in test_provider_api_must_be_valid
    with pytest.raises(TemplateValidationError):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestTemplateBusinessRules" name="test_image_id_must_be_valid_format" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;">tests/unit/domain/test_business_rules.py:266: in test_image_id_must_be_valid_format
    with pytest.raises(TemplateValidationError):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestTemplateBusinessRules" name="test_instance_type_must_be_valid" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;">tests/unit/domain/test_business_rules.py:291: in test_instance_type_must_be_valid
    with pytest.raises(TemplateValidationError):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestTemplateBusinessRules" name="test_max_number_must_be_positive" time="0.001"><failure message="AttributeError: 'Template' object has no attribute 'max_number'">tests/unit/domain/test_business_rules.py:311: in test_max_number_must_be_positive
    assert template.max_number == 10
           ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/pydantic/main.py:856: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'Template' object has no attribute 'max_number'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestTemplateBusinessRules" name="test_subnet_ids_must_be_valid_format" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;">tests/unit/domain/test_business_rules.py:338: in test_subnet_ids_must_be_valid_format
    with pytest.raises(TemplateValidationError):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestTemplateBusinessRules" name="test_security_group_ids_must_be_valid_format" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;">tests/unit/domain/test_business_rules.py:362: in test_security_group_ids_must_be_valid_format
    with pytest.raises(TemplateValidationError):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'src.domain.template.exceptions.TemplateValidationError'&gt;</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestTemplateBusinessRules" name="test_template_compatibility_rules" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for Template&#10;instance_types&#10;  Input should be a valid dictionary [type=dict_type, input_value=['t2.micro', 't2.small', 't3.micro'], input_type=list]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/dict_type">tests/unit/domain/test_business_rules.py:385: in test_template_compatibility_rules
    fleet_template = Template(
src/domain/template/aggregate.py:98: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for Template
E   instance_types
E     Input should be a valid dictionary [type=dict_type, input_value=['t2.micro', 't2.small', 't3.micro'], input_type=list]
E       For further information visit https://errors.pydantic.dev/2.9/v/dict_type</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestMachineBusinessRules" name="test_machine_must_have_valid_instance_id" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine&#10;instance_id&#10;  Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-1234567890abcdef0', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;provider_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123456...14, 23, 23, 31, 919628)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;instance_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123456...14, 23, 23, 31, 919628)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;image_id&#10;  Field required [type=missing, input_value={'instance_id': 'i-123456...14, 23, 23, 31, 919628)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_business_rules.py:405: in test_machine_must_have_valid_instance_id
    machine = Machine(
src/domain/machine/aggregate.py:69: in __init__
    super().__init__(**data)
src/domain/base/entity.py:41: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine
E   instance_id
E     Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-1234567890abcdef0', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   provider_type
E     Field required [type=missing, input_value={'instance_id': 'i-123456...14, 23, 23, 31, 919628)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   instance_type
E     Field required [type=missing, input_value={'instance_id': 'i-123456...14, 23, 23, 31, 919628)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   image_id
E     Field required [type=missing, input_value={'instance_id': 'i-123456...14, 23, 23, 31, 919628)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestMachineBusinessRules" name="test_machine_status_transitions_are_valid" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine&#10;instance_id&#10;  Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;provider_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 929103)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;instance_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 929103)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;image_id&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 929103)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_business_rules.py:424: in test_machine_status_transitions_are_valid
    machine = Machine(
src/domain/machine/aggregate.py:69: in __init__
    super().__init__(**data)
src/domain/base/entity.py:41: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine
E   instance_id
E     Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   provider_type
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 929103)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   instance_type
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 929103)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   image_id
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 929103)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestMachineBusinessRules" name="test_machine_cannot_be_terminated_twice" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine&#10;instance_id&#10;  Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;provider_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 938199)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;instance_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 938199)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;image_id&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 938199)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_business_rules.py:447: in test_machine_cannot_be_terminated_twice
    machine = Machine(
src/domain/machine/aggregate.py:69: in __init__
    super().__init__(**data)
src/domain/base/entity.py:41: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine
E   instance_id
E     Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   provider_type
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 938199)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   instance_type
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 938199)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   image_id
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 938199)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestMachineBusinessRules" name="test_machine_health_monitoring_rules" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine&#10;instance_id&#10;  Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;provider_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 947073)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;instance_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 947073)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;image_id&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 947073)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_business_rules.py:463: in test_machine_health_monitoring_rules
    machine = Machine(
src/domain/machine/aggregate.py:69: in __init__
    super().__init__(**data)
src/domain/base/entity.py:41: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine
E   instance_id
E     Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   provider_type
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 947073)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   instance_type
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 947073)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   image_id
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 947073)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestMachineBusinessRules" name="test_machine_cost_tracking_rules" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine&#10;instance_id&#10;  Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;provider_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 956193)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;instance_type&#10;  Input should be a valid dictionary or instance of InstanceType [type=model_type, input_value='t2.micro', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;image_id&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 956193)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_business_rules.py:480: in test_machine_cost_tracking_rules
    machine = Machine(
src/domain/machine/aggregate.py:69: in __init__
    super().__init__(**data)
src/domain/base/entity.py:41: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine
E   instance_id
E     Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   provider_type
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 956193)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   instance_type
E     Input should be a valid dictionary or instance of InstanceType [type=model_type, input_value='t2.micro', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   image_id
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 956193)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestCrossAggregateBusinessRules" name="test_request_machine_count_matches_template_limits" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:511: in test_request_machine_count_matches_template_limits
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestCrossAggregateBusinessRules" name="test_machine_template_compatibility" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine&#10;instance_id&#10;  Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;provider_type&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 971542)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;instance_type&#10;  Input should be a valid dictionary or instance of InstanceType [type=model_type, input_value='t2.micro', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;image_id&#10;  Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 971542)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_business_rules.py:532: in test_machine_template_compatibility
    machine = Machine(
src/domain/machine/aggregate.py:69: in __init__
    super().__init__(**data)
src/domain/base/entity.py:41: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine
E   instance_id
E     Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-123', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   provider_type
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 971542)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   instance_type
E     Input should be a valid dictionary or instance of InstanceType [type=model_type, input_value='t2.micro', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   image_id
E     Field required [type=missing, input_value={'instance_id': 'i-123', ...14, 23, 23, 31, 971542)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestCrossAggregateBusinessRules" name="test_request_completion_requires_all_machines" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:545: in test_request_completion_requires_all_machines
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestCrossAggregateBusinessRules" name="test_return_request_machines_must_exist" time="0.001"><failure message="TypeError: Request.create_return_request() got an unexpected keyword argument 'machine_ids'. Did you mean 'machine_refs'?">tests/unit/domain/test_business_rules.py:571: in test_return_request_machines_must_exist
    request = Request.create_return_request(
E   TypeError: Request.create_return_request() got an unexpected keyword argument 'machine_ids'. Did you mean 'machine_refs'?</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestBusinessRuleEnforcement" name="test_invariants_maintained_across_operations" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:589: in test_invariants_maintained_across_operations
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestBusinessRuleEnforcement" name="test_business_rules_prevent_invalid_states" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:604: in test_business_rules_prevent_invalid_states
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_business_rules.TestBusinessRuleEnforcement" name="test_validation_happens_at_aggregate_boundaries" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_business_rules.py:623: in test_validation_happens_at_aggregate_boundaries
    Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventGeneration" name="test_request_aggregate_generates_created_event" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:29: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventGeneration" name="test_request_status_change_generates_event" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:45: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventGeneration" name="test_request_completion_generates_event" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:63: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventGeneration" name="test_request_failure_generates_event" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:84: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventGeneration" name="test_return_request_generates_events" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:103: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventProperties" name="test_domain_events_are_immutable" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:121: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventProperties" name="test_domain_events_have_timestamps" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:138: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventProperties" name="test_domain_events_have_unique_ids" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:152: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestDomainEventProperties" name="test_domain_events_serialization" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:174: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventInheritanceHierarchy" name="test_request_events_inherit_from_domain_event" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:201: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventInheritanceHierarchy" name="test_domain_event_inheritance_chain" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:213: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventInheritanceHierarchy" name="test_event_type_identification" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:226: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventAggregateInteraction" name="test_aggregate_event_collection" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:252: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventAggregateInteraction" name="test_multiple_operations_generate_multiple_events" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:267: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventAggregateInteraction" name="test_event_ordering" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:287: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventBusinessLogic" name="test_event_contains_business_relevant_data" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:309: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventBusinessLogic" name="test_status_change_event_captures_transition" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:332: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventBusinessLogic" name="test_completion_event_captures_outcome" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:351: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventSystemIntegration" name="test_events_support_audit_trail" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:380: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventSystemIntegration" name="test_events_support_replay" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:401: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_domain_events.TestEventSystemIntegration" name="test_event_deduplication_support" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/domain/test_domain_events.py:431: Domain imports not available: cannot import name 'BaseEvent' from 'src.domain.base.events.base_events' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/base_events.py)</skipped></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_creation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:60: in test_machine_creation
    instance_id=InstanceId("i-1234567890abcdef0"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_creation_minimal" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:91: in test_machine_creation_minimal
    instance_id=InstanceId("i-abcdef1234567890"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_status_transitions" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:114: in test_machine_status_transitions
    instance_id=InstanceId("i-1111222233334444"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_failure_transitions" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:148: in test_machine_failure_transitions
    instance_id=InstanceId("i-5555666677778888"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_termination" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:168: in test_machine_termination
    instance_id=InstanceId("i-9999aaaabbbbcccc"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_invalid_status_transitions" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:191: in test_invalid_status_transitions
    instance_id=InstanceId("i-ddddeeeeffffaaaa"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_health_monitoring" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:213: in test_machine_health_monitoring
    instance_id=InstanceId("i-1234abcd5678efgh"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_performance_metrics" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:248: in test_machine_performance_metrics
    instance_id=InstanceId("i-abcd1234efgh5678"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_network_configuration" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:287: in test_machine_network_configuration
    instance_id=InstanceId("i-network123456789"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_uptime_calculation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:312: in test_machine_uptime_calculation
    instance_id=InstanceId("i-uptime123456789"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_cost_tracking" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:334: in test_machine_cost_tracking
    instance_id=InstanceId("i-cost123456789abc"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_validation_required_fields" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:371: in test_machine_validation_required_fields
    "instance_id": InstanceId("i-1234567890abcdef0"),
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_validation_instance_id" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:393: in test_machine_validation_instance_id
    instance_id=InstanceId("invalid-instance-id"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_validation_ip_addresses" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:409: in test_machine_validation_ip_addresses
    instance_id=InstanceId("i-1234567890abcdef0"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_tags_operations" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:441: in test_machine_tags_operations
    instance_id=InstanceId("i-tags123456789abc"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_equality" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:472: in test_machine_equality
    instance_id=InstanceId("i-1234567890abcdef0"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_hash" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:508: in test_machine_hash
    instance_id=InstanceId("i-1234567890abcdef0"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_serialization" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:532: in test_machine_serialization
    instance_id=InstanceId("i-1234567890abcdef0"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_deserialization" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine&#10;instance_id&#10;  Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-1234567890abcdef0', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;provider_type&#10;  Field required [type=missing, input_value={'id': 'machine-001', 'in... '2023-01-01T00:00:00Z'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;instance_type&#10;  Input should be a valid dictionary or instance of InstanceType [type=model_type, input_value='t2.micro', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/model_type&#10;image_id&#10;  Field required [type=missing, input_value={'id': 'machine-001', 'in... '2023-01-01T00:00:00Z'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_machine_aggregate.py:577: in test_machine_deserialization
    machine = Machine(**machine_dict)
              ^^^^^^^^^^^^^^^^^^^^^^^
src/domain/machine/aggregate.py:69: in __init__
    super().__init__(**data)
src/domain/base/entity.py:41: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for Machine
E   instance_id
E     Input should be a valid dictionary or instance of InstanceId [type=model_type, input_value='i-1234567890abcdef0', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   provider_type
E     Field required [type=missing, input_value={'id': 'machine-001', 'in... '2023-01-01T00:00:00Z'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   instance_type
E     Input should be a valid dictionary or instance of InstanceType [type=model_type, input_value='t2.micro', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/model_type
E   image_id
E     Field required [type=missing, input_value={'id': 'machine-001', 'in... '2023-01-01T00:00:00Z'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineAggregate" name="test_machine_string_representation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:594: in test_machine_string_representation
    instance_id=InstanceId("i-1234567890abcdef0"),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineValueObjects" name="test_machine_id_creation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:618: in test_machine_id_creation
    machine_id = MachineId("machine-001")
                 ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineValueObjects" name="test_machine_status_enum" time="0.001"><failure message="AttributeError: type object 'MachineStatus' has no attribute 'LAUNCHING'">tests/unit/domain/test_machine_aggregate.py:625: in test_machine_status_enum
    assert MachineStatus.LAUNCHING.value == "launching"
           ^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: type object 'MachineStatus' has no attribute 'LAUNCHING'</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineValueObjects" name="test_health_status_enum" time="0.001"><failure message="AttributeError: 'str' object has no attribute 'value'">tests/unit/domain/test_machine_aggregate.py:635: in test_health_status_enum
    assert HealthStatus.UNKNOWN.value == "unknown"
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'str' object has no attribute 'value'</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineValueObjects" name="test_performance_metrics_creation" time="0.001"><failure message="AttributeError: 'PerformanceMetrics' object has no attribute 'cpu_utilization'">tests/unit/domain/test_machine_aggregate.py:651: in test_performance_metrics_creation
    assert metrics.cpu_utilization == 45.2
           ^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'PerformanceMetrics' object has no attribute 'cpu_utilization'</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineValueObjects" name="test_network_configuration_creation" time="0.001"><failure message="AttributeError: 'NetworkConfiguration' object has no attribute 'vpc_id'">tests/unit/domain/test_machine_aggregate.py:668: in test_network_configuration_creation
    assert config.vpc_id == "vpc-12345678"
           ^^^^^^^^^^^^^
E   AttributeError: 'NetworkConfiguration' object has no attribute 'vpc_id'</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineExceptions" name="test_machine_validation_error" time="0.001" /><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineExceptions" name="test_machine_not_found_error" time="0.001"><failure message="TypeError: MachineNotFoundError.__init__() got multiple values for argument 'machine_id'">tests/unit/domain/test_machine_aggregate.py:689: in test_machine_not_found_error
    error = MachineNotFoundError("Machine not found", machine_id="machine-001")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: MachineNotFoundError.__init__() got multiple values for argument 'machine_id'</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineExceptions" name="test_invalid_machine_state_error" time="0.001"><failure message="TypeError: InvalidMachineStateError.__init__() got multiple values for argument 'current_state'">tests/unit/domain/test_machine_aggregate.py:695: in test_invalid_machine_state_error
    error = InvalidMachineStateError(
E   TypeError: InvalidMachineStateError.__init__() got multiple values for argument 'current_state'</failure></testcase><testcase classname="tests.unit.domain.test_machine_aggregate.TestMachineExceptions" name="test_machine_operation_error" time="0.001"><failure message="TypeError: MachineOperationError.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_machine_aggregate.py:706: in test_machine_operation_error
    error = MachineOperationError(
E   TypeError: MachineOperationError.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_with_all_provider_fields" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_with_partial_provider_fields" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_without_provider_fields" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_provider_type_extraction_from_name" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_provider_type_extraction_provider1" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_provider_type_extraction_single_word" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_provider_name_validation_valid" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_provider_name_validation_invalid" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_provider_type_validation_valid" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_provider_type_validation_invalid" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateMultiProviderFields" name="test_template_existing_validation_still_works" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">tests/unit/domain/test_multi_provider_domain.py:159: in test_template_existing_validation_still_works
    with pytest.raises(ValueError, match="image_id is required"):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.unit.domain.test_multi_provider_domain.TestRequestMultiProviderFields" name="test_request_creation_with_provider_instance" time="0.002" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestRequestMultiProviderFields" name="test_request_creation_without_provider_instance" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestRequestMultiProviderFields" name="test_request_creation_with_metadata" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestRequestMultiProviderFields" name="test_request_serialization_with_provider_fields" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateAdditionalMultiProviderFields" name="test_template_with_additional_provider_fields" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateAdditionalMultiProviderFields" name="test_template_without_additional_provider_fields" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestTemplateAdditionalMultiProviderFields" name="test_template_additional_defaults" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestMultiProviderBackwardCompatibility" name="test_existing_template_creation_still_works" time="0.001" /><testcase classname="tests.unit.domain.test_multi_provider_domain.TestMultiProviderBackwardCompatibility" name="test_existing_request_creation_still_works" time="0.001" /><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_create_new_request" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:56: in test_create_new_request
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_create_return_request" time="0.001"><failure message="TypeError: Request.create_return_request() got an unexpected keyword argument 'machine_ids'. Did you mean 'machine_refs'?">tests/unit/domain/test_request_aggregate.py:79: in test_create_return_request
    request = Request.create_return_request(
E   TypeError: Request.create_return_request() got an unexpected keyword argument 'machine_ids'. Did you mean 'machine_refs'?</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_status_transitions" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:99: in test_request_status_transitions
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_failure_transition" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:120: in test_request_failure_transition
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_cancellation" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:137: in test_request_cancellation
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_invalid_status_transitions" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:150: in test_invalid_status_transitions
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_validation_machine_count" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:170: in test_request_validation_machine_count
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_validation_priority" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:190: in test_request_validation_priority
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_validation_required_fields" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:213: in test_request_validation_required_fields
    Request.create_new_request(template_id="", machine_count=1, requester_id="user-123")
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_timeout_handling" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:225: in test_request_timeout_handling
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_progress_tracking" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:247: in test_request_progress_tracking
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_retry_logic" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:268: in test_request_retry_logic
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_configuration" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:302: in test_request_configuration
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_tags_operations" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:315: in test_request_tags_operations
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_equality" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:337: in test_request_equality
    request1 = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_hash" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:364: in test_request_hash
    request1 = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_serialization" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:383: in test_request_serialization
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_deserialization" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 3 validation errors for Request&#10;request_id&#10;  Field required [type=missing, input_value={'id': 'req-12345678', 't... '2023-01-01T00:00:00Z'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;request_type&#10;  Input should be 'acquire' or 'return' [type=enum, input_value='new', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/enum&#10;provider_type&#10;  Field required [type=missing, input_value={'id': 'req-12345678', 't... '2023-01-01T00:00:00Z'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_request_aggregate.py:422: in test_request_deserialization
    request = Request(**request_dict)
              ^^^^^^^^^^^^^^^^^^^^^^^
src/domain/request/aggregate.py:83: in __init__
    super().__init__(**data)
src/domain/base/entity.py:41: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for Request
E   request_id
E     Field required [type=missing, input_value={'id': 'req-12345678', 't... '2023-01-01T00:00:00Z'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   request_type
E     Input should be 'acquire' or 'return' [type=enum, input_value='new', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.9/v/enum
E   provider_type
E     Field required [type=missing, input_value={'id': 'req-12345678', 't... '2023-01-01T00:00:00Z'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_domain_events" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:437: in test_request_domain_events
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestAggregate" name="test_request_string_representation" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/domain/test_request_aggregate.py:460: in test_request_string_representation
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestValueObjects" name="test_request_id_creation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_request_aggregate.py:480: in test_request_id_creation
    request_id = RequestId("req-12345678")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestValueObjects" name="test_request_status_enum" time="0.001"><failure message="AttributeError: type object 'RequestStatus' has no attribute 'PROCESSING'">tests/unit/domain/test_request_aggregate.py:487: in test_request_status_enum
    assert RequestStatus.PROCESSING.value == "processing"
           ^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: type object 'RequestStatus' has no attribute 'PROCESSING'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestValueObjects" name="test_request_type_enum" time="0.001"><failure message="AttributeError: type object 'RequestType' has no attribute 'NEW'">tests/unit/domain/test_request_aggregate.py:498: in test_request_type_enum
    assert RequestType.NEW.value == "new"
           ^^^^^^^^^^^^^^^
E   AttributeError: type object 'RequestType' has no attribute 'NEW'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestValueObjects" name="test_priority_validation" time="0.001"><failure message="Failed: DID NOT RAISE any of (&lt;class 'ValueError'&gt;, &lt;class 'src.domain.request.exceptions.RequestValidationError'&gt;)">tests/unit/domain/test_request_aggregate.py:515: in test_priority_validation
    with pytest.raises((ValueError, RequestValidationError)):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE any of (&lt;class 'ValueError'&gt;, &lt;class 'src.domain.request.exceptions.RequestValidationError'&gt;)</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestValueObjects" name="test_machine_count_validation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_request_aggregate.py:523: in test_machine_count_validation
    mc = MachineCount(count)
         ^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestValueObjects" name="test_request_configuration_creation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_request_aggregate.py:540: in test_request_configuration_creation
    config = RequestConfiguration(config_dict)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestValueObjects" name="test_request_configuration_operations" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_request_aggregate.py:548: in test_request_configuration_operations
    config = RequestConfiguration({"key1": "value1"})
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestExceptions" name="test_request_validation_error" time="0.001" /><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestExceptions" name="test_request_not_found_error" time="0.001"><failure message="TypeError: RequestNotFoundError.__init__() got multiple values for argument 'request_id'">tests/unit/domain/test_request_aggregate.py:579: in test_request_not_found_error
    error = RequestNotFoundError("Request not found", request_id="req-123")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: RequestNotFoundError.__init__() got multiple values for argument 'request_id'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestExceptions" name="test_invalid_request_state_error" time="0.001"><failure message="TypeError: InvalidRequestStateError.__init__() got multiple values for argument 'current_state'">tests/unit/domain/test_request_aggregate.py:585: in test_invalid_request_state_error
    error = InvalidRequestStateError(
E   TypeError: InvalidRequestStateError.__init__() got multiple values for argument 'current_state'</failure></testcase><testcase classname="tests.unit.domain.test_request_aggregate.TestRequestExceptions" name="test_request_processing_error" time="0.001"><failure message="TypeError: DomainException.__init__() got an unexpected keyword argument 'request_id'">tests/unit/domain/test_request_aggregate.py:596: in test_request_processing_error
    error = RequestProcessingError("Failed to process request", request_id="req-123")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: DomainException.__init__() got an unexpected keyword argument 'request_id'</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_creation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:41: in test_template_creation
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_with_minimal_data" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:68: in test_template_with_minimal_data
    instance_type=InstanceType("t3.small"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_validation_valid_provider_apis" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:90: in test_template_validation_valid_provider_apis
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_validation_invalid_provider_api" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:104: in test_template_validation_invalid_provider_api
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_validation_empty_subnet_ids" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:117: in test_template_validation_empty_subnet_ids
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_validation_empty_security_group_ids" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:130: in test_template_validation_empty_security_group_ids
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_validation_invalid_ami_id" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:146: in test_template_validation_invalid_ami_id
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_update_fields" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:158: in test_template_update_fields
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_add_subnet" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:183: in test_template_add_subnet
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_add_security_group" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:200: in test_template_add_security_group
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_user_data_encoding" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:225: in test_template_user_data_encoding
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_tags_operations" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:239: in test_template_tags_operations
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_equality" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:265: in test_template_equality
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_hash" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:301: in test_template_hash
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_string_representation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:325: in test_template_string_representation
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_serialization" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:345: in test_template_serialization
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_deserialization" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for Template&#10;template_id&#10;  Field required [type=missing, input_value={'id': 'template-001', 'n... '2023-01-01T00:00:00Z'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/domain/test_template_aggregate.py:388: in test_template_deserialization
    template = Template(**template_dict)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
src/domain/template/aggregate.py:98: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for Template
E   template_id
E     Field required [type=missing, input_value={'id': 'template-001', 'n... '2023-01-01T00:00:00Z'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_validation_comprehensive" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:419: in test_template_validation_comprehensive
    "instance_type": InstanceType("t2.micro"),
                     ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateAggregate" name="test_template_with_multiple_subnets_and_security_groups" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:439: in test_template_with_multiple_subnets_and_security_groups
    instance_type=InstanceType("t2.micro"),
                  ^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateValueObjects" name="test_template_id_creation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:460: in test_template_id_creation
    template_id = TemplateId("template-001")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateValueObjects" name="test_template_id_validation" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:469: in test_template_id_validation
    template_id = TemplateId(valid_id)
                  ^^^^^^^^^^^^^^^^^^^^
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateValueObjects" name="test_template_id_invalid" time="0.001"><failure message="TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given">tests/unit/domain/test_template_aggregate.py:478: in test_template_id_invalid
    TemplateId(invalid_id)
E   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateValueObjects" name="test_template_name_creation" time="0.001"><failure message="AssertionError: assert '&lt;tests.unit.... 0x120992270&gt;' == 'My Test Template'&#10;  &#10;  #x1B[0m#x1B[91m- My Test Template#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ &lt;tests.unit.domain.test_template_aggregate.TemplateName object at 0x120992270&gt;#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/domain/test_template_aggregate.py:483: in test_template_name_creation
    assert str(template_name) == "My Test Template"
E   AssertionError: assert '&lt;tests.unit.... 0x120992270&gt;' == 'My Test Template'
E     
E     #x1B[0m#x1B[91m- My Test Template#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ &lt;tests.unit.domain.test_template_aggregate.TemplateName object at 0x120992270&gt;#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateValueObjects" name="test_template_name_validation" time="0.001" /><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateValueObjects" name="test_template_name_invalid" time="0.001" /><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateExceptions" name="test_template_validation_error" time="0.001" /><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateExceptions" name="test_template_not_found_error" time="0.001"><failure message="TypeError: TemplateNotFoundError.__init__() got multiple values for argument 'template_id'">tests/unit/domain/test_template_aggregate.py:521: in test_template_not_found_error
    error = TemplateNotFoundError("Template not found", template_id="template-001")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: TemplateNotFoundError.__init__() got multiple values for argument 'template_id'</failure></testcase><testcase classname="tests.unit.domain.test_template_aggregate.TestTemplateExceptions" name="test_template_not_found_error_without_id" time="0.001"><failure message="assert &quot;Template wit...nd' not found&quot; == 'Template not found'&#10;  &#10;  #x1B[0m#x1B[91m- Template not found#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ Template with ID 'Template not found' not found#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/domain/test_template_aggregate.py:528: in test_template_not_found_error_without_id
    assert str(error) == "Template not found"
E   assert "Template wit...nd' not found" == 'Template not found'
E     
E     #x1B[0m#x1B[91m- Template not found#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ Template with ID 'Template not found' not found#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_initialization" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_basic_registration_and_resolution" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_dependency_injection_flow" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_singleton_behavior" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_factory_registration" time="0.001"><failure message="src.infrastructure.di.exceptions.FactoryError: Failed to resolve dependency FactoryProduct: Factory failed for FactoryProduct: TestDIContainer.test_factory_registration.&lt;locals&gt;.product_factory() takes 0 positional arguments but 1 was given">src/infrastructure/di/components/dependency_resolver.py:124: in _create_from_registration
    return registration.factory(container)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: TestDIContainer.test_factory_registration.&lt;locals&gt;.product_factory() takes 0 positional arguments but 1 was given

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/di/test_container.py:106: in test_factory_registration
    instance1 = self.container.get(FactoryProduct)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:126: in _create_from_registration
    raise FactoryError(
E   src.infrastructure.di.exceptions.FactoryError: Failed to resolve dependency FactoryProduct: Factory failed for FactoryProduct: TestDIContainer.test_factory_registration.&lt;locals&gt;.product_factory() takes 0 positional arguments but 1 was given</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_instance_registration" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_interface_to_implementation_mapping" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_cqrs_handler_registration" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_multiple_event_handlers" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_optional_dependency_resolution" time="0.001"><failure message="assert &lt;test_container.TestDIContainer.test_optional_dependency_resolution.&lt;locals&gt;.OptionalService object at 0x1209912b0&gt; is None">tests/unit/infrastructure/di/test_container.py:238: in test_optional_dependency_resolution
    assert optional_instance is None
E   assert &lt;test_container.TestDIContainer.test_optional_dependency_resolution.&lt;locals&gt;.OptionalService object at 0x1209912b0&gt; is None</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_get_all_dependencies" time="0.001"><failure message="assert 1 == 0&#10; +  where 1 = len([&lt;test_container.TestDIContainer.test_get_all_dependencies.&lt;locals&gt;.MultiService object at 0x120992e40&gt;])">tests/unit/infrastructure/di/test_container.py:256: in test_get_all_dependencies
    assert len(all_instances) == 0
E   assert 1 == 0
E    +  where 1 = len([&lt;test_container.TestDIContainer.test_get_all_dependencies.&lt;locals&gt;.MultiService object at 0x120992e40&gt;])</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_unregister_dependency" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_clear_container" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_error_handling" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'src.infrastructure.di.exceptions.DependencyResolutionError'&gt;">tests/unit/infrastructure/di/test_container.py:330: in test_error_handling
    with pytest.raises(DependencyResolutionError):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'src.infrastructure.di.exceptions.DependencyResolutionError'&gt;</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_circular_dependency_detection" time="0.001"><failure message="src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency ServiceA: Failed to resolve constructor parameters for ServiceA: name 'ServiceB' is not defined">src/infrastructure/di/components/dependency_resolver.py:193: in _resolve_constructor_parameters
    type_hints = get_type_hints(cls.__init__)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:2499: in get_type_hints
    hints[name] = _eval_type(value, globalns, localns, type_params)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:474: in _eval_type
    return t._evaluate(globalns, localns, type_params, recursive_guard=recursive_guard)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1081: in _evaluate
    eval(self.__forward_code__, globalns, localns),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'ServiceB' is not defined

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/di/test_container.py:356: in test_circular_dependency_detection
    self.container.get(ServiceA)
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:256: in _resolve_constructor_parameters
    raise DependencyResolutionError(
E   src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency ServiceA: Failed to resolve constructor parameters for ServiceA: name 'ServiceB' is not defined</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_performance_monitoring" time="0.014" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_thread_safety" time="0.002" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_injectable_class_registration" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainer" name="test_get_registrations" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestTimedOperation" name="test_timed_operation_fast" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_container.TestTimedOperation" name="test_timed_operation_slow" time="0.117" /><testcase classname="tests.unit.infrastructure.di.test_container.TestTimedOperation" name="test_timed_operation_with_exception" time="0.002" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainerIntegration" name="test_complex_dependency_graph" time="0.002" /><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainerIntegration" name="test_mixed_registration_types" time="0.002"><failure message="src.infrastructure.di.exceptions.FactoryError: Failed to resolve dependency FactoryService: Factory failed for FactoryService: TestDIContainerIntegration.test_mixed_registration_types.&lt;locals&gt;.&lt;lambda&gt;() takes 0 positional arguments but 1 was given">src/infrastructure/di/components/dependency_resolver.py:124: in _create_from_registration
    return registration.factory(container)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: TestDIContainerIntegration.test_mixed_registration_types.&lt;locals&gt;.&lt;lambda&gt;() takes 0 positional arguments but 1 was given

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/di/test_container.py:577: in test_mixed_registration_types
    composite = self.container.get(CompositeService)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:126: in _create_from_registration
    raise FactoryError(
E   src.infrastructure.di.exceptions.FactoryError: Failed to resolve dependency FactoryService: Factory failed for FactoryService: TestDIContainerIntegration.test_mixed_registration_types.&lt;locals&gt;.&lt;lambda&gt;() takes 0 positional arguments but 1 was given</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_container.TestDIContainerIntegration" name="test_cqrs_with_dependencies" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_initialization" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_register_command_handler" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_register_query_handler" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_register_event_handler" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_register_multiple_event_handlers" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_register_duplicate_event_handler" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_get_nonexistent_command_handler" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_get_nonexistent_query_handler" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_get_nonexistent_event_handlers" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_clear_registry" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_get_stats" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_thread_safety" time="0.002"><failure message="AssertionError: Thread safety errors: [&quot;Thread 0: 'str' object has no attribute '__name__'&quot;, &quot;Thread 1: 'str' object has no attribute '__name__'&quot;, &quot;Thread 2: 'str' object has no attribute '__name__'&quot;, &quot;Thread 3: 'str' object has no attribute '__name__'&quot;, &quot;Thread 4: 'str' object has no attribute '__name__'&quot;, &quot;Thread 5: 'str' object has no attribute '__name__'&quot;, &quot;Thread 6: 'str' object has no attribute '__name__'&quot;, &quot;Thread 7: 'str' object has no attribute '__name__'&quot;, &quot;Thread 8: 'str' object has no attribute '__name__'&quot;, &quot;Thread 9: 'str' object has no attribute '__name__'&quot;]&#10;assert 10 == 0&#10; +  where 10 = len([&quot;Thread 0: 'str' object has no attribute '__name__'&quot;, &quot;Thread 1: 'str' object has no attribute '__name__'&quot;, &quot;Thread 2: 'str' object has no attribute '__name__'&quot;, &quot;Thread 3: 'str' object has no attribute '__name__'&quot;, &quot;Thread 4: 'str' object has no attribute '__name__'&quot;, &quot;Thread 5: 'str' object has no attribute '__name__'&quot;, ...])">tests/unit/infrastructure/di/test_cqrs_registry.py:299: in test_thread_safety
    assert len(errors) == 0, f"Thread safety errors: {errors}"
E   AssertionError: Thread safety errors: ["Thread 0: 'str' object has no attribute '__name__'", "Thread 1: 'str' object has no attribute '__name__'", "Thread 2: 'str' object has no attribute '__name__'", "Thread 3: 'str' object has no attribute '__name__'", "Thread 4: 'str' object has no attribute '__name__'", "Thread 5: 'str' object has no attribute '__name__'", "Thread 6: 'str' object has no attribute '__name__'", "Thread 7: 'str' object has no attribute '__name__'", "Thread 8: 'str' object has no attribute '__name__'", "Thread 9: 'str' object has no attribute '__name__'"]
E   assert 10 == 0
E    +  where 10 = len(["Thread 0: 'str' object has no attribute '__name__'", "Thread 1: 'str' object has no attribute '__name__'", "Thread 2: 'str' object has no attribute '__name__'", "Thread 3: 'str' object has no attribute '__name__'", "Thread 4: 'str' object has no attribute '__name__'", "Thread 5: 'str' object has no attribute '__name__'", ...])</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_handler_overwrite" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistry" name="test_event_handler_list_isolation" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistryEdgeCases" name="test_register_with_none_types" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistryEdgeCases" name="test_empty_event_handlers_list" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_cqrs_registry.TestCQRSHandlerRegistryEdgeCases" name="test_stats_consistency" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_initialization" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_resolve_simple_class" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_resolve_class_with_dependencies" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_resolve_registered_singleton" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_resolve_registered_factory" time="0.001"><failure message="src.infrastructure.di.exceptions.FactoryError: Failed to resolve dependency FactoryClass: Factory failed for FactoryClass: TestDependencyResolver.test_resolve_registered_factory.&lt;locals&gt;.factory() takes 0 positional arguments but 1 was given">src/infrastructure/di/components/dependency_resolver.py:124: in _create_from_registration
    return registration.factory(container)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: TestDependencyResolver.test_resolve_registered_factory.&lt;locals&gt;.factory() takes 0 positional arguments but 1 was given

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/di/test_dependency_resolver.py:94: in test_resolve_registered_factory
    instance = self.resolver.resolve(FactoryClass)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:126: in _create_from_registration
    raise FactoryError(
E   src.infrastructure.di.exceptions.FactoryError: Failed to resolve dependency FactoryClass: Factory failed for FactoryClass: TestDependencyResolver.test_resolve_registered_factory.&lt;locals&gt;.factory() takes 0 positional arguments but 1 was given</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_resolve_registered_instance" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_resolve_interface_to_implementation" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_circular_dependency_detection" time="0.001"><failure message="src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency ClassA: Failed to resolve constructor parameters for ClassA: name 'ClassB' is not defined">src/infrastructure/di/components/dependency_resolver.py:193: in _resolve_constructor_parameters
    type_hints = get_type_hints(cls.__init__)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:2499: in get_type_hints
    hints[name] = _eval_type(value, globalns, localns, type_params)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:474: in _eval_type
    return t._evaluate(globalns, localns, type_params, recursive_guard=recursive_guard)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1081: in _evaluate
    eval(self.__forward_code__, globalns, localns),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'ClassB' is not defined

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/di/test_dependency_resolver.py:144: in test_circular_dependency_detection
    self.resolver.resolve(ClassA)
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:256: in _resolve_constructor_parameters
    raise DependencyResolutionError(
E   src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency ClassA: Failed to resolve constructor parameters for ClassA: name 'ClassB' is not defined</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_untyped_parameter_error" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_optional_parameters" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_factory_with_dependencies" time="0.001"><failure message="AssertionError: assert False&#10; +  where False = isinstance(&lt;src.infrastructure.di.container.DIContainer object at 0x120af0cd0&gt;, &lt;class 'test_dependency_resolver.TestDependencyResolver.test_factory_with_dependencies.&lt;locals&gt;.Dependency'&gt;)&#10; +    where &lt;src.infrastructure.di.container.DIContainer object at 0x120af0cd0&gt; = &lt;test_dependency_resolver.TestDependencyResolver.test_factory_with_dependencies.&lt;locals&gt;.FactoryProduct object at 0x120990440&gt;.dependency">tests/unit/infrastructure/di/test_dependency_resolver.py:193: in test_factory_with_dependencies
    assert isinstance(instance.dependency, Dependency)
E   AssertionError: assert False
E    +  where False = isinstance(&lt;src.infrastructure.di.container.DIContainer object at 0x120af0cd0&gt;, &lt;class 'test_dependency_resolver.TestDependencyResolver.test_factory_with_dependencies.&lt;locals&gt;.Dependency'&gt;)
E    +    where &lt;src.infrastructure.di.container.DIContainer object at 0x120af0cd0&gt; = &lt;test_dependency_resolver.TestDependencyResolver.test_factory_with_dependencies.&lt;locals&gt;.FactoryProduct object at 0x120990440&gt;.dependency</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_factory_error_handling" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_injectable_auto_registration" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_string_annotation_resolution" time="0.001"><failure message="src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency TestClass: Failed to resolve string annotation 'str': Could not resolve annotation: str">src/infrastructure/di/components/dependency_resolver.py:338: in _resolve_string_annotation
    return ast.literal_eval(annotation)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:110: in literal_eval
    return _convert(node_or_string)
           ^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:109: in _convert
    return _convert_signed_num(node)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:83: in _convert_signed_num
    return _convert_num(node)
           ^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:74: in _convert_num
    _raise_malformed_node(node)
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/ast.py:71: in _raise_malformed_node
    raise ValueError(msg + f': {node!r}')
E   ValueError: malformed node or string on line 1: &lt;ast.Name object at 0x12070a590&gt;

During handling of the above exception, another exception occurred:
src/infrastructure/di/components/dependency_resolver.py:353: in _resolve_string_annotation
    raise NameError(f"Cannot resolve annotation: {annotation}")
E   NameError: Cannot resolve annotation: str

During handling of the above exception, another exception occurred:
src/infrastructure/di/components/dependency_resolver.py:369: in _resolve_string_annotation
    raise ValueError(f"Could not resolve annotation: {annotation}")
E   ValueError: Could not resolve annotation: str

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/di/test_dependency_resolver.py:244: in test_string_annotation_resolution
    resolved_type = self.resolver._resolve_string_annotation("str", TestClass)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:372: in _resolve_string_annotation
    raise DependencyResolutionError(
E   src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency TestClass: Failed to resolve string annotation 'str': Could not resolve annotation: str</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_clear_cache" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_complex_dependency_chain" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_thread_safety" time="0.002" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolver" name="test_singleton_thread_safety" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverEdgeCases" name="test_resolve_with_none_type" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverEdgeCases" name="test_resolve_builtin_types" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'src.infrastructure.di.exceptions.DependencyResolutionError'&gt;">tests/unit/infrastructure/di/test_dependency_resolver.py:382: in test_resolve_builtin_types
    with pytest.raises(DependencyResolutionError):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'src.infrastructure.di.exceptions.DependencyResolutionError'&gt;</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverEdgeCases" name="test_resolve_abstract_class" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverEdgeCases" name="test_dependency_chain_tracking" time="0.001"><failure message="src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency ClassA: Failed to resolve constructor parameters for ClassA: name 'ClassB' is not defined">src/infrastructure/di/components/dependency_resolver.py:193: in _resolve_constructor_parameters
    type_hints = get_type_hints(cls.__init__)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:2499: in get_type_hints
    hints[name] = _eval_type(value, globalns, localns, type_params)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:474: in _eval_type
    return t._evaluate(globalns, localns, type_params, recursive_guard=recursive_guard)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1081: in _evaluate
    eval(self.__forward_code__, globalns, localns),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'ClassB' is not defined

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/di/test_dependency_resolver.py:416: in test_dependency_chain_tracking
    self.resolver.resolve(ClassA)
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:256: in _resolve_constructor_parameters
    raise DependencyResolutionError(
E   src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency ClassA: Failed to resolve constructor parameters for ClassA: name 'ClassB' is not defined</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverEdgeCases" name="test_factory_with_no_parameters" time="0.001"><failure message="src.infrastructure.di.exceptions.FactoryError: Failed to resolve dependency SimpleProduct: Factory failed for SimpleProduct: TestDependencyResolverEdgeCases.test_factory_with_no_parameters.&lt;locals&gt;.simple_factory() takes 0 positional arguments but 1 was given">src/infrastructure/di/components/dependency_resolver.py:124: in _create_from_registration
    return registration.factory(container)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: TestDependencyResolverEdgeCases.test_factory_with_no_parameters.&lt;locals&gt;.simple_factory() takes 0 positional arguments but 1 was given

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/di/test_dependency_resolver.py:435: in test_factory_with_no_parameters
    instance = self.resolver.resolve(SimpleProduct)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:126: in _create_from_registration
    raise FactoryError(
E   src.infrastructure.di.exceptions.FactoryError: Failed to resolve dependency SimpleProduct: Factory failed for SimpleProduct: TestDependencyResolverEdgeCases.test_factory_with_no_parameters.&lt;locals&gt;.simple_factory() takes 0 positional arguments but 1 was given</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverEdgeCases" name="test_registration_with_complex_lifecycle" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverEdgeCases" name="test_error_propagation" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverIntegration" name="test_integration_with_service_registry" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_dependency_resolver.TestDependencyResolverIntegration" name="test_integration_with_cqrs_registry" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_initialization" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_register_singleton_class" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_register_singleton_with_instance" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_register_singleton_with_factory" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_register_factory" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_register_instance" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_register_type_mapping" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_register_dependency_registration" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_register_injectable_class" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_unregister" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_clear" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_singleton_instance_caching" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_get_stats" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_thread_safety" time="0.002"><failure message="AssertionError: Thread safety errors: [&quot;Thread 0: 'str' object has no attribute '__name__'&quot;, &quot;Thread 1: 'str' object has no attribute '__name__'&quot;, &quot;Thread 2: 'str' object has no attribute '__name__'&quot;, &quot;Thread 3: 'str' object has no attribute '__name__'&quot;, &quot;Thread 4: 'str' object has no attribute '__name__'&quot;, &quot;Thread 5: 'str' object has no attribute '__name__'&quot;, &quot;Thread 6: 'str' object has no attribute '__name__'&quot;, &quot;Thread 7: 'str' object has no attribute '__name__'&quot;, &quot;Thread 8: 'str' object has no attribute '__name__'&quot;, &quot;Thread 9: 'str' object has no attribute '__name__'&quot;]&#10;assert 10 == 0&#10; +  where 10 = len([&quot;Thread 0: 'str' object has no attribute '__name__'&quot;, &quot;Thread 1: 'str' object has no attribute '__name__'&quot;, &quot;Thread 2: 'str' object has no attribute '__name__'&quot;, &quot;Thread 3: 'str' object has no attribute '__name__'&quot;, &quot;Thread 4: 'str' object has no attribute '__name__'&quot;, &quot;Thread 5: 'str' object has no attribute '__name__'&quot;, ...])">tests/unit/infrastructure/di/test_service_registry.py:272: in test_thread_safety
    assert len(errors) == 0, f"Thread safety errors: {errors}"
E   AssertionError: Thread safety errors: ["Thread 0: 'str' object has no attribute '__name__'", "Thread 1: 'str' object has no attribute '__name__'", "Thread 2: 'str' object has no attribute '__name__'", "Thread 3: 'str' object has no attribute '__name__'", "Thread 4: 'str' object has no attribute '__name__'", "Thread 5: 'str' object has no attribute '__name__'", "Thread 6: 'str' object has no attribute '__name__'", "Thread 7: 'str' object has no attribute '__name__'", "Thread 8: 'str' object has no attribute '__name__'", "Thread 9: 'str' object has no attribute '__name__'"]
E   assert 10 == 0
E    +  where 10 = len(["Thread 0: 'str' object has no attribute '__name__'", "Thread 1: 'str' object has no attribute '__name__'", "Thread 2: 'str' object has no attribute '__name__'", "Thread 3: 'str' object has no attribute '__name__'", "Thread 4: 'str' object has no attribute '__name__'", "Thread 5: 'str' object has no attribute '__name__'", ...])</failure></testcase><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_registration_overwrite" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_get_registration_nonexistent" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistry" name="test_get_singleton_instance_nonexistent" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistryEdgeCases" name="test_register_none_values" time="0.001" /><testcase classname="tests.unit.infrastructure.di.test_service_registry.TestServiceRegistryEdgeCases" name="test_multiple_scope_types" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionContext" name="test_context_creation" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionContext" name="test_context_to_dict" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_handler_initialization" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_domain_exception_preservation" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_aws_exception_preservation" time="0.001"><failure message="AssertionError: assert 'AWS launch error' in 'Infrastructure error in instance_launch'">tests/unit/infrastructure/error/test_exception_handler.py:123: in test_aws_exception_preservation
    assert "AWS launch error" in log_call[0][0]
E   AssertionError: assert 'AWS launch error' in 'Infrastructure error in instance_launch'</failure></testcase><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_json_decode_error_wrapping" time="0.001"><failure message="AssertionError: Expected 'error' to have been called once. Called 0 times.">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:958: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'error' to have been called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/error/test_exception_handler.py:142: in test_json_decode_error_wrapping
    self.mock_logger.error.assert_called_once()
E   AssertionError: Expected 'error' to have been called once. Called 0 times.</failure></testcase><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_connection_error_wrapping" time="0.001"><failure message="AssertionError: assert False&#10; +  where False = isinstance(InfrastructureError('Connection failed: Connection refused'), NetworkError)">tests/unit/infrastructure/error/test_exception_handler.py:154: in test_connection_error_wrapping
    assert isinstance(result, NetworkError)
E   AssertionError: assert False
E    +  where False = isinstance(InfrastructureError('Connection failed: Connection refused'), NetworkError)</failure></testcase><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_generic_exception_wrapping" time="0.001"><failure message="AssertionError: assert 'InfrastructureError' == 'UNEXPECTED_ERROR'&#10;  &#10;  #x1B[0m#x1B[91m- UNEXPECTED_ERROR#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ InfrastructureError#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/infrastructure/error/test_exception_handler.py:172: in test_generic_exception_wrapping
    assert result.error_code == "UNEXPECTED_ERROR"
E   AssertionError: assert 'InfrastructureError' == 'UNEXPECTED_ERROR'
E     
E     #x1B[0m#x1B[91m- UNEXPECTED_ERROR#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ InfrastructureError#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_handler_type_resolution" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_performance_stats" time="0.001"><failure message="AttributeError: 'ExceptionHandler' object has no attribute 'get_performance_stats'">tests/unit/infrastructure/error/test_exception_handler.py:206: in test_performance_stats
    stats = self.handler.get_performance_stats()
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ExceptionHandler' object has no attribute 'get_performance_stats'</failure></testcase><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandler" name="test_metrics_recording" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandlerSingleton" name="test_singleton_behavior" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionHandlerSingleton" name="test_singleton_reset" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionDecorators" name="test_handle_exceptions_decorator_domain_preservation" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionDecorators" name="test_handle_exceptions_decorator_generic_wrapping" time="0.001"><failure message="src.domain.base.exceptions.InfrastructureError: JSON parsing failed: Expecting value">tests/unit/infrastructure/error/test_exception_handler.py:291: in raise_json_error
    json.loads("invalid json")
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py:345: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py:363: in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/error/test_exception_handler.py:294: in test_handle_exceptions_decorator_generic_wrapping
    raise_json_error()
src/infrastructure/error/decorators.py:95: in sync_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: JSON parsing failed: Expecting value</failure></testcase><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionDecorators" name="test_handle_exceptions_decorator_context_building" time="0.001"><failure message="AssertionError: assert False&#10; +  where False = &lt;Mock name='get_logger().warning' id='4838864416'&gt;.called&#10; +    where &lt;Mock name='get_logger().warning' id='4838864416'&gt; = &lt;Mock name='get_logger()' id='4838853328'&gt;.warning&#10; +      where &lt;Mock name='get_logger()' id='4838853328'&gt; = &lt;test_exception_handler.TestExceptionDecorators object at 0x117d29cd0&gt;.mock_logger">tests/unit/infrastructure/error/test_exception_handler.py:315: in test_handle_exceptions_decorator_context_building
    assert self.mock_logger.warning.called
E   AssertionError: assert False
E    +  where False = &lt;Mock name='get_logger().warning' id='4838864416'&gt;.called
E    +    where &lt;Mock name='get_logger().warning' id='4838864416'&gt; = &lt;Mock name='get_logger()' id='4838853328'&gt;.warning
E    +      where &lt;Mock name='get_logger()' id='4838853328'&gt; = &lt;test_exception_handler.TestExceptionDecorators object at 0x117d29cd0&gt;.mock_logger</failure></testcase><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionDecorators" name="test_specialized_decorators" time="0.001"><failure message="src.domain.base.exceptions.InfrastructureError: JSON parsing failed: Expecting value">tests/unit/infrastructure/error/test_exception_handler.py:337: in infrastructure_function
    json.loads("invalid")
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py:345: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py:363: in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/error/test_exception_handler.py:353: in test_specialized_decorators
    infrastructure_function()
src/infrastructure/error/decorators.py:95: in sync_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: JSON parsing failed: Expecting value</failure></testcase><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestExceptionDecorators" name="test_exception_chaining" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestHTTPErrorHandling" name="test_exception_handler_http_formatting" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPerformanceAndThreadSafety" name="test_handler_caching" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPerformanceAndThreadSafety" name="test_thread_safety" time="0.002" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_json_decode_error_config_context" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_json_decode_error_template_context" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_json_decode_error_request_context" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_json_decode_error_general_context" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_json_decode_error_no_context" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_connection_error" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_file_not_found_error_config_context" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_file_not_found_error_template_context" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_file_not_found_error_general_context" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_value_error" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_key_error" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_type_error" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_attribute_error" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_methods_preserve_kwargs" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_wrap_methods_add_timestamps" time="0.001" /><testcase classname="tests.unit.infrastructure.error.test_exception_handler.TestPythonBuiltinExceptionWrapping" name="test_integration_with_exception_handler" time="0.001" /><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_discover_template_files" time="0.003"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:161: in test_discover_template_files
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_load_merged_templates_priority" time="0.003"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:174: in test_load_merged_templates_priority
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_find_by_id" time="0.003"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:196: in test_find_by_id
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_find_all" time="0.003"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:214: in test_find_all
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_save_to_provider_instance_file" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:232: in test_save_to_provider_instance_file
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_save_to_provider_type_file" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:260: in test_save_to_provider_type_file
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_save_to_main_file" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:288: in test_save_to_main_file
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_delete_template" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:315: in test_delete_template
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_get_template_source_info" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:331: in test_get_template_source_info
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_classify_file_type" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:347: in test_classify_file_type
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_cache_functionality" time="0.003"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:361: in test_cache_functionality
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_refresh_cache" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:405: in test_refresh_cache
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_error_handling_invalid_json" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:441: in test_error_handling_invalid_json
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_error_handling_missing_template_id" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:454: in test_error_handling_missing_template_id
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.persistence.test_provider_template_strategy.TestProviderTemplateStrategy" name="test_object_format_templates" time="0.002"><failure message="TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'">tests/unit/infrastructure/persistence/test_provider_template_strategy.py:487: in test_object_format_templates
    strategy = ProviderTemplateStrategy(main_file, mock_config_manager)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderTemplateStrategy without an implementation for abstract method 'count'</failure></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_format_conversion_consistency.TestFormatConversionConsistency" name="test_format_templates_response_consistency" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_format_conversion_consistency.py:22: in setup_method
    self.symphony_strategy = HostFactorySchedulerStrategy(self.config_manager, self.logger)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_format_conversion_consistency.TestFormatConversionConsistency" name="test_format_request_response_consistency" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_format_conversion_consistency.py:22: in setup_method
    self.symphony_strategy = HostFactorySchedulerStrategy(self.config_manager, self.logger)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_format_conversion_consistency.TestFormatConversionConsistency" name="test_format_return_request_response_consistency" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_format_conversion_consistency.py:22: in setup_method
    self.symphony_strategy = HostFactorySchedulerStrategy(self.config_manager, self.logger)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_format_conversion_consistency.TestFormatConversionInHandlers" name="test_format_conversion_in_api_handler" time="0.001"><failure message="AttributeError: &lt;class 'src.api.handlers.get_available_templates_handler.GetAvailableTemplatesRESTHandler'&gt; does not have the attribute '_handle'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;class 'src.api.handlers.get_available_templates_handler.GetAvailableTemplatesRESTHandler'&gt; does not have the attribute '_handle'</failure></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_format_conversion_consistency.TestFormatConversionInHandlers" name="test_format_conversion_in_cli_handler" time="0.001"><failure message="Failed: async def functions are not natively supported.&#10;You need to install a suitable plugin for your async framework, for example:&#10;  - anyio&#10;  - pytest-asyncio&#10;  - pytest-tornasync&#10;  - pytest-trio&#10;  - pytest-twisted">async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted</failure></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_scheduler_strategy_initialization.TestSchedulerStrategyInitialization" name="test_default_scheduler_strategy_initialization" time="0.002" /><testcase classname="tests.unit.infrastructure.scheduler.test_scheduler_strategy_initialization.TestSchedulerStrategyInitialization" name="test_symphony_hostfactory_strategy_initialization" time="0.002"><failure message="src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_scheduler_strategy_initialization.py:37: in test_symphony_hostfactory_strategy_initialization
    strategy = HostFactorySchedulerStrategy(config_manager, logger)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</failure></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_scheduler_strategy_initialization.TestSchedulerStrategyInitialization" name="test_create_default_strategy" time="0.002"><failure message="AssertionError: assert None == &lt;MagicMock spec='ConfigurationManager' id='4838863744'&gt;&#10; +  where None = &lt;src.infrastructure.scheduler.default.strategy.DefaultSchedulerStrategy object at 0x12066b6f0&gt;.config_manager">tests/unit/infrastructure/scheduler/test_scheduler_strategy_initialization.py:59: in test_create_default_strategy
    assert strategy.config_manager == config_manager
E   AssertionError: assert None == &lt;MagicMock spec='ConfigurationManager' id='4838863744'&gt;
E    +  where None = &lt;src.infrastructure.scheduler.default.strategy.DefaultSchedulerStrategy object at 0x12066b6f0&gt;.config_manager</failure></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_scheduler_strategy_initialization.TestSchedulerStrategyRegistration" name="test_register_scheduler_strategies" time="0.001"><failure message="ImportError: cannot import name 'register_scheduler_strategies' from 'src.infrastructure.scheduler.registration' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/scheduler/registration.py)">tests/unit/infrastructure/scheduler/test_scheduler_strategy_initialization.py:72: in test_register_scheduler_strategies
    from src.infrastructure.scheduler.registration import (
E   ImportError: cannot import name 'register_scheduler_strategies' from 'src.infrastructure.scheduler.registration' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/scheduler/registration.py)</failure></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_get_templates_file_path" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_get_config_file_path" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_get_paths_with_different_provider" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_parse_template_config_single_mapping_point" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_parse_template_config_with_defaults" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_format_templates_response_single_mapping_point" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_parse_request_data_single_mapping_point" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_parse_request_data_with_defaults" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.scheduler.test_symphony_hostfactory_strategy.TestSymphonyHostFactorySchedulerStrategy" name="test_field_mapping_consistency" time="0.001"><error message="failed on setup with &quot;src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'&quot;">src/infrastructure/di/components/dependency_resolver.py:148: in _create_direct_instance
    instance = cls(**constructor_params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/scheduler/test_symphony_hostfactory_strategy.py:35: in setup_method
    self.strategy = HostFactorySchedulerStrategy(self.mock_config_manager, self.mock_logger)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/scheduler/hostfactory/strategy.py:42: in __init__
    self._provider_selection_service = container.get(ProviderSelectionService)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:237: in _resolve_constructor_parameters
    parameters[param_name] = self.resolve(param_type, cls, dependency_chain)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:101: in _create_instance
    return self._create_direct_instance(cls, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:157: in _create_direct_instance
    raise InstantiationError(cls, f"Failed to instantiate {cls.__name__}: {str(e)}")
E   src.infrastructure.di.exceptions.InstantiationError: Failed to resolve dependency ConfigurationPort: Failed to instantiate ConfigurationPort: Can't instantiate abstract class ConfigurationPort without an implementation for abstract methods 'get_events_config', 'get_logging_config', 'get_naming_config', 'get_provider_config', 'get_request_config', 'get_storage_config', 'get_template_config'</error></testcase><testcase classname="tests.unit.infrastructure.template.test_ami_resolution.TestRuntimeAMICache" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="AMI resolution functionality is disabled - moved to backup/">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/template/test_ami_resolution.py:22: AMI resolution functionality is disabled - moved to backup/</skipped></testcase><testcase classname="tests.unit.infrastructure.template.test_ami_resolution.TestCachingAMIResolver" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="AMI resolution functionality is disabled - moved to backup/">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/template/test_ami_resolution.py:30: AMI resolution functionality is disabled - moved to backup/</skipped></testcase><testcase classname="tests.unit.infrastructure.template.test_ami_resolution.TestResolvingTemplateConfigurationManager" name="test_placeholder" time="0.000"><skipped type="pytest.skip" message="AMI resolution functionality is disabled - moved to backup/">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/template/test_ami_resolution.py:38: AMI resolution functionality is disabled - moved to backup/</skipped></testcase><testcase classname="tests.unit.infrastructure.test_base_registry.TestBaseRegistry" name="test_base_registration_creation" time="0.001" /><testcase classname="tests.unit.infrastructure.test_base_registry.TestSchedulerRegistry" name="test_scheduler_registry_singleton" time="0.001"><error message="failed on setup with &quot;AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?&quot;">tests/unit/infrastructure/test_base_registry.py:39: in setup_method
    self.registry._registrations.clear()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?</error></testcase><testcase classname="tests.unit.infrastructure.test_base_registry.TestSchedulerRegistry" name="test_register_scheduler_strategy" time="0.001"><error message="failed on setup with &quot;AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?&quot;">tests/unit/infrastructure/test_base_registry.py:39: in setup_method
    self.registry._registrations.clear()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?</error></testcase><testcase classname="tests.unit.infrastructure.test_base_registry.TestSchedulerRegistry" name="test_register_duplicate_scheduler_raises_error" time="0.001"><error message="failed on setup with &quot;AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?&quot;">tests/unit/infrastructure/test_base_registry.py:39: in setup_method
    self.registry._registrations.clear()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?</error></testcase><testcase classname="tests.unit.infrastructure.test_base_registry.TestSchedulerRegistry" name="test_create_scheduler_strategy" time="0.001"><error message="failed on setup with &quot;AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?&quot;">tests/unit/infrastructure/test_base_registry.py:39: in setup_method
    self.registry._registrations.clear()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?</error></testcase><testcase classname="tests.unit.infrastructure.test_base_registry.TestSchedulerRegistry" name="test_create_strategy_for_unregistered_type_raises_error" time="0.001"><error message="failed on setup with &quot;AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?&quot;">tests/unit/infrastructure/test_base_registry.py:39: in setup_method
    self.registry._registrations.clear()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?</error></testcase><testcase classname="tests.unit.infrastructure.test_base_registry.TestSchedulerRegistry" name="test_create_strategy_factory_error_raises_configuration_error" time="0.001"><error message="failed on setup with &quot;AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?&quot;">tests/unit/infrastructure/test_base_registry.py:39: in setup_method
    self.registry._registrations.clear()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?</error></testcase><testcase classname="tests.unit.infrastructure.test_base_registry.TestSchedulerRegistry" name="test_is_registered" time="0.001"><error message="failed on setup with &quot;AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?&quot;">tests/unit/infrastructure/test_base_registry.py:39: in setup_method
    self.registry._registrations.clear()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?</error></testcase><testcase classname="tests.unit.infrastructure.test_base_registry.TestSchedulerRegistry" name="test_get_registered_types" time="0.001"><error message="failed on setup with &quot;AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?&quot;">tests/unit/infrastructure/test_base_registry.py:39: in setup_method
    self.registry._registrations.clear()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'SchedulerRegistry' object has no attribute '_registrations'. Did you mean: '_registry_lock'?</error></testcase><testcase classname="tests.unit.infrastructure.test_config_driven_provider_registration.TestConfigDrivenProviderRegistration" name="test_register_providers_with_valid_config" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'">tests/unit/infrastructure/test_config_driven_provider_registration.py:34: in test_register_providers_with_valid_config
    with patch(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'</failure></testcase><testcase classname="tests.unit.infrastructure.test_config_driven_provider_registration.TestConfigDrivenProviderRegistration" name="test_register_providers_with_no_config" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'">tests/unit/infrastructure/test_config_driven_provider_registration.py:60: in test_register_providers_with_no_config
    with patch(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'</failure></testcase><testcase classname="tests.unit.infrastructure.test_config_driven_provider_registration.TestConfigDrivenProviderRegistration" name="test_register_providers_with_disabled_provider" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'">tests/unit/infrastructure/test_config_driven_provider_registration.py:99: in test_register_providers_with_disabled_provider
    with patch(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'</failure></testcase><testcase classname="tests.unit.infrastructure.test_config_driven_provider_registration.TestConfigDrivenProviderRegistration" name="test_register_providers_with_multiple_instances" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'">tests/unit/infrastructure/test_config_driven_provider_registration.py:141: in test_register_providers_with_multiple_instances
    with patch(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'</failure></testcase><testcase classname="tests.unit.infrastructure.test_config_driven_provider_registration.TestConfigDrivenProviderRegistration" name="test_validate_provider_config_valid" time="0.001" /><testcase classname="tests.unit.infrastructure.test_config_driven_provider_registration.TestConfigDrivenProviderRegistration" name="test_validate_provider_config_no_providers" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for ProviderConfig&#10;  Value error, At least one provider must be configured [type=value_error, input_value={'selection_policy': 'FIR...LABLE', 'providers': []}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/value_error">tests/unit/infrastructure/test_config_driven_provider_registration.py:175: in test_validate_provider_config_no_providers
    provider_config = ProviderConfig(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for ProviderConfig
E     Value error, At least one provider must be configured [type=value_error, input_value={'selection_policy': 'FIR...LABLE', 'providers': []}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/value_error</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_manager_initialization" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute '_config'. Did you mean: 'app_config'?">tests/unit/infrastructure/test_configuration_manager.py:23: in test_configuration_manager_initialization
    assert manager._config == {}
           ^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute '_config'. Did you mean: 'app_config'?</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_load_from_dict" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:30: in test_load_from_dict
    manager.load_from_dict(test_config_dict)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_load_from_file" time="0.002"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'">tests/unit/infrastructure/test_configuration_manager.py:40: in test_load_from_file
    manager.load_from_file(str(test_config_file))
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_load_from_file_not_found" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'">tests/unit/infrastructure/test_configuration_manager.py:51: in test_load_from_file_not_found
    manager.load_from_file("/nonexistent/config.json")
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_load_from_file_invalid_json" time="0.002"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'">tests/unit/infrastructure/test_configuration_manager.py:62: in test_load_from_file_invalid_json
    manager.load_from_file(str(invalid_json_file))
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_get_configuration_value" time="0.002"><failure message="AssertionError: assert None == 'us-east-1'&#10; +  where None = get('aws.region')&#10; +    where get = &lt;src.config.managers.configuration_manager.ConfigurationManager object at 0x120ddbb10&gt;.get">tests/unit/infrastructure/test_configuration_manager.py:67: in test_get_configuration_value
    assert config_manager.get("aws.region") == "us-east-1"
E   AssertionError: assert None == 'us-east-1'
E    +  where None = get('aws.region')
E    +    where get = &lt;src.config.managers.configuration_manager.ConfigurationManager object at 0x120ddbb10&gt;.get</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_get_configuration_value_with_default" time="0.002"><failure message="AssertionError: assert 'default-region' == 'us-east-1'&#10;  &#10;  #x1B[0m#x1B[91m- us-east-1#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ default-region#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/infrastructure/test_configuration_manager.py:80: in test_get_configuration_value_with_default
    assert config_manager.get("aws.region", "default-region") == "us-east-1"
E   AssertionError: assert 'default-region' == 'us-east-1'
E     
E     #x1B[0m#x1B[91m- us-east-1#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ default-region#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_get_configuration_value_not_found" time="0.002" /><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_set_configuration_value" time="0.002" /><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_has_configuration_key" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'has'">tests/unit/infrastructure/test_configuration_manager.py:109: in test_has_configuration_key
    assert config_manager.has("aws")
           ^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'has'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_get_all_configuration" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'get_all'. Did you mean: 'get_bool'?">tests/unit/infrastructure/test_configuration_manager.py:120: in test_get_all_configuration
    all_config = config_manager.get_all()
                 ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'get_all'. Did you mean: 'get_bool'?</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_environment_variable_override" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'get_env'. Did you mean: 'get_int'?">tests/unit/infrastructure/test_configuration_manager.py:139: in test_environment_variable_override
    assert config_manager.get_env("AWS_REGION") == "us-west-1"
           ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'get_env'. Did you mean: 'get_int'?</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_validation" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'validate'">tests/unit/infrastructure/test_configuration_manager.py:150: in test_configuration_validation
    is_valid = config_manager.validate()
               ^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'validate'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_to_app_config" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'to_app_config'. Did you mean: 'app_config'?">tests/unit/infrastructure/test_configuration_manager.py:160: in test_configuration_to_app_config
    app_config = config_manager.to_app_config()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'to_app_config'. Did you mean: 'app_config'?</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_merge" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:176: in test_configuration_merge
    manager.load_from_dict(base_config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_merge_override" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:201: in test_configuration_merge_override
    manager.load_from_dict(base_config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_save_to_file" time="0.002"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'save_to_file'">tests/unit/infrastructure/test_configuration_manager.py:222: in test_configuration_save_to_file
    config_manager.save_to_file(str(output_file))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'save_to_file'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_reload" time="0.002"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'">tests/unit/infrastructure/test_configuration_manager.py:237: in test_configuration_reload
    manager.load_from_file(str(test_config_file))
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_reload_without_file" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:252: in test_configuration_reload_without_file
    manager.load_from_dict({"test": "value"})
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_clear" time="0.002"><failure message="AssertionError: assert None == 'us-east-1'&#10; +  where None = get('aws.region')&#10; +    where get = &lt;src.config.managers.configuration_manager.ConfigurationManager object at 0x120ddaad0&gt;.get">tests/unit/infrastructure/test_configuration_manager.py:261: in test_configuration_clear
    assert config_manager.get("aws.region") == "us-east-1"
E   AssertionError: assert None == 'us-east-1'
E    +  where None = get('aws.region')
E    +    where get = &lt;src.config.managers.configuration_manager.ConfigurationManager object at 0x120ddaad0&gt;.get</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_copy" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'copy'">tests/unit/infrastructure/test_configuration_manager.py:272: in test_configuration_copy
    copy_manager = config_manager.copy()
                   ^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'copy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_keys_iteration" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'keys'">tests/unit/infrastructure/test_configuration_manager.py:285: in test_configuration_keys_iteration
    keys = list(config_manager.keys())
                ^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'keys'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_values_iteration" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'values'">tests/unit/infrastructure/test_configuration_manager.py:295: in test_configuration_values_iteration
    values = list(config_manager.values())
                  ^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'values'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_items_iteration" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'items'">tests/unit/infrastructure/test_configuration_manager.py:306: in test_configuration_items_iteration
    items = list(config_manager.items())
                 ^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'items'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_nested_key_parsing" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:324: in test_configuration_nested_key_parsing
    manager.load_from_dict(config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManager" name="test_configuration_type_preservation" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:346: in test_configuration_type_preservation
    manager.load_from_dict(config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_empty_configuration" time="0.002"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'has'">tests/unit/infrastructure/test_configuration_manager.py:375: in test_empty_configuration
    assert not manager.has("any.key")
               ^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'has'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_none_values_in_configuration" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:391: in test_none_values_in_configuration
    manager.load_from_dict(config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_special_characters_in_keys" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:418: in test_special_characters_in_keys
    manager.load_from_dict(config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_very_deep_nesting" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:433: in test_very_deep_nesting
    manager.load_from_dict(config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_large_configuration" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:451: in test_large_configuration
    manager.load_from_dict(config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_circular_reference_prevention" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'">tests/unit/infrastructure/test_configuration_manager.py:467: in test_circular_reference_prevention
    manager.load_from_dict(config)
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_dict'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_file_permission_error" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'">tests/unit/infrastructure/test_configuration_manager.py:479: in test_file_permission_error
    manager.load_from_file("/restricted/config.json")
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_file_io_error" time="0.001"><failure message="AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'">tests/unit/infrastructure/test_configuration_manager.py:487: in test_file_io_error
    manager.load_from_file("/problematic/config.json")
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ConfigurationManager' object has no attribute 'load_from_file'</failure></testcase><testcase classname="tests.unit.infrastructure.test_configuration_manager.TestConfigurationManagerEdgeCases" name="test_configuration_thread_safety" time="0.129"><failure message="assert False&#10; +  where False = all(&lt;generator object TestConfigurationManagerEdgeCases.test_configuration_thread_safety.&lt;locals&gt;.&lt;genexpr&gt; at 0x120d1a8e0&gt;)">tests/unit/infrastructure/test_configuration_manager.py:533: in test_configuration_thread_safety
    assert all(result == "us-east-1" for result in results)
E   assert False
E    +  where False = all(&lt;generator object TestConfigurationManagerEdgeCases.test_configuration_thread_safety.&lt;locals&gt;.&lt;genexpr&gt; at 0x120d1a8e0&gt;)</failure></testcase><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContext" name="test_dry_run_context_activation" time="0.001" /><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContext" name="test_dry_run_context_deactivation" time="0.001" /><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContext" name="test_nested_dry_run_contexts" time="0.001" /><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContext" name="test_exception_handling_in_context" time="0.001" /><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContext" name="test_thread_local_isolation" time="0.001" /><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContext" name="test_get_dry_run_status" time="0.001" /><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContext" name="test_default_context_activation" time="0.001" /><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContext" name="test_multiple_sequential_contexts" time="0.001" /><testcase classname="tests.unit.infrastructure.test_dry_run_context.TestDryRunContextIntegration" name="test_context_with_mock_operations" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestDependencyInjectionComprehensive" name="test_di_container_exists" time="0.001"><skipped type="pytest.skip" message="DI Container not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:22: DI Container not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestDependencyInjectionComprehensive" name="test_di_container_initialization" time="0.001"><skipped type="pytest.skip" message="DI Container not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:38: DI Container not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestDependencyInjectionComprehensive" name="test_di_container_registration" time="0.001"><skipped type="pytest.skip" message="DI Container not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:64: DI Container not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestDependencyInjectionComprehensive" name="test_di_container_resolution" time="0.001"><skipped type="pytest.skip" message="DI Container not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:96: DI Container not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestDependencyInjectionComprehensive" name="test_command_query_buses_exist" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestDependencyInjectionComprehensive" name="test_bus_initialization" time="0.001"><failure message="TypeError: CommandBus.__init__() missing 1 required positional argument: 'logger'">tests/unit/infrastructure/test_infrastructure_comprehensive.py:115: in test_bus_initialization
    command_bus = CommandBus()
                  ^^^^^^^^^^^^
E   TypeError: CommandBus.__init__() missing 2 required positional arguments: 'container' and 'logger'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/test_infrastructure_comprehensive.py:119: in test_bus_initialization
    command_bus = CommandBus(Mock())
                  ^^^^^^^^^^^^^^^^^^
E   TypeError: CommandBus.__init__() missing 1 required positional argument: 'logger'</failure></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestDependencyInjectionComprehensive" name="test_bus_send_methods" time="0.001"><failure message="TypeError: CommandBus.__init__() missing 1 required positional argument: 'logger'">tests/unit/infrastructure/test_infrastructure_comprehensive.py:142: in test_bus_send_methods
    command_bus = CommandBus()
                  ^^^^^^^^^^^^
E   TypeError: CommandBus.__init__() missing 2 required positional arguments: 'container' and 'logger'

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/test_infrastructure_comprehensive.py:144: in test_bus_send_methods
    command_bus = CommandBus(Mock())
                  ^^^^^^^^^^^^^^^^^^
E   TypeError: CommandBus.__init__() missing 1 required positional argument: 'logger'</failure></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestPersistenceLayerComprehensive" name="test_repository_modules_exist" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestPersistenceLayerComprehensive" name="test_repository_classes_exist" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestPersistenceLayerComprehensive" name="test_repository_initialization" time="0.003" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestPersistenceLayerComprehensive" name="test_repository_methods" time="0.002" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestPersistenceLayerComprehensive" name="test_persistence_strategies_exist" time="0.003" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestPersistenceLayerComprehensive" name="test_unit_of_work_exists" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestErrorHandlingComprehensive" name="test_exception_handler_exists" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestErrorHandlingComprehensive" name="test_exception_handler_initialization" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestErrorHandlingComprehensive" name="test_error_decorators_exist" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestErrorHandlingComprehensive" name="test_error_middleware_exists" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestLoggingComprehensive" name="test_logger_exists" time="0.001"><skipped type="pytest.skip" message="Logger not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:402: Logger not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestLoggingComprehensive" name="test_logger_initialization" time="0.001"><skipped type="pytest.skip" message="Logger not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:418: Logger not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestLoggingComprehensive" name="test_logger_singleton_exists" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestTemplateInfrastructureComprehensive" name="test_template_loader_exists" time="0.001"><skipped type="pytest.skip" message="TemplateLoader not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:442: TemplateLoader not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestTemplateInfrastructureComprehensive" name="test_template_configuration_store_exists" time="0.001"><skipped type="pytest.skip" message="TemplateConfigurationStore not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:453: TemplateConfigurationStore not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestTemplateInfrastructureComprehensive" name="test_template_cache_service_exists" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestTemplateInfrastructureComprehensive" name="test_format_converter_exists" time="0.001"><skipped type="pytest.skip" message="FormatConverter not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_infrastructure_comprehensive.py:473: FormatConverter not available</skipped></testcase><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestAdaptersComprehensive" name="test_adapter_modules_exist" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestAdaptersComprehensive" name="test_adapter_classes_exist" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestAdaptersComprehensive" name="test_adapter_initialization" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestFactoriesComprehensive" name="test_factory_modules_exist" time="0.001" /><testcase classname="tests.unit.infrastructure.test_infrastructure_comprehensive.TestFactoriesComprehensive" name="test_factory_classes_exist" time="0.001" /><testcase classname="tests.unit.infrastructure.test_multi_instance_provider_support.TestMultiInstanceProviderSupport" name="test_provider_registry_register_instance" time="0.001" /><testcase classname="tests.unit.infrastructure.test_multi_instance_provider_support.TestMultiInstanceProviderSupport" name="test_provider_registry_duplicate_instance_error" time="0.001"><failure message="ValueError: Provider instance 'aws-us-east-1' is already registered">src/infrastructure/registry/provider_registry.py:135: in register_provider_instance
    self.register_instance(
src/infrastructure/registry/base_registry.py:149: in register_instance
    raise ValueError(f"Instance '{instance_name}' is already registered")
E   ValueError: Instance 'aws-us-east-1' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_multi_instance_provider_support.py:60: in test_provider_registry_duplicate_instance_error
    registry.register_provider_instance(
src/infrastructure/registry/provider_registry.py:144: in register_provider_instance
    raise ValueError(f"Provider instance '{instance_name}' is already registered") from e
E   ValueError: Provider instance 'aws-us-east-1' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_multi_instance_provider_support.TestMultiInstanceProviderSupport" name="test_provider_registry_unregister_instance" time="0.001"><failure message="ValueError: Provider instance 'aws-us-east-1' is already registered">src/infrastructure/registry/provider_registry.py:135: in register_provider_instance
    self.register_instance(
src/infrastructure/registry/base_registry.py:149: in register_instance
    raise ValueError(f"Instance '{instance_name}' is already registered")
E   ValueError: Instance 'aws-us-east-1' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_multi_instance_provider_support.py:86: in test_provider_registry_unregister_instance
    registry.register_provider_instance(
src/infrastructure/registry/provider_registry.py:144: in register_provider_instance
    raise ValueError(f"Provider instance '{instance_name}' is already registered") from e
E   ValueError: Provider instance 'aws-us-east-1' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_multi_instance_provider_support.TestMultiInstanceProviderSupport" name="test_provider_registry_create_strategy_from_instance" time="0.001"><failure message="ValueError: Provider instance 'aws-us-east-1' is already registered">src/infrastructure/registry/provider_registry.py:135: in register_provider_instance
    self.register_instance(
src/infrastructure/registry/base_registry.py:149: in register_instance
    raise ValueError(f"Instance '{instance_name}' is already registered")
E   ValueError: Instance 'aws-us-east-1' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_multi_instance_provider_support.py:117: in test_provider_registry_create_strategy_from_instance
    registry.register_provider_instance(
src/infrastructure/registry/provider_registry.py:144: in register_provider_instance
    raise ValueError(f"Provider instance '{instance_name}' is already registered") from e
E   ValueError: Provider instance 'aws-us-east-1' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_multi_instance_provider_support.TestMultiInstanceProviderSupport" name="test_multi_instance_registration_flow" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'">tests/unit/infrastructure/test_multi_instance_provider_support.py:164: in test_multi_instance_registration_flow
    with patch(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.di.provider_services' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py'&gt; does not have the attribute 'get_config_manager'</failure></testcase><testcase classname="tests.unit.infrastructure.test_multi_instance_provider_support.TestMultiInstanceProviderSupport" name="test_provider_strategy_factory_with_instances" time="0.001"><failure message="TypeError: ProviderStrategyFactory.__init__() got an unexpected keyword argument 'config'">tests/unit/infrastructure/test_multi_instance_provider_support.py:198: in test_provider_strategy_factory_with_instances
    factory = ProviderStrategyFactory(logger=mock_logger, config=mock_config)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: ProviderStrategyFactory.__init__() got an unexpected keyword argument 'config'</failure></testcase><testcase classname="tests.unit.infrastructure.test_multi_instance_provider_support.TestMultiInstanceProviderSupport" name="test_provider_strategy_factory_fallback_to_type" time="0.001"><failure message="TypeError: ProviderStrategyFactory.__init__() got an unexpected keyword argument 'config'">tests/unit/infrastructure/test_multi_instance_provider_support.py:240: in test_provider_strategy_factory_fallback_to_type
    factory = ProviderStrategyFactory(logger=mock_logger, config=mock_config)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: ProviderStrategyFactory.__init__() got an unexpected keyword argument 'config'</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_register_provider" time="0.001" /><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_register_provider_with_optional_factories" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:43: in test_register_provider_with_optional_factories
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_register_duplicate_provider_raises_error" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:55: in test_register_duplicate_provider_raises_error
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_unregister_provider" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:70: in test_unregister_provider
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_unregister_nonexistent_provider" time="0.001" /><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_strategy" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:86: in test_create_strategy
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_strategy_unsupported_provider" time="0.001" /><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_strategy_factory_error" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:107: in test_create_strategy_factory_error
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_config" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:118: in test_create_config
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_config_unsupported_provider" time="0.001" /><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_resolver" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:137: in test_create_resolver
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_resolver_no_factory" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:151: in test_create_resolver_no_factory
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_resolver_unregistered_provider" time="0.001"><failure message="ValueError: Type 'unregistered_provider' is not registered. Available types: test_provider">tests/unit/infrastructure/test_provider_registry.py:162: in test_create_resolver_unregistered_provider
    resolver = self.registry.create_resolver("unregistered_provider")
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/registry/provider_registry.py:232: in create_resolver
    return self.create_additional_component(provider_type, "resolver_factory")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/registry/base_registry.py:210: in create_additional_component
    registration = self._get_type_registration(type_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/registry/base_registry.py:247: in _get_type_registration
    raise ValueError(
E   ValueError: Type 'unregistered_provider' is not registered. Available types: test_provider</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_validator" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:167: in test_create_validator
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_create_validator_no_factory" time="0.001"><failure message="src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered">src/infrastructure/registry/provider_registry.py:72: in register
    self.register_type(
src/infrastructure/registry/base_registry.py:115: in register_type
    raise ValueError(f"Type '{type_name}' is already registered")
E   ValueError: Type 'test_provider' is already registered

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_provider_registry.py:181: in test_create_validator_no_factory
    self.registry.register_provider(
src/infrastructure/registry/provider_registry.py:103: in register_provider
    self.register(
src/infrastructure/registry/provider_registry.py:80: in register
    raise ConfigurationError(str(e)) from e
E   src.domain.base.exceptions.ConfigurationError: Type 'test_provider' is already registered</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_clear_registrations" time="0.001"><failure message="AssertionError: assert 3 == 2&#10; +  where 3 = len(['test_provider', 'test_provider1', 'test_provider2'])&#10; +    where ['test_provider', 'test_provider1', 'test_provider2'] = get_registered_providers()&#10; +      where get_registered_providers = &lt;src.infrastructure.registry.provider_registry.ProviderRegistry object at 0x120916cf0&gt;.get_registered_providers&#10; +        where &lt;src.infrastructure.registry.provider_registry.ProviderRegistry object at 0x120916cf0&gt; = &lt;tests.unit.infrastructure.test_provider_registry.TestProviderRegistry object at 0x120171cd0&gt;.registry">tests/unit/infrastructure/test_provider_registry.py:203: in test_clear_registrations
    assert len(self.registry.get_registered_providers()) == 2
E   AssertionError: assert 3 == 2
E    +  where 3 = len(['test_provider', 'test_provider1', 'test_provider2'])
E    +    where ['test_provider', 'test_provider1', 'test_provider2'] = get_registered_providers()
E    +      where get_registered_providers = &lt;src.infrastructure.registry.provider_registry.ProviderRegistry object at 0x120916cf0&gt;.get_registered_providers
E    +        where &lt;src.infrastructure.registry.provider_registry.ProviderRegistry object at 0x120916cf0&gt; = &lt;tests.unit.infrastructure.test_provider_registry.TestProviderRegistry object at 0x120171cd0&gt;.registry</failure></testcase><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_singleton_behavior" time="0.001" /><testcase classname="tests.unit.infrastructure.test_provider_registry.TestProviderRegistry" name="test_thread_safety" time="0.002"><failure message="AssertionError: assert 13 == 10&#10; +  where 13 = len(['test_provider', 'test_provider1', 'test_provider2', 'provider_0', 'provider_1', 'provider_2', ...])&#10; +    where ['test_provider', 'test_provider1', 'test_provider2', 'provider_0', 'provider_1', 'provider_2', ...] = get_registered_providers()&#10; +      where get_registered_providers = &lt;src.infrastructure.registry.provider_registry.ProviderRegistry object at 0x120916cf0&gt;.get_registered_providers&#10; +        where &lt;src.infrastructure.registry.provider_registry.ProviderRegistry object at 0x120916cf0&gt; = &lt;tests.unit.infrastructure.test_provider_registry.TestProviderRegistry object at 0x120152620&gt;.registry">tests/unit/infrastructure/test_provider_registry.py:248: in test_thread_safety
    assert len(self.registry.get_registered_providers()) == 10
E   AssertionError: assert 13 == 10
E    +  where 13 = len(['test_provider', 'test_provider1', 'test_provider2', 'provider_0', 'provider_1', 'provider_2', ...])
E    +    where ['test_provider', 'test_provider1', 'test_provider2', 'provider_0', 'provider_1', 'provider_2', ...] = get_registered_providers()
E    +      where get_registered_providers = &lt;src.infrastructure.registry.provider_registry.ProviderRegistry object at 0x120916cf0&gt;.get_registered_providers
E    +        where &lt;src.infrastructure.registry.provider_registry.ProviderRegistry object at 0x120916cf0&gt; = &lt;tests.unit.infrastructure.test_provider_registry.TestProviderRegistry object at 0x120152620&gt;.registry</failure></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryPatternCompliance" name="test_repositories_implement_common_interface" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:35: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryPatternCompliance" name="test_repositories_have_standard_methods" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:48: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryPatternCompliance" name="test_repositories_handle_domain_events" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:70: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryPatternCompliance" name="test_repositories_support_transactions" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:93: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestJSONRepositoryImplementation" name="test_json_repository_saves_and_loads_data" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:133: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestJSONRepositoryImplementation" name="test_json_repository_handles_concurrent_access" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:154: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestJSONRepositoryImplementation" name="test_json_repository_supports_queries" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:177: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestJSONRepositoryImplementation" name="test_json_repository_handles_file_corruption" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:205: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestSQLRepositoryImplementation" name="test_sql_repository_uses_connection_pooling" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:228: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestSQLRepositoryImplementation" name="test_sql_repository_supports_transactions" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:247: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestSQLRepositoryImplementation" name="test_sql_repository_handles_connection_failures" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:273: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestSQLRepositoryImplementation" name="test_sql_repository_supports_complex_queries" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:287: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryEventPublishing" name="test_repository_extracts_domain_events" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:319: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryEventPublishing" name="test_repository_publishes_events_in_order" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:345: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryEventPublishing" name="test_repository_handles_event_publishing_failures" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:369: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryEventPublishing" name="test_repository_supports_event_deduplication" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:388: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryPerformanceOptimization" name="test_repository_supports_batch_operations" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:413: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryPerformanceOptimization" name="test_repository_supports_lazy_loading" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:441: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryPerformanceOptimization" name="test_repository_supports_caching" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:467: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryPerformanceOptimization" name="test_repository_supports_read_replicas" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:491: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryErrorHandling" name="test_repository_handles_storage_failures" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:517: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryErrorHandling" name="test_repository_supports_retry_logic" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:534: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryErrorHandling" name="test_repository_validates_aggregate_state" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:565: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryErrorHandling" name="test_repository_handles_concurrency_conflicts" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:585: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryMigration" name="test_repository_supports_schema_migration" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:609: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryMigration" name="test_repository_supports_data_migration" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:624: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_repository_patterns.TestRepositoryMigration" name="test_repository_validates_migration_integrity" time="0.000"><skipped type="pytest.skip" message="Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/infrastructure/test_repository_patterns.py:649: Repository imports not available: No module named 'src.infrastructure.persistence.base.base_repository'</skipped></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestJSONStorageRegistration" name="test_create_json_strategy" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.json.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/json/registration.py'&gt; does not have the attribute 'JSONStorageStrategy'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.json.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/json/registration.py'&gt; does not have the attribute 'JSONStorageStrategy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestJSONStorageRegistration" name="test_create_json_config" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registration.TestJSONStorageRegistration" name="test_create_json_request_repository" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.json.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/json/registration.py'&gt; does not have the attribute 'JSONStorageStrategy'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.json.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/json/registration.py'&gt; does not have the attribute 'JSONStorageStrategy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestJSONStorageRegistration" name="test_register_json_storage" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.json.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/json/registration.py'&gt; does not have the attribute 'JSONStorageStrategy'">tests/unit/infrastructure/test_storage_registration.py:99: in test_register_json_storage
    with patch("src.infrastructure.persistence.json.registration.JSONStorageStrategy"), patch(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.json.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/json/registration.py'&gt; does not have the attribute 'JSONStorageStrategy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestSQLStorageRegistration" name="test_create_sql_strategy" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.sql.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/sql/registration.py'&gt; does not have the attribute 'SQLStorageStrategy'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.sql.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/sql/registration.py'&gt; does not have the attribute 'SQLStorageStrategy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestSQLStorageRegistration" name="test_create_sql_config" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registration.TestSQLStorageRegistration" name="test_build_connection_string_sqlite" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registration.TestSQLStorageRegistration" name="test_build_connection_string_postgresql" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registration.TestSQLStorageRegistration" name="test_register_sql_storage" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.sql.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/sql/registration.py'&gt; does not have the attribute 'SQLStorageStrategy'">tests/unit/infrastructure/test_storage_registration.py:205: in test_register_sql_storage
    with patch("src.infrastructure.persistence.sql.registration.SQLStorageStrategy"), patch(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.sql.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/sql/registration.py'&gt; does not have the attribute 'SQLStorageStrategy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestDynamoDBStorageRegistration" name="test_create_dynamodb_strategy" time="0.005"><failure message="AttributeError: &lt;module 'src.providers.aws.persistence.dynamodb.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/persistence/dynamodb/registration.py'&gt; does not have the attribute 'DynamoDBStorageStrategy'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.providers.aws.persistence.dynamodb.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/persistence/dynamodb/registration.py'&gt; does not have the attribute 'DynamoDBStorageStrategy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestDynamoDBStorageRegistration" name="test_create_dynamodb_config" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registration.TestDynamoDBStorageRegistration" name="test_register_dynamodb_storage" time="0.001"><failure message="AttributeError: &lt;module 'src.providers.aws.persistence.dynamodb.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/persistence/dynamodb/registration.py'&gt; does not have the attribute 'DynamoDBStorageStrategy'">tests/unit/infrastructure/test_storage_registration.py:289: in test_register_dynamodb_storage
    with patch(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.providers.aws.persistence.dynamodb.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/persistence/dynamodb/registration.py'&gt; does not have the attribute 'DynamoDBStorageStrategy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestCentralStorageRegistration" name="test_register_all_storage_types_success" time="0.002"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_dynamodb_storage'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_dynamodb_storage'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestCentralStorageRegistration" name="test_register_all_storage_types_partial_failure" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_dynamodb_storage'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_dynamodb_storage'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestCentralStorageRegistration" name="test_register_all_storage_types_complete_failure" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_dynamodb_storage'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_dynamodb_storage'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestCentralStorageRegistration" name="test_get_available_storage_types" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'JSONStorageStrategy'">tests/unit/infrastructure/test_storage_registration.py:392: in test_get_available_storage_types
    with patch("src.infrastructure.persistence.registration.JSONStorageStrategy"), patch(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'JSONStorageStrategy'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestCentralStorageRegistration" name="test_is_storage_type_available" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registration.TestCentralStorageRegistration" name="test_register_storage_type_success" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_json_storage'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_json_storage'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestCentralStorageRegistration" name="test_register_storage_type_failure" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_json_storage'">/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.registration' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/registration.py'&gt; does not have the attribute 'register_json_storage'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registration.TestCentralStorageRegistration" name="test_register_storage_type_unknown" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistration" name="test_storage_registration_creation" time="0.001"><failure message="TypeError: StorageRegistration.__init__() got an unexpected keyword argument 'storage_type'">tests/unit/infrastructure/test_storage_registry.py:26: in test_storage_registration_creation
    registration = StorageRegistration(
E   TypeError: StorageRegistration.__init__() got an unexpected keyword argument 'storage_type'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistration" name="test_storage_registration_repr" time="0.001"><failure message="TypeError: StorageRegistration.__init__() got an unexpected keyword argument 'storage_type'">tests/unit/infrastructure/test_storage_registry.py:38: in test_storage_registration_repr
    registration = StorageRegistration(
E   TypeError: StorageRegistration.__init__() got an unexpected keyword argument 'storage_type'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_singleton_pattern" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_global_registry_function" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_register_storage_success" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_register_storage_duplicate_error" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_create_strategy_success" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_create_strategy_unregistered_error" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_create_strategy_factory_error" time="0.001"><failure message="AssertionError: Regex pattern did not match.&#10; Regex: 'Failed to create storage strategy'&#10; Input: &quot;Failed to create strategy for 'test_storage': Factory error&quot;">src/infrastructure/registry/base_registry.py:267: in _create_strategy_from_registration
    strategy = registration.strategy_factory(config)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   Exception: Factory error

The above exception was the direct cause of the following exception:
tests/unit/infrastructure/test_storage_registry.py:142: in test_create_strategy_factory_error
    self.registry.create_strategy("test_storage", {})
src/infrastructure/registry/storage_registry.py:118: in create_strategy
    return self.create_strategy_by_type(storage_type, config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/registry/base_registry.py:160: in create_strategy_by_type
    return self._create_strategy_from_registration(registration, config, type_name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/registry/base_registry.py:275: in _create_strategy_from_registration
    raise ConfigurationError(error_msg) from e
E   src.domain.base.exceptions.ConfigurationError: Failed to create strategy for 'test_storage': Factory error

During handling of the above exception, another exception occurred:
tests/unit/infrastructure/test_storage_registry.py:141: in test_create_strategy_factory_error
    with pytest.raises(ConfigurationError, match="Failed to create storage strategy"):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: Regex pattern did not match.
E    Regex: 'Failed to create storage strategy'
E    Input: "Failed to create strategy for 'test_storage': Factory error"</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_create_config_success" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_create_config_unregistered_error" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_get_registered_storage_types" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_is_storage_registered" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_clear_registrations" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_thread_safety" time="0.002" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistry" name="test_concurrent_access" time="0.002" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistryIntegration" name="test_full_storage_lifecycle" time="0.001" /><testcase classname="tests.unit.infrastructure.test_storage_registry.TestStorageRegistryIntegration" name="test_reset_registry_function" time="0.001"><failure message="assert &lt;src.infrastructure.registry.storage_registry.StorageRegistry object at 0x120edd550&gt; is not &lt;src.infrastructure.registry.storage_registry.StorageRegistry object at 0x120edd550&gt;">tests/unit/infrastructure/test_storage_registry.py:330: in test_reset_registry_function
    assert registry2 is not registry1
E   assert &lt;src.infrastructure.registry.storage_registry.StorageRegistry object at 0x120edd550&gt; is not &lt;src.infrastructure.registry.storage_registry.StorageRegistry object at 0x120edd550&gt;</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry_integration.TestStorageRegistryIntegration" name="test_repository_factory_uses_storage_registry" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.repositories.request_repository' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py'&gt; does not have the attribute 'RequestRepository'">tests/unit/infrastructure/test_storage_registry_integration.py:45: in test_repository_factory_uses_storage_registry
    ) as mock_get_registry, patch(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.repositories.request_repository' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py'&gt; does not have the attribute 'RequestRepository'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry_integration.TestStorageRegistryIntegration" name="test_di_container_uses_repository_factory" time="0.001"><failure message="AttributeError: Mock object has no attribute 'get_config_manager'">tests/unit/infrastructure/test_storage_registry_integration.py:75: in test_di_container_uses_repository_factory
    mock_container.get_config_manager.return_value = mock_config_manager
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:690: in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
E   AttributeError: Mock object has no attribute 'get_config_manager'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry_integration.TestStorageRegistryIntegration" name="test_unit_of_work_creation_via_registry" time="0.001"><failure message="TypeError: RepositoryFactory.__init__() missing 1 required positional argument: 'logger'">tests/unit/infrastructure/test_storage_registry_integration.py:124: in test_unit_of_work_creation_via_registry
    factory = RepositoryFactory(mock_config_manager)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: RepositoryFactory.__init__() missing 1 required positional argument: 'logger'</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry_integration.TestStorageRegistryIntegration" name="test_storage_registration_includes_unit_of_work" time="0.001"><failure message="TypeError: StorageRegistry.create_unit_of_work() takes 2 positional arguments but 3 were given">tests/unit/infrastructure/test_storage_registry_integration.py:155: in test_storage_registration_includes_unit_of_work
    result = registry.create_unit_of_work("test_storage", mock_config)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: StorageRegistry.create_unit_of_work() takes 2 positional arguments but 3 were given</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry_integration.TestStorageRegistryIntegration" name="test_storage_registration_without_unit_of_work_factory" time="0.001"><failure message="TypeError: StorageRegistry.create_unit_of_work() takes 2 positional arguments but 3 were given">tests/unit/infrastructure/test_storage_registry_integration.py:176: in test_storage_registration_without_unit_of_work_factory
    registry.create_unit_of_work("test_storage", Mock())
E   TypeError: StorageRegistry.create_unit_of_work() takes 2 positional arguments but 3 were given</failure></testcase><testcase classname="tests.unit.infrastructure.test_storage_registry_integration.TestStorageRegistryIntegration" name="test_end_to_end_repository_creation" time="0.001"><failure message="AttributeError: &lt;module 'src.infrastructure.persistence.repositories.request_repository' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py'&gt; does not have the attribute 'RequestRepository'">tests/unit/infrastructure/test_storage_registry_integration.py:211: in test_end_to_end_repository_creation
    with patch(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.infrastructure.persistence.repositories.request_repository' from '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py'&gt; does not have the attribute 'RequestRepository'</failure></testcase><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_storage_registry_single_choice_mode" time="0.001" /><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_scheduler_registry_single_choice_mode" time="0.001" /><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_provider_registry_multi_choice_mode" time="0.001" /><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_storage_registry_backward_compatibility" time="0.001" /><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_provider_registry_backward_compatibility" time="0.001" /><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_additional_factories_support" time="0.001" /><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_error_handling" time="0.001" /><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_singleton_behavior" time="0.001" /><testcase classname="tests.unit.infrastructure.test_unified_base_registry.TestIntegratedBaseRegistry" name="test_clear_registrations" time="0.001" /><testcase classname="tests.unit.interface.test_cli_handler_execution.TestCLIHandlerExecution" name="test_handle_list_templates" time="0.001"><failure message="Failed: async def functions are not natively supported.&#10;You need to install a suitable plugin for your async framework, for example:&#10;  - anyio&#10;  - pytest-asyncio&#10;  - pytest-tornasync&#10;  - pytest-trio&#10;  - pytest-twisted">async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted</failure></testcase><testcase classname="tests.unit.interface.test_cli_handler_execution.TestCLIHandlerExecution" name="test_handle_list_scheduler_strategies" time="0.001"><failure message="Failed: async def functions are not natively supported.&#10;You need to install a suitable plugin for your async framework, for example:&#10;  - anyio&#10;  - pytest-asyncio&#10;  - pytest-tornasync&#10;  - pytest-trio&#10;  - pytest-twisted">async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted</failure></testcase><testcase classname="tests.unit.interface.test_cli_handler_execution.TestCLIHandlerExecution" name="test_handle_list_storage_strategies" time="0.001"><failure message="Failed: async def functions are not natively supported.&#10;You need to install a suitable plugin for your async framework, for example:&#10;  - anyio&#10;  - pytest-asyncio&#10;  - pytest-tornasync&#10;  - pytest-trio&#10;  - pytest-twisted">async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted</failure></testcase><testcase classname="tests.unit.interface.test_cli_handler_execution.TestCLIHandlerExecution" name="test_handle_get_request_status" time="0.001"><failure message="Failed: async def functions are not natively supported.&#10;You need to install a suitable plugin for your async framework, for example:&#10;  - anyio&#10;  - pytest-asyncio&#10;  - pytest-tornasync&#10;  - pytest-trio&#10;  - pytest-twisted">async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted</failure></testcase><testcase classname="tests.unit.interface.test_cli_handler_execution.TestFormatConversionConsistency" name="test_format_conversion_in_template_handler" time="0.001"><failure message="Failed: async def functions are not natively supported.&#10;You need to install a suitable plugin for your async framework, for example:&#10;  - anyio&#10;  - pytest-asyncio&#10;  - pytest-tornasync&#10;  - pytest-trio&#10;  - pytest-twisted">async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted</failure></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestProviderConfigHandlers" name="test_handle_provider_config" time="0.002"><failure message="src.domain.base.exceptions.ValidationError: Type error: handle_provider_config() takes 1 positional argument but 2 were given">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
                 ^^^^^^^^^^^^^^^^^^^^^
E   TypeError: handle_provider_config() takes 1 positional argument but 2 were given

The above exception was the direct cause of the following exception:
tests/unit/interface/test_configuration_handlers.py:54: in test_handle_provider_config
    result = await handle_provider_config(args, mock_app)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.ValidationError: Type error: handle_provider_config() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestProviderConfigHandlers" name="test_handle_validate_provider_config" time="0.001"><failure message="src.domain.base.exceptions.ValidationError: Type error: handle_validate_provider_config() takes 1 positional argument but 2 were given">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
                 ^^^^^^^^^^^^^^^^^^^^^
E   TypeError: handle_validate_provider_config() takes 1 positional argument but 2 were given

The above exception was the direct cause of the following exception:
tests/unit/interface/test_configuration_handlers.py:73: in test_handle_validate_provider_config
    result = await handle_validate_provider_config(args, mock_app)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.ValidationError: Type error: handle_validate_provider_config() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestProviderConfigHandlers" name="test_handle_reload_provider_config" time="0.001"><failure message="src.domain.base.exceptions.ValidationError: Type error: handle_reload_provider_config() takes 1 positional argument but 2 were given">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
                 ^^^^^^^^^^^^^^^^^^^^^
E   TypeError: handle_reload_provider_config() takes 1 positional argument but 2 were given

The above exception was the direct cause of the following exception:
tests/unit/interface/test_configuration_handlers.py:92: in test_handle_reload_provider_config
    result = await handle_reload_provider_config(args, mock_app)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.ValidationError: Type error: handle_reload_provider_config() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestConfigurationHandlerImports" name="test_import_configuration_handlers" time="0.001" /><testcase classname="tests.unit.interface.test_configuration_handlers.TestGetProviderConfigCLIHandler" name="test_handle_success" time="0.000"><skipped type="pytest.skip" message="GetProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:126: GetProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestGetProviderConfigCLIHandler" name="test_handle_exception" time="0.000"><skipped type="pytest.skip" message="GetProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:149: GetProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestValidateProviderConfigCLIHandler" name="test_handle_valid_config" time="0.000"><skipped type="pytest.skip" message="ValidateProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:175: ValidateProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestValidateProviderConfigCLIHandler" name="test_handle_invalid_config" time="0.000"><skipped type="pytest.skip" message="ValidateProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:198: ValidateProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestValidateProviderConfigCLIHandler" name="test_handle_exception" time="0.000"><skipped type="pytest.skip" message="ValidateProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:221: ValidateProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestReloadProviderConfigCLIHandler" name="test_handle_success_with_path" time="0.000"><skipped type="pytest.skip" message="ReloadProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:248: ReloadProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestReloadProviderConfigCLIHandler" name="test_handle_success_default_path" time="0.000"><skipped type="pytest.skip" message="ReloadProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:277: ReloadProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestReloadProviderConfigCLIHandler" name="test_handle_with_input_data" time="0.000"><skipped type="pytest.skip" message="ReloadProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:304: ReloadProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestReloadProviderConfigCLIHandler" name="test_handle_exception" time="0.000"><skipped type="pytest.skip" message="ReloadProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:321: ReloadProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestMigrateProviderConfigCLIHandler" name="test_handle_success_default_options" time="0.000"><skipped type="pytest.skip" message="MigrateProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:351: MigrateProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestMigrateProviderConfigCLIHandler" name="test_handle_with_input_data" time="0.000"><skipped type="pytest.skip" message="MigrateProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:386: MigrateProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_configuration_handlers.TestMigrateProviderConfigCLIHandler" name="test_handle_exception" time="0.000"><skipped type="pytest.skip" message="MigrateProviderConfigCLIHandler class not implemented yet">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/interface/test_configuration_handlers.py:412: MigrateProviderConfigCLIHandler class not implemented yet</skipped></testcase><testcase classname="tests.unit.interface.test_scheduler_command_handlers.TestSchedulerCommandHandlers" name="test_handle_list_scheduler_strategies" time="0.001"><failure message="src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'ListSchedulerStrategiesQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/scheduler_command_handlers.py:28: in handle_list_scheduler_strategies
    from src.application.queries.system import ListSchedulerStrategiesQuery
E   ImportError: cannot import name 'ListSchedulerStrategiesQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)

The above exception was the direct cause of the following exception:
tests/unit/interface/test_scheduler_command_handlers.py:32: in test_handle_list_scheduler_strategies
    result = await handle_list_scheduler_strategies(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'ListSchedulerStrategiesQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)</failure></testcase><testcase classname="tests.unit.interface.test_scheduler_command_handlers.TestSchedulerCommandHandlers" name="test_handle_show_scheduler_config" time="0.001"><failure message="src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'GetSchedulerConfigurationQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/scheduler_command_handlers.py:54: in handle_show_scheduler_config
    from src.application.queries.system import GetSchedulerConfigurationQuery
E   ImportError: cannot import name 'GetSchedulerConfigurationQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)

The above exception was the direct cause of the following exception:
tests/unit/interface/test_scheduler_command_handlers.py:52: in test_handle_show_scheduler_config
    result = await handle_show_scheduler_config(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'GetSchedulerConfigurationQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)</failure></testcase><testcase classname="tests.unit.interface.test_scheduler_command_handlers.TestSchedulerCommandHandlers" name="test_handle_validate_scheduler_config" time="0.001"><failure message="src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'ValidateSchedulerConfigurationQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)">src/infrastructure/error/decorators.py:56: in async_wrapper
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/interface/scheduler_command_handlers.py:79: in handle_validate_scheduler_config
    from src.application.queries.system import ValidateSchedulerConfigurationQuery
E   ImportError: cannot import name 'ValidateSchedulerConfigurationQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)

The above exception was the direct cause of the following exception:
tests/unit/interface/test_scheduler_command_handlers.py:71: in test_handle_validate_scheduler_config
    result = await handle_validate_scheduler_config(args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/error/decorators.py:71: in async_wrapper
    raise handled_exception from e
E   src.domain.base.exceptions.InfrastructureError: Unexpected error: cannot import name 'ValidateSchedulerConfigurationQuery' from 'src.application.queries.system' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/system.py)</failure></testcase><testcase classname="tests.unit.interface.test_scheduler_command_handlers.TestSchedulerHandlerImports" name="test_import_scheduler_handlers" time="0.001" /><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_container_lifecycle_management" time="0.001" /><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_circular_dependency_detection" time="0.001"><failure message="src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency ServiceA: Failed to resolve constructor parameters for ServiceA: name 'ServiceB' is not defined">src/infrastructure/di/components/dependency_resolver.py:193: in _resolve_constructor_parameters
    type_hints = get_type_hints(cls.__init__)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:2499: in get_type_hints
    hints[name] = _eval_type(value, globalns, localns, type_params)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:474: in _eval_type
    return t._evaluate(globalns, localns, type_params, recursive_guard=recursive_guard)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1081: in _evaluate
    eval(self.__forward_code__, globalns, localns),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'ServiceB' is not defined

During handling of the above exception, another exception occurred:
tests/unit/patterns/test_di_pattern.py:78: in test_circular_dependency_detection
    container.get(ServiceA)
src/infrastructure/di/container.py:157: in get
    return self._dependency_resolver.resolve(cls, parent_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:77: in resolve
    instance = self._create_instance(cls, new_chain)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:98: in _create_instance
    return self._create_from_registration(registration, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:132: in _create_from_registration
    return self._create_direct_instance(registration.implementation_type, dependency_chain)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:145: in _create_direct_instance
    constructor_params = self._resolve_constructor_parameters(cls, dependency_chain)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/infrastructure/di/components/dependency_resolver.py:256: in _resolve_constructor_parameters
    raise DependencyResolutionError(
E   src.infrastructure.di.exceptions.DependencyResolutionError: Failed to resolve dependency ServiceA: Failed to resolve constructor parameters for ServiceA: name 'ServiceB' is not defined</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_singleton_scope_management" time="0.001" /><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_transient_scope_management" time="0.002" /><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_scoped_lifetime_management" time="0.001"><failure message="TypeError: 'DIContainer' object does not support the context manager protocol">tests/unit/patterns/test_di_pattern.py:132: in test_scoped_lifetime_management
    with container.create_scope() if hasattr(container, "create_scope") else container:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: 'DIContainer' object does not support the context manager protocol</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_injectable_decorator_functionality" time="0.001" /><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_constructor_injection" time="0.001"><failure message="TypeError: DIContainer.register() takes 2 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:179: in test_constructor_injection
    container.register(Repository, Repository, DIScope.SINGLETON)
E   TypeError: DIContainer.register() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_interface_based_injection" time="0.001"><failure message="TypeError: DIContainer.register() takes 2 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:207: in test_interface_based_injection
    container.register(IRepository, ConcreteRepository, DIScope.SINGLETON)
E   TypeError: DIContainer.register() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_factory_registration" time="0.001"><failure message="TypeError: DIContainer.register_factory() takes 3 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:228: in test_factory_registration
    container.register_factory(ComplexService, create_complex_service, DIScope.SINGLETON)
E   TypeError: DIContainer.register_factory() takes 3 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_conditional_registration" time="0.001"><failure message="TypeError: DIContainer.register() takes 2 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:251: in test_conditional_registration
    container.register("env_service", DevService, DIScope.SINGLETON)
E   TypeError: DIContainer.register() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_lazy_initialization" time="0.001"><failure message="TypeError: DIContainer.register() takes 2 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:271: in test_lazy_initialization
    container.register(LazyService, LazyService, DIScope.SINGLETON)
E   TypeError: DIContainer.register() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_thread_safety" time="0.001"><failure message="TypeError: DIContainer.register() takes 2 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:293: in test_thread_safety
    container.register(ThreadSafeService, ThreadSafeService, DIScope.SINGLETON)
E   TypeError: DIContainer.register() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_dependency_resolution_error_handling" time="0.001"><failure message="AttributeError: 'DIContainer' object has no attribute 'resolve'">tests/unit/patterns/test_di_pattern.py:326: in test_dependency_resolution_error_handling
    container.resolve(UnregisteredService)
    ^^^^^^^^^^^^^^^^^
E   AttributeError: 'DIContainer' object has no attribute 'resolve'</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_container_hierarchy" time="0.001"><failure message="TypeError: DIContainer.register() takes 2 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:346: in test_container_hierarchy
    parent_container.register(ParentService, ParentService, DIScope.SINGLETON)
E   TypeError: DIContainer.register() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_decorator_parameter_handling" time="0.001"><failure message="TypeError: injectable() got an unexpected keyword argument 'scope'">tests/unit/patterns/test_di_pattern.py:370: in test_decorator_parameter_handling
    @injectable(scope=DIScope.SINGLETON)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: injectable() got an unexpected keyword argument 'scope'</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_port_adapter_registration" time="0.001"><failure message="TypeError: DIContainer.register() takes 2 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:394: in test_port_adapter_registration
    container.register(LoggerPort, ConsoleLoggerAdapter, DIScope.SINGLETON)
E   TypeError: DIContainer.register() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_container_configuration_validation" time="0.001" /><testcase classname="tests.unit.patterns.test_di_pattern.TestDIPattern" name="test_service_disposal" time="0.001"><failure message="TypeError: DIContainer.register() takes 2 positional arguments but 4 were given">tests/unit/patterns/test_di_pattern.py:440: in test_service_disposal
    container.register(DisposableService, DisposableService, DIScope.SINGLETON)
E   TypeError: DIContainer.register() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_provider_strategy_interface_compliance" time="0.001"><failure message="AssertionError: assert False&#10; +  where False = hasattr(ProviderStrategy, 'execute')">tests/unit/patterns/test_strategy_pattern.py:48: in test_provider_strategy_interface_compliance
    assert hasattr(ProviderStrategy, "execute")
E   AssertionError: assert False
E    +  where False = hasattr(ProviderStrategy, 'execute')</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_provider_strategy_selection" time="0.001"><failure message="TypeError: ProviderStrategyFactory.__init__() missing 1 required positional argument: 'config_manager'">tests/unit/patterns/test_strategy_pattern.py:75: in test_provider_strategy_selection
    factory = ProviderStrategyFactory()
              ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: ProviderStrategyFactory.__init__() missing 1 required positional argument: 'config_manager'</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_strategy_composition" time="0.002"><failure message="AttributeError: Mock object has no attribute 'execute'">tests/unit/patterns/test_strategy_pattern.py:112: in test_strategy_composition
    mock_strategy1.execute.return_value = ProviderResult(
    ^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:690: in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
E   AttributeError: Mock object has no attribute 'execute'</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_runtime_strategy_switching" time="0.001"><failure message="TypeError: ProviderContext.__init__() missing 1 required positional argument: 'logger'">tests/unit/patterns/test_strategy_pattern.py:141: in test_runtime_strategy_switching
    context = ProviderContext()
              ^^^^^^^^^^^^^^^^^
E   TypeError: ProviderContext.__init__() missing 1 required positional argument: 'logger'</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_fallback_strategy_execution" time="0.002"><failure message="AttributeError: Mock object has no attribute 'execute'">tests/unit/patterns/test_strategy_pattern.py:185: in test_fallback_strategy_execution
    primary_strategy.execute.side_effect = Exception("Primary provider unavailable")
    ^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:690: in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
E   AttributeError: Mock object has no attribute 'execute'</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_load_balancing_strategy" time="0.001"><failure message="AttributeError: Mock object has no attribute 'execute'">tests/unit/patterns/test_strategy_pattern.py:228: in test_load_balancing_strategy
    strategy.execute.return_value = ProviderResult(
    ^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:690: in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
E   AttributeError: Mock object has no attribute 'execute'</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_strategy_configuration_validation" time="0.001"><failure message="TypeError: ProviderStrategyFactory.__init__() missing 1 required positional argument: 'config_manager'">tests/unit/patterns/test_strategy_pattern.py:268: in test_strategy_configuration_validation
    factory = ProviderStrategyFactory()
              ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: ProviderStrategyFactory.__init__() missing 1 required positional argument: 'config_manager'</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_strategy_error_handling" time="0.001" /><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_strategy_metrics_and_monitoring" time="0.001"><failure message="AssertionError: assert False&#10; +  where False = isinstance(&lt;Mock name='LoadBalancingProviderStrategy().health_check()' id='4840492400'&gt;, (&lt;class 'bool'&gt;, &lt;class 'dict'&gt;))">tests/unit/patterns/test_strategy_pattern.py:335: in test_strategy_metrics_and_monitoring
    assert isinstance(health, (bool, dict))
E   AssertionError: assert False
E    +  where False = isinstance(&lt;Mock name='LoadBalancingProviderStrategy().health_check()' id='4840492400'&gt;, (&lt;class 'bool'&gt;, &lt;class 'dict'&gt;))</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_strategy_state_management" time="0.001" /><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_provider_selector_algorithms" time="0.001"><failure message="TypeError: Can't instantiate abstract class ProviderSelector without an implementation for abstract method 'select_strategy'">tests/unit/patterns/test_strategy_pattern.py:367: in test_provider_selector_algorithms
    selector = ProviderSelector()
               ^^^^^^^^^^^^^^^^^^
E   TypeError: Can't instantiate abstract class ProviderSelector without an implementation for abstract method 'select_strategy'</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_strategy_factory_patterns" time="0.001"><failure message="TypeError: ProviderStrategyFactory.__init__() missing 1 required positional argument: 'config_manager'">tests/unit/patterns/test_strategy_pattern.py:395: in test_strategy_factory_patterns
    factory = ProviderStrategyFactory()
              ^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: ProviderStrategyFactory.__init__() missing 1 required positional argument: 'config_manager'</failure></testcase><testcase classname="tests.unit.patterns.test_strategy_pattern.TestStrategyPattern" name="test_strategy_chain_of_responsibility" time="0.001"><failure message="AttributeError: Mock object has no attribute 'execute'">tests/unit/patterns/test_strategy_pattern.py:421: in test_strategy_chain_of_responsibility
    strategy.execute.return_value = ProviderResult(
    ^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:690: in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
E   AttributeError: Mock object has no attribute 'execute'</failure></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_manager_initialization" time="0.002"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_or_update_launch_template_per_request_enabled" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_or_update_launch_template_per_request_disabled" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_launch_template_data_basic_fields" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_launch_template_data_network_interfaces" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_launch_template_data_storage_configuration" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_launch_template_data_user_data" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_launch_template_data_iam_instance_profile" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_launch_template_data_monitoring" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_instance_tags_basic" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_create_instance_tags_with_aws_format" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_generate_template_name_request_based" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_generate_template_name_template_based" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_use_existing_template_strategy_found" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_use_existing_template_strategy_not_found" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_error_handling_aws_exception" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_launch_template_result_creation" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.aws.test_launch_template_manager.TestAWSLaunchTemplateManager" name="test_configuration_integration" time="0.001"><error message="failed on setup with &quot;TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'&quot;">tests/unit/providers/aws/test_launch_template_manager.py:52: in setup_method
    self.manager = AWSLaunchTemplateManager(
E   TypeError: AWSLaunchTemplateManager.__init__() got an unexpected keyword argument 'config'</error></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestEC2FleetHandler" name="test_ec2_fleet_handler_creates_fleet" time="0.545"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:52: in test_ec2_fleet_handler_creates_fleet
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestEC2FleetHandler" name="test_ec2_fleet_handler_handles_creation_failure" time="0.092"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:97: in test_ec2_fleet_handler_handles_creation_failure
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestEC2FleetHandler" name="test_ec2_fleet_handler_terminates_instances" time="0.095"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:122: in test_ec2_fleet_handler_terminates_instances
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestASGHandler" name="test_asg_handler_creates_auto_scaling_group" time="0.154"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:163: in test_asg_handler_creates_auto_scaling_group
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestASGHandler" name="test_asg_handler_scales_group" time="0.338"><failure message="botocore.exceptions.ClientError: An error occurred (ValidationError) when calling the CreateAutoScalingGroup operation: At least one Availability Zone or VPC Subnet is required.">tests/unit/providers/test_aws_handlers_comprehensive.py:202: in test_asg_handler_scales_group
    autoscaling.create_auto_scaling_group(
.venv/lib/python3.13/site-packages/botocore/client.py:602: in _api_call
    return self._make_api_call(operation_name, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/botocore/client.py:1078: in _make_api_call
    raise error_class(parsed_response, operation_name)
E   botocore.exceptions.ClientError: An error occurred (ValidationError) when calling the CreateAutoScalingGroup operation: At least one Availability Zone or VPC Subnet is required.</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestASGHandler" name="test_asg_handler_terminates_instances" time="0.103"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:230: in test_asg_handler_terminates_instances
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestSpotFleetHandler" name="test_spot_fleet_handler_creates_spot_fleet" time="0.148"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:273: in test_spot_fleet_handler_creates_spot_fleet
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestSpotFleetHandler" name="test_spot_fleet_handler_handles_price_changes" time="0.088"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:301: in test_spot_fleet_handler_handles_price_changes
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestSpotFleetHandler" name="test_spot_fleet_handler_optimizes_costs" time="0.098"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:319: in test_spot_fleet_handler_optimizes_costs
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestRunInstancesHandler" name="test_run_instances_handler_creates_instances" time="0.088"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:344: in test_run_instances_handler_creates_instances
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestRunInstancesHandler" name="test_run_instances_handler_handles_capacity_errors" time="0.089"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:369: in test_run_instances_handler_handles_capacity_errors
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_aws_handlers_comprehensive.TestRunInstancesHandler" name="test_run_instances_handler_supports_user_data" time="0.098"><failure message="TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?">tests/unit/providers/test_aws_handlers_comprehensive.py:394: in test_run_instances_handler_supports_user_data
    aws_ops = AWSOperations(ec2_client=ec2, logger=Mock())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSOperations.__init__() got an unexpected keyword argument 'ec2_client'. Did you mean 'aws_client'?</failure></testcase><testcase classname="tests.unit.providers.test_fleet_tag_builder.TestFleetTagBuilder" name="test_build_common_tags" time="0.002" /><testcase classname="tests.unit.providers.test_fleet_tag_builder.TestFleetTagBuilder" name="test_build_fleet_tags" time="0.002" /><testcase classname="tests.unit.providers.test_fleet_tag_builder.TestFleetTagBuilder" name="test_build_instance_tags" time="0.002" /><testcase classname="tests.unit.providers.test_fleet_tag_builder.TestFleetTagBuilder" name="test_add_template_tags" time="0.002" /><testcase classname="tests.unit.providers.test_fleet_tag_builder.TestFleetTagBuilder" name="test_add_template_tags_no_template_tags" time="0.002" /><testcase classname="tests.unit.providers.test_fleet_tag_builder.TestFleetTagBuilder" name="test_build_tag_specifications" time="0.002"><failure message="AssertionError: assert 'hf-req-12345...-123456789012' == 'hf-fleet-req...-123456789012'&#10;  &#10;  #x1B[0m#x1B[91m- hf-fleet-req-12345678-1234-1234-1234-123456789012#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?   ------#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ hf-req-12345678-1234-1234-1234-123456789012#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/providers/test_fleet_tag_builder.py:102: in test_build_tag_specifications
    assert fleet_name_tag["Value"] == f"hf-fleet-{self.mock_request.request_id}"
E   AssertionError: assert 'hf-req-12345...-123456789012' == 'hf-fleet-req...-123456789012'
E     
E     #x1B[0m#x1B[91m- hf-fleet-req-12345678-1234-1234-1234-123456789012#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?   ------#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ hf-req-12345678-1234-1234-1234-123456789012#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.providers.test_fleet_tag_builder.TestFleetTagBuilder" name="test_build_asg_tags" time="0.002" /><testcase classname="tests.unit.providers.test_fleet_tag_builder.TestFleetTagBuilder" name="test_tag_consistency_across_methods" time="0.027"><failure message="AssertionError: assert [{'Key': 'Req...3:39.043152'}] == [{'Key': 'Req...3:39.043156'}]&#10;  &#10;  At index 3 diff: #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mKey#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mCreatedAt#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mValue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33m2025-08-14T23:23:39.043152#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mKey#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mCreatedAt#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mValue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33m2025-08-14T23:23:39.043156#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0...&#10;  &#10;  ...Full output truncated (21 lines hidden), use '-vv' to show">tests/unit/providers/test_fleet_tag_builder.py:154: in test_tag_consistency_across_methods
    assert common_non_name == fleet_non_name == instance_non_name
E   AssertionError: assert [{'Key': 'Req...3:39.043152'}] == [{'Key': 'Req...3:39.043156'}]
E     
E     At index 3 diff: #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mKey#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mCreatedAt#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mValue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33m2025-08-14T23:23:39.043152#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mKey#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mCreatedAt#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m, #x1B[33m'#x1B[39;49;00m#x1B[33mValue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33m2025-08-14T23:23:39.043156#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0...
E     
E     ...Full output truncated (21 lines hidden), use '-vv' to show</failure></testcase><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_provider_interface_compliance[mock-MockProvider]" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_provider_factory_registration" time="0.001"><failure message="ModuleNotFoundError: No module named 'src.infrastructure.utilities.factories.provider_factory'">tests/unit/providers/test_provider_interface.py:45: in test_provider_factory_registration
    from src.infrastructure.utilities.factories.provider_factory import (
E   ModuleNotFoundError: No module named 'src.infrastructure.utilities.factories.provider_factory'</failure></testcase><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_provider_configuration_validation" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_mock_provider_functionality" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_mock_provider_configurable_responses" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_provider_template_validation" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_provider_available_templates" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_provider_health_check" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderPort" name="test_provider_capabilities" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderErrorHandling" name="test_provider_initialization_failure" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderErrorHandling" name="test_provider_operation_failures" time="0.001" /><testcase classname="tests.unit.providers.test_provider_interface.TestProviderErrorHandling" name="test_provider_invalid_configuration" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_handler_modules_exist" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_handler_classes_exist" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_handler_initialization" time="0.002" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_client_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_client_initialization" time="0.001"><failure message="TypeError: AWSClient.__init__() got an unexpected keyword argument 'region'">tests/unit/providers/test_providers_comprehensive.py:117: in test_aws_client_initialization
    client = AWSClient()
             ^^^^^^^^^^^
E   TypeError: AWSClient.__init__() missing 2 required positional arguments: 'config' and 'logger'

During handling of the above exception, another exception occurred:
tests/unit/providers/test_providers_comprehensive.py:121: in test_aws_client_initialization
    client = AWSClient(region="us-east-1")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: AWSClient.__init__() got an unexpected keyword argument 'region'</failure></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_configuration_exists" time="0.001"><skipped type="pytest.skip" message="AWSConfig not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:134: AWSConfig not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_configuration_initialization" time="0.001"><skipped type="pytest.skip" message="AWSConfig not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:150: AWSConfig not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_adapters_exist" time="0.012" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_strategy_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_strategy_initialization" time="0.001"><failure message="ValueError: AWSProviderStrategy requires AWSProviderConfig">tests/unit/providers/test_providers_comprehensive.py:201: in test_aws_strategy_initialization
    strategy = AWSProviderStrategy(*mock_deps[:i])
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/providers/aws/strategy/aws_provider_strategy.py:69: in __init__
    raise ValueError("AWSProviderStrategy requires AWSProviderConfig")
E   ValueError: AWSProviderStrategy requires AWSProviderConfig</failure></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_exceptions_exist" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_utilities_exist" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSProviderComprehensive" name="test_aws_managers_exist" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_composite_strategy_exists" time="0.001"><skipped type="pytest.skip" message="CompositeStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:270: CompositeStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_composite_strategy_initialization" time="0.001"><skipped type="pytest.skip" message="CompositeStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:287: CompositeStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_fallback_strategy_exists" time="0.001"><skipped type="pytest.skip" message="FallbackStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:296: FallbackStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_fallback_strategy_initialization" time="0.001"><skipped type="pytest.skip" message="FallbackStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:313: FallbackStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_load_balancing_strategy_exists" time="0.001"><skipped type="pytest.skip" message="LoadBalancingStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:324: LoadBalancingStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_load_balancing_strategy_initialization" time="0.001"><skipped type="pytest.skip" message="LoadBalancingStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:343: LoadBalancingStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_provider_context_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_provider_selector_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_provider_strategy_base_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderStrategyPatternsComprehensive" name="test_strategy_pattern_methods" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSPersistenceComprehensive" name="test_dynamodb_strategy_exists" time="0.001"><skipped type="pytest.skip" message="DynamoDBStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:451: DynamoDBStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSPersistenceComprehensive" name="test_dynamodb_unit_of_work_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSPersistenceComprehensive" name="test_dynamodb_registration_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSAuthenticationComprehensive" name="test_cognito_strategy_exists" time="0.008"><skipped type="pytest.skip" message="CognitoStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:486: CognitoStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSAuthenticationComprehensive" name="test_iam_strategy_exists" time="0.001"><skipped type="pytest.skip" message="IAMStrategy not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:495: IAMStrategy not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSAuthenticationComprehensive" name="test_auth_strategy_initialization" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSResilienceComprehensive" name="test_aws_retry_config_exists" time="0.003" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSResilienceComprehensive" name="test_aws_retry_strategy_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSResilienceComprehensive" name="test_aws_retry_errors_exist" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSTemplateInfrastructureComprehensive" name="test_ami_cache_exists" time="0.001"><skipped type="pytest.skip" message="AMICache not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:568: AMICache not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSTemplateInfrastructureComprehensive" name="test_caching_ami_resolver_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSTemplateInfrastructureComprehensive" name="test_ssm_template_store_exists" time="0.001"><skipped type="pytest.skip" message="SSMTemplateStore not available">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/providers/test_providers_comprehensive.py:590: SSMTemplateStore not available</skipped></testcase><testcase classname="tests.unit.providers.test_providers_comprehensive.TestAWSTemplateInfrastructureComprehensive" name="test_template_infrastructure_initialization" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderRegistrationComprehensive" name="test_aws_registration_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderRegistrationComprehensive" name="test_provider_registry_exists" time="0.001" /><testcase classname="tests.unit.providers.test_providers_comprehensive.TestProviderRegistrationComprehensive" name="test_provider_registry_initialization" time="0.001" /><testcase classname="tests.unit.test_architectural_compliance.TestDDDCompliance" name="test_domain_has_no_infrastructure_dependencies" time="0.051" /><testcase classname="tests.unit.test_architectural_compliance.TestDDDCompliance" name="test_domain_has_no_provider_dependencies" time="0.051"><failure message="AssertionError: Domain layer has provider dependencies: ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/factory.py: src.providers.aws.domain.template.aggregate']&#10;assert not ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/factory.py: src.providers.aws.domain.template.aggregate']">tests/unit/test_architectural_compliance.py:70: in test_domain_has_no_provider_dependencies
    assert not provider_imports, f"Domain layer has provider dependencies: {provider_imports}"
E   AssertionError: Domain layer has provider dependencies: ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/factory.py: src.providers.aws.domain.template.aggregate']
E   assert not ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/factory.py: src.providers.aws.domain.template.aggregate']</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestDDDCompliance" name="test_bounded_context_isolation" time="0.026" /><testcase classname="tests.unit.test_architectural_compliance.TestDDDCompliance" name="test_aggregates_maintain_consistency" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_architectural_compliance.py:115: in test_aggregates_maintain_consistency
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestDDDCompliance" name="test_domain_events_are_immutable" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 3 validation errors for RequestCreatedEvent&#10;aggregate_id&#10;  Field required [type=missing, input_value={'request_id': 'test-requ...uester_id': 'test-user'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;aggregate_type&#10;  Field required [type=missing, input_value={'request_id': 'test-requ...uester_id': 'test-user'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing&#10;request_type&#10;  Field required [type=missing, input_value={'request_id': 'test-requ...uester_id': 'test-user'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/missing">tests/unit/test_architectural_compliance.py:138: in test_domain_events_are_immutable
    event = RequestCreatedEvent(
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for RequestCreatedEvent
E   aggregate_id
E     Field required [type=missing, input_value={'request_id': 'test-requ...uester_id': 'test-user'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   aggregate_type
E     Field required [type=missing, input_value={'request_id': 'test-requ...uester_id': 'test-user'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing
E   request_type
E     Field required [type=missing, input_value={'request_id': 'test-requ...uester_id': 'test-user'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/missing</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestDDDCompliance" name="test_ubiquitous_language_consistency" time="0.001" /><testcase classname="tests.unit.test_architectural_compliance.TestSOLIDCompliance" name="test_single_responsibility_principle" time="0.001"><skipped type="pytest.skip" message="Could not import ApplicationService: No module named 'src.application.service'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_architectural_compliance.py:174: Could not import ApplicationService: No module named 'src.application.service'</skipped></testcase><testcase classname="tests.unit.test_architectural_compliance.TestSOLIDCompliance" name="test_open_closed_principle" time="0.001" /><testcase classname="tests.unit.test_architectural_compliance.TestSOLIDCompliance" name="test_liskov_substitution_principle" time="0.001"><failure message="TypeError: Protocols with non-method members don't support issubclass(). Non-method members: 'provider_type'.">tests/unit/test_architectural_compliance.py:229: in test_liskov_substitution_principle
    assert issubclass(
/opt/homebrew/Cellar/python@3.13/3.13.6/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:2098: in __subclasscheck__
    raise TypeError(
E   TypeError: Protocols with non-method members don't support issubclass(). Non-method members: 'provider_type'.</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestSOLIDCompliance" name="test_interface_segregation_principle" time="0.001" /><testcase classname="tests.unit.test_architectural_compliance.TestSOLIDCompliance" name="test_dependency_inversion_principle" time="0.001"><skipped type="pytest.skip" message="Could not import ApplicationService: No module named 'src.application.service'">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_architectural_compliance.py:259: Could not import ApplicationService: No module named 'src.application.service'</skipped></testcase><testcase classname="tests.unit.test_architectural_compliance.TestCleanArchitectureCompliance" name="test_dependency_direction" time="0.018" /><testcase classname="tests.unit.test_architectural_compliance.TestCleanArchitectureCompliance" name="test_layer_isolation" time="0.051"><failure message="AssertionError: Domain layer has too many external dependencies: ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/factory.py: src.providers.aws.domain.template.aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/repository.py: aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/aggregate.py: machine_status', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_metadata.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_identifiers.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/value_objects.py: machine_identifiers', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/value_objects.py: machine_metadata', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/value_objects.py: machine_status', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_status.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/repository.py: aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/repository.py: machine_status', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_metadata.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: request_identifiers', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: request_metadata', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: request_types', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: request_types', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: request_types', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_types.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/repository.py: aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/domain_interfaces.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/domain_interfaces.py: entity', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/decorators.py: functools', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/persistence_events.py: base_events', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/domain_events.py: base_events', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/infrastructure_events.py: base_events', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/system_events.py: base_events']&#10;assert 27 &lt; 5&#10; +  where 27 = len(['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/factory.py: src.providers.aws.domain.template.aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/repository.py: aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/aggregate.py: machine_status', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_metadata.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_identifiers.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/value_objects.py: machine_identifiers', ...])">tests/unit/test_architectural_compliance.py:350: in test_layer_isolation
    assert (
E   AssertionError: Domain layer has too many external dependencies: ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/factory.py: src.providers.aws.domain.template.aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/repository.py: aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/aggregate.py: machine_status', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_metadata.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_identifiers.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/value_objects.py: machine_identifiers', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/value_objects.py: machine_metadata', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/value_objects.py: machine_status', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_status.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/repository.py: aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/repository.py: machine_status', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_metadata.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: request_identifiers', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: request_metadata', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: request_types', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: request_types', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: request_types', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_types.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/repository.py: aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/domain_interfaces.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/domain_interfaces.py: entity', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/decorators.py: functools', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/persistence_events.py: base_events', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/domain_events.py: base_events', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/infrastructure_events.py: base_events', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/system_events.py: base_events']
E   assert 27 &lt; 5
E    +  where 27 = len(['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/factory.py: src.providers.aws.domain.template.aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/template/repository.py: aggregate', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/aggregate.py: machine_status', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_metadata.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_identifiers.py: __future__', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/value_objects.py: machine_identifiers', ...])</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestCleanArchitectureCompliance" name="test_framework_independence" time="0.009"><failure message="AssertionError: Domain layer has framework dependencies: ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_status.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/aggregate.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/exceptions.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_types.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/repository.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/domain_interfaces.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/domain_events.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/system_events.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/ports/scheduler_port.py: requests']&#10;assert not ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_status.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/aggregate.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/exceptions.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_types.py: requests', ...]">tests/unit/test_architectural_compliance.py:371: in test_framework_independence
    assert not framework_deps, f"Domain layer has framework dependencies: {framework_deps}"
E   AssertionError: Domain layer has framework dependencies: ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_status.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/aggregate.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/exceptions.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_types.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/repository.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/domain_interfaces.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/domain_events.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/events/system_events.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/ports/scheduler_port.py: requests']
E   assert not ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/machine/machine_status.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/aggregate.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/value_objects.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/exceptions.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_identifiers.py: requests', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/request/request_types.py: requests', ...]</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestDesignPatternCompliance" name="test_cqrs_pattern_compliance" time="0.001" /><testcase classname="tests.unit.test_architectural_compliance.TestDesignPatternCompliance" name="test_repository_pattern_compliance" time="0.001"><skipped type="pytest.skip" message="Could not import Repository: cannot import name 'RepositoryPort' from 'src.domain.base.ports' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/ports/__init__.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_architectural_compliance.py:395: Could not import Repository: cannot import name 'RepositoryPort' from 'src.domain.base.ports' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/domain/base/ports/__init__.py)</skipped></testcase><testcase classname="tests.unit.test_architectural_compliance.TestDesignPatternCompliance" name="test_factory_pattern_compliance" time="0.001"><failure message="AssertionError: DIContainer should have resolve method&#10;assert False&#10; +  where False = hasattr(&lt;src.infrastructure.di.container.DIContainer object at 0x172278d50&gt;, 'resolve')">tests/unit/test_architectural_compliance.py:412: in test_factory_pattern_compliance
    assert hasattr(container, "resolve"), "DIContainer should have resolve method"
E   AssertionError: DIContainer should have resolve method
E   assert False
E    +  where False = hasattr(&lt;src.infrastructure.di.container.DIContainer object at 0x172278d50&gt;, 'resolve')</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestDesignPatternCompliance" name="test_aggregate_pattern_compliance" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_architectural_compliance.py:426: in test_aggregate_pattern_compliance
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestCodeQualityCompliance" name="test_no_circular_imports" time="0.001" /><testcase classname="tests.unit.test_architectural_compliance.TestCodeQualityCompliance" name="test_consistent_naming_conventions" time="0.061"><failure message="AssertionError: Found aws_handler usage (should be provider_api): ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/handlers.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/domain/template/value_objects.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/infrastructure/adapters/aws_validation_adapter.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/infrastructure/adapters/provisioning_adapter.py']&#10;assert not ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/handlers.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/domain/template/value_objects.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/infrastructure/adapters/aws_validation_adapter.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/infrastructure/adapters/provisioning_adapter.py']">tests/unit/test_architectural_compliance.py:469: in test_consistent_naming_conventions
    assert (
E   AssertionError: Found aws_handler usage (should be provider_api): ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/handlers.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/domain/template/value_objects.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/infrastructure/adapters/aws_validation_adapter.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/infrastructure/adapters/provisioning_adapter.py']
E   assert not ['/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/di/provider_services.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/application/queries/handlers.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/domain/template/value_objects.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/infrastructure/adapters/aws_validation_adapter.py', '/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/providers/aws/infrastructure/adapters/provisioning_adapter.py']</failure></testcase><testcase classname="tests.unit.test_architectural_compliance.TestCodeQualityCompliance" name="test_proper_exception_hierarchy" time="0.001" /><testcase classname="tests.unit.test_corner_cases.TestBoundaryValueCornerCases" name="test_machine_count_boundary_values" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:37: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestBoundaryValueCornerCases" name="test_template_id_boundary_cases" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:67: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestBoundaryValueCornerCases" name="test_instance_id_format_edge_cases" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:100: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestBoundaryValueCornerCases" name="test_priority_boundary_values" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:122: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestConcurrencyCornerCases" name="test_concurrent_request_creation" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:165: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestConcurrencyCornerCases" name="test_concurrent_status_updates" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:203: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestConcurrencyCornerCases" name="test_concurrent_repository_access" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:244: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestResourceExhaustionCornerCases" name="test_memory_exhaustion_handling" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:287: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestResourceExhaustionCornerCases" name="test_file_descriptor_exhaustion" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:317: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestResourceExhaustionCornerCases" name="test_disk_space_exhaustion_simulation" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:344: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestNetworkFailureCornerCases" name="test_connection_timeout_handling" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:378: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestNetworkFailureCornerCases" name="test_connection_refused_handling" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:391: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestNetworkFailureCornerCases" name="test_network_partition_handling" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:402: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestNetworkFailureCornerCases" name="test_intermittent_network_failures" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:415: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestDataCorruptionCornerCases" name="test_json_corruption_handling" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:448: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestDataCorruptionCornerCases" name="test_partial_data_corruption" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:473: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestDataCorruptionCornerCases" name="test_encoding_corruption_handling" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:499: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestTimeoutCornerCases" name="test_operation_timeout_handling" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:529: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestTimeoutCornerCases" name="test_request_timeout_enforcement" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:550: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestTimeoutCornerCases" name="test_cleanup_after_timeout" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:575: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestEdgeCaseIntegration" name="test_multiple_edge_cases_combined" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:606: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestEdgeCaseIntegration" name="test_cascading_failure_handling" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:638: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_corner_cases.TestEdgeCaseIntegration" name="test_recovery_from_edge_cases" time="0.000"><skipped type="pytest.skip" message="Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_corner_cases.py:667: Domain imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_domain_validation" name="test_domain_validation" time="0.002" /><testcase classname="tests.unit.test_domain_validation" name="test_aws_template_basic" time="0.001" /><testcase classname="tests.unit.test_domain_validation" name="test_aws_template_spot_fleet" time="0.001" /><testcase classname="tests.unit.test_domain_validation" name="test_request_creation" time="0.001" /><testcase classname="tests.unit.test_domain_validation" name="test_base_handler_validation" time="0.001" /><testcase classname="tests.unit.test_import_fixes" name="test_import_fixes" time="0.001" /><testcase classname="tests.unit.test_performance_benchmarks.TestPerformanceBenchmarks" name="test_request_creation_performance" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:32: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestPerformanceBenchmarks" name="test_template_loading_performance" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:60: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestPerformanceBenchmarks" name="test_domain_event_generation_performance" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:92: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestPerformanceBenchmarks" name="test_repository_save_performance" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:122: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestMemoryPerformance" name="test_memory_usage_during_request_creation" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:152: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestMemoryPerformance" name="test_memory_leak_detection" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:189: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestMemoryPerformance" name="test_garbage_collection_impact" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:234: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestConcurrentPerformance" name="test_concurrent_request_creation_performance" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:285: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestConcurrentPerformance" name="test_repository_concurrent_access_performance" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:338: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestConcurrentPerformance" name="test_thread_safety_performance_impact" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:389: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestScalabilityLimits" name="test_maximum_concurrent_requests" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:453: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestScalabilityLimits" name="test_large_dataset_handling" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:499: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestScalabilityLimits" name="test_memory_scalability_limits" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:552: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_performance_benchmarks.TestPerformanceRegression" name="test_performance_baseline" time="0.000"><skipped type="pytest.skip" message="Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)">/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/tests/unit/test_performance_benchmarks.py:603: Performance test imports not available: cannot import name 'RequestRepository' from 'src.infrastructure.persistence.repositories.request_repository' (/Users/flamurg/src/aws/symphony/open-hostfactory-plugin/src/infrastructure/persistence/repositories/request_repository.py)</skipped></testcase><testcase classname="tests.unit.test_security_validation.TestInputValidationSecurity" name="test_sql_injection_prevention_in_template_id" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_security_validation.py:41: in test_sql_injection_prevention_in_template_id
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_security_validation.TestInputValidationSecurity" name="test_xss_prevention_in_user_inputs" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_security_validation.py:71: in test_xss_prevention_in_user_inputs
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_security_validation.TestInputValidationSecurity" name="test_command_injection_prevention" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_security_validation.py:102: in test_command_injection_prevention
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_security_validation.TestInputValidationSecurity" name="test_path_traversal_prevention" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_security_validation.py:135: in test_path_traversal_prevention
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_security_validation.TestInputValidationSecurity" name="test_ldap_injection_prevention" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_security_validation.py:164: in test_ldap_injection_prevention
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_security_validation.TestAuthenticationSecurity" name="test_request_authorization_validation" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_security_validation.py:187: in test_request_authorization_validation
    valid_request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_security_validation.TestAuthenticationSecurity" name="test_template_access_control" time="0.001"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for Template&#10;  Value error, template_id is required [type=value_error, input_value={'template_id': '', 'name... 15, 1, 23, 39, 615923)}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.9/v/value_error">tests/unit/test_security_validation.py:219: in test_template_access_control
    Template(
src/domain/template/aggregate.py:98: in __init__
    super().__init__(**data)
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for Template
E     Value error, template_id is required [type=value_error, input_value={'template_id': '', 'name... 15, 1, 23, 39, 615923)}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.9/v/value_error</failure></testcase><testcase classname="tests.unit.test_security_validation.TestAuthenticationSecurity" name="test_session_security" time="0.001" /><testcase classname="tests.unit.test_security_validation.TestAuthenticationSecurity" name="test_credential_handling_security" time="0.001"><failure message="AssertionError: assert '*******************' == '********************'&#10;  &#10;  #x1B[0m#x1B[91m- ********************#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?                    -#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ *******************#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_security_validation.py:278: in test_credential_handling_security
    assert masked_data["api_key"] == "********************"
E   AssertionError: assert '*******************' == '********************'
E     
E     #x1B[0m#x1B[91m- ********************#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?                    -#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ *******************#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_security_validation.TestDataProtectionSecurity" name="test_sensitive_data_masking_in_logs" time="0.001" /><testcase classname="tests.unit.test_security_validation.TestDataProtectionSecurity" name="test_data_encryption_at_rest" time="0.001" /><testcase classname="tests.unit.test_security_validation.TestDataProtectionSecurity" name="test_pii_data_handling" time="0.001" /><testcase classname="tests.unit.test_security_validation.TestDataProtectionSecurity" name="test_data_sanitization" time="0.001" /><testcase classname="tests.unit.test_security_validation.TestCryptographicSecurity" name="test_secure_random_generation" time="0.002" /><testcase classname="tests.unit.test_security_validation.TestCryptographicSecurity" name="test_password_hashing_security" time="0.099" /><testcase classname="tests.unit.test_security_validation.TestCryptographicSecurity" name="test_secure_token_generation" time="0.001" /><testcase classname="tests.unit.test_security_validation.TestCryptographicSecurity" name="test_data_integrity_verification" time="0.001" /><testcase classname="tests.unit.test_security_validation.TestSecurityConfiguration" name="test_secure_defaults" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_security_validation.py:572: in test_secure_defaults
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase><testcase classname="tests.unit.test_security_validation.TestSecurityConfiguration" name="test_security_headers_simulation" time="0.001" /><testcase classname="tests.unit.test_security_validation.TestSecurityConfiguration" name="test_rate_limiting_simulation" time="0.001"><failure message="AssertionError: assert False&#10; +  where False = &lt;function TestSecurityConfiguration.test_rate_limiting_simulation.&lt;locals&gt;.is_rate_limited at 0x120faf060&gt;('test-user', (1640995200 + 60))">tests/unit/test_security_validation.py:655: in test_rate_limiting_simulation
    assert is_rate_limited(user_id, current_time + rate_limits["requests_per_minute"])
E   AssertionError: assert False
E    +  where False = &lt;function TestSecurityConfiguration.test_rate_limiting_simulation.&lt;locals&gt;.is_rate_limited at 0x120faf060&gt;('test-user', (1640995200 + 60))</failure></testcase><testcase classname="tests.unit.test_security_validation.TestSecurityConfiguration" name="test_input_length_limits" time="0.001"><failure message="TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'">tests/unit/test_security_validation.py:670: in test_input_length_limits
    request = Request.create_new_request(
E   TypeError: Request.create_new_request() got an unexpected keyword argument 'requester_id'</failure></testcase></testsuite></testsuites>