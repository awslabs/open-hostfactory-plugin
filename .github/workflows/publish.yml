name: Publish to PyPI

# SECURITY NOTE: This workflow requires the following repository secrets:
# - PYPI_API_TOKEN: Production PyPI API token (scope: entire account or project)
# - TEST_PYPI_API_TOKEN: Test PyPI API token (scope: entire account or project)
# 
# To set up:
# 1. Create API tokens at https://pypi.org/manage/account/ and https://test.pypi.org/manage/account/
# 2. Add them as repository secrets in GitHub Settings > Secrets and variables > Actions
# 3. See docs/deployment/pypi-setup.md for detailed setup instructions

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

jobs:
  get-config:
    name: Get Python Version from Makefile
    runs-on: ubuntu-latest
    outputs:
      default-python-version: ${{ steps.version.outputs.default-python-version }}
    steps:
    - name: Checkout code

    - name: Install yq
      uses: mikefarah/yq@master
      uses: actions/checkout@v5

    - name: Get default Python version from project config
      id: version
      run: |
        DEFAULT_PYTHON_VERSION=$(yq '.python.default_version' .project.yml)
        echo "default-python-version=$DEFAULT_PYTHON_VERSION" >> $GITHUB_OUTPUT
        echo "Using Python version: $DEFAULT_PYTHON_VERSION"

  publish:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    needs: get-config
    environment: ${{ github.event.inputs.environment || 'pypi' }}

    steps:
    - name: Checkout code

    - name: Install yq
      uses: mikefarah/yq@master
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Build package
      run: |
        make build

    - name: Check package
      run: |
        make test-install

    - name: Publish to Test PyPI
      if: github.event.inputs.environment == 'testpypi' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'pypi')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

    - name: Publish to PyPI
      if: github.event.inputs.environment == 'pypi' || github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

    - name: Create deployment summary
      run: |
        echo "## Package Published Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.environment }}" = "pypi" ] || [ "${{ github.event_name }}" = "release" ]; then
          echo "**Environment:** Production PyPI" >> $GITHUB_STEP_SUMMARY
          echo "**Installation:** \`pip install open-hostfactory-plugin\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Environment:** Test PyPI" >> $GITHUB_STEP_SUMMARY
          echo "**Installation:** \`pip install --index-url https://test.pypi.org/simple/ open-hostfactory-plugin\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commands:**" >> $GITHUB_STEP_SUMMARY
        echo "- \`ohfp --help\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`open-hostfactory-plugin --help\`" >> $GITHUB_STEP_SUMMARY

  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [get-config, publish]
    if: github.event_name == 'release' || github.event.inputs.environment == 'pypi'

    permissions:
      contents: read
      actions: write
      security-events: write

    steps:
    - name: Checkout code

    - name: Install yq
      uses: mikefarah/yq@master
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.txt"

    - name: Install dependencies with uv
      run: |
        make ci-install

    - name: Generate SBOM files
      run: |
        python -m pip install cyclonedx-bom
        make ci-build-sbom

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          python-sbom-cyclonedx.json
          python-sbom-spdx.json
        retention-days: 90

    - name: Upload SBOM to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: python-sbom-cyclonedx.json
      continue-on-error: true
