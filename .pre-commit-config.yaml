# Pre-commit hooks configuration
repos:
  - repo: local
    hooks:
      - id: quality-check
        name: Quality Check
        entry: make quality-check
        language: system
        files: \.(py|md|rst|txt|yaml|yml|json|toml)$
        pass_filenames: false
        description: "Run comprehensive professional quality checks"
      
      - id: validate-imports
        name: Validate Python Imports
        entry: make ci-imports
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Validate that all critical imports work correctly"
      
      - id: validate-cqrs
        name: Validate CQRS Patterns
        entry: make ci-arch-cqrs
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Validate CQRS architecture patterns"
      
      - id: check-architecture
        name: Check Architecture Compliance
        entry: make ci-arch-clean
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check Clean Architecture compliance"
      
      - id: security-scan
        name: Security Scan
        entry: make security-scan
        language: system
        files: \.(py|txt|yml|yaml|toml|Dockerfile)$
        pass_filenames: false
        description: "Run comprehensive security scan"
      
      - id: validate-workflows
        name: Validate Workflows
        entry: make validate-workflows
        language: system
        files: \.github/workflows/.*\.(yml|yaml)$
        pass_filenames: false
        description: "Validate GitHub Actions workflow YAML files"
      
      - id: secrets-detection
        name: Detect Hardcoded Secrets
        entry: bash -c 'grep -r -E "(password|secret|key|token)\s*=\s*[\"'\''][^\"'\'']{8,}" src/ --include="*.py" && echo "Potential hardcoded secrets found" && exit 1 || echo "No hardcoded secrets detected"'
        language: system
        files: ^src/.*\.py$
        pass_filenames: false
        description: "Detect potential hardcoded secrets in source code"
      
      - id: dockerfile-security
        name: Dockerfile Security Check
        entry: bash -c 'if command -v hadolint >/dev/null 2>&1; then hadolint Dockerfile; else echo "Hadolint not installed, skipping Dockerfile security check"; fi'
        language: system
        files: ^Dockerfile.*$
        pass_filenames: false
        description: "Run Hadolint security check on Dockerfiles"
      
      # Architecture Quality Gates
      - id: check-file-sizes
        name: Check File Sizes
        entry: bash -c 'source .venv/bin/activate && python dev-tools/scripts/check_file_sizes.py --warn-only'
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Check for files that may violate Single Responsibility Principle"
        
      - id: validate-cqrs
        name: Validate CQRS Patterns
        entry: bash -c 'source .venv/bin/activate && python scripts/validate_cqrs.py --warn-only'
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Validate CQRS handler patterns and inheritance"
        
      - id: check-architecture
        name: Check Clean Architecture
        entry: bash -c 'source .venv/bin/activate && python dev-tools/scripts/check_architecture.py --warn-only'
        language: system
        files: \.(py)$
        pass_filenames: false
        description: "Validate Clean Architecture dependency rules"
