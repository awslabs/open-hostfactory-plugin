name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  issue_comment:
    types: [created]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: testing
  AWS_SECRET_ACCESS_KEY: testing
  ENVIRONMENT: testing
  TESTING: true
  # Comment trigger words for CI pipeline
  CI_TRIGGERS: "/test,/build,/ci"

jobs:
  check-comment:
    name: Check Comment Triggers
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check comment trigger
        id: check
        uses: ./.github/actions/check-comment-trigger
        with:
          triggers: ${{ env.CI_TRIGGERS }}

  get-config:
    name: Get Configuration
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'issue_comment' || 
      needs.check-comment.outputs.triggered == 'true'
    needs: [check-comment]
    outputs:
      default-python-version: ${{ steps.config.outputs.default-python-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.check-comment.outputs.pr_ref || github.sha }}

    - name: Get project configuration
      id: config
      uses: ./.github/actions/get-config

  # Code Quality Jobs (granular with tool names)
  quality-check:
    name: Professional Quality Standards
    runs-on: ubuntu-latest
    needs: get-config
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch full history for git diff
    
    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
        cache-key-suffix: quality
    
    - name: Run professional quality checks
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "Scheduled run: Running quality checks on all files"
          make quality-check-all
        else
          echo "PR/Push: Running quality checks on modified files only"
          make quality-check
        fi

  auto-format:
    name: Auto-Format Code  
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: get-config
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Setup Python and UV
        uses: ./.github/actions/setup-python-uv
        with:
          python-version: ${{ needs.get-config.outputs.default-python-version }}
          cache-key-suffix: format

      - name: Auto-format (no checks)
        run: |
          uv run ruff format .
          uv run ruff check --fix --exit-zero .

      - name: Commit formatting changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "style: auto-format code with ruff [skip ci]"
            git push
          fi

  lint-ruff:
    name: Ruff (Code Quality)
    runs-on: ubuntu-latest
    needs: get-config
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python and UV
        uses: ./.github/actions/setup-python-uv
        with:
          python-version: ${{ needs.get-config.outputs.default-python-version }}
          cache-key-suffix: ruff

      - name: Check code quality
        run: make ci-quality-ruff

  lint-ruff-optional:
    name: Ruff (Extended Checks)
    runs-on: ubuntu-latest
    needs: get-config
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python and UV
        uses: ./.github/actions/setup-python-uv
        with:
          python-version: ${{ needs.get-config.outputs.default-python-version }}
          cache-key-suffix: ruff-optional

      - name: Extended linting (warnings)
        run: make ci-quality-ruff-optional
        continue-on-error: true

  lint-mypy:
    name: mypy (Type Checking)
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
        cache-key-suffix: mypy

    - name: Run mypy type check
      run: make ci-quality-mypy
      continue-on-error: true

  arch-cqrs:
    name: CQRS Pattern Validation
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
        cache-key-suffix: arch-cqrs

    - name: Run CQRS pattern validation
      run: make ci-arch-cqrs
      continue-on-error: true

  arch-clean:
    name: Clean Architecture Dependencies
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
        cache-key-suffix: arch-clean

    - name: Run Clean Architecture validation
      run: make ci-arch-clean
      continue-on-error: true

  arch-imports:
    name: Import Validation
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
        cache-key-suffix: arch-imports

    - name: Run import validation
      run: make ci-arch-imports
      continue-on-error: true

  arch-file-sizes:
    name: File Size Compliance
    runs-on: ubuntu-latest
    needs: get-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
        cache-key-suffix: arch-file-sizes

    - name: Run file size checks
      run: make ci-arch-file-sizes
      continue-on-error: true

  unit-tests:
    name: Unit Tests (Fast)
    needs: [get-config, lint-ruff]
    uses: ./.github/workflows/reusable-test.yml
    with:
      test-type: unit
      python-version: ${{ needs.get-config.outputs.default-python-version }}
      continue-on-error: true  # TODO: Remove once tests are stable

  integration-tests:
    name: Integration Tests (Fast)
    needs: [get-config, unit-tests]
    uses: ./.github/workflows/reusable-test.yml
    with:
      test-type: integration
      python-version: ${{ needs.get-config.outputs.default-python-version }}
      continue-on-error: true  # TODO: Remove once tests are stable

  e2e-tests:
    name: End-to-End Tests (Fast)
    needs: [get-config, unit-tests, integration-tests]
    uses: ./.github/workflows/reusable-test.yml
    with:
      test-type: e2e
      python-version: ${{ needs.get-config.outputs.default-python-version }}
      continue-on-error: true  # TODO: Remove once tests are stable

  performance-tests:
    name: Performance Tests
    needs: get-config
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    uses: ./.github/workflows/reusable-test.yml
    with:
      test-type: performance
      python-version: ${{ needs.get-config.outputs.default-python-version }}
      continue-on-error: true  # TODO: Remove once tests are stable

  build-and-package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [get-config, lint-ruff, unit-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
        cache-key-suffix: build

    - name: Build package
      run: make build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          build/

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [get-config, unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python and UV
      uses: ./.github/actions/setup-python-uv
      with:
        python-version: ${{ needs.get-config.outputs.default-python-version }}
        cache-key-suffix: test-report

    - name: Download all test results
      uses: actions/download-artifact@v5
      with:
        path: test-results/

    - name: Generate complete test report
      run: make test-report
      continue-on-error: true

    - name: Upload complete test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-test-report
        path: |
          test-results-combined.xml
          coverage-combined.xml
          htmlcov/

    - name: Upload final coverage to Codecov
      uses: codecov/codecov-action@v5
      if: always()
      with:
        files: coverage-combined.xml
        flags: complete
        name: complete-tests

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-ruff, lint-mypy, lint-ruff-optional, arch-cqrs, arch-clean, arch-imports, arch-file-sizes, unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.lint-ruff.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "All CI checks completed successfully"

    - name: Notify failure
      if: ${{ needs.lint-ruff.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "Some CI checks failed"
        exit 1
# Test comment
